[{"title":"1103 host 'xxx' is not allowed to connect to this mysql","url":"/20170311-1103%20host%20%E2%80%98xxx%E2%80%99%20is%20not%20allowed%20to%20connect%20to%20this%20mysql/","content":"出现原因：这是由于mysql服务端root用户所对应的客户端权限设置问题。\n默认所对应的客户端地址只有localhost（也就是服务端的机器），\n我们目的是任何地址都可以用root访问mysql服务端。 \n解决办法：\n$ mysql -u root -p#进入mysql交互界面mysql&gt; use mysql;#使用mysql这个库mysql&gt; grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;hisen&#x27;; #让root可以在任何ip登陆，密码为：hisenmysql&gt; flush privileges; #刷新mysql&gt; exit;#退出$ service mysql restart#重启mysql","categories":["java"],"tags":["mysql"]},{"title":"关于学习英语","url":"/20210605-About-learning-English/","content":"一、背景作为一个软件开发工程师，日常很多机会和英文打交道。特别是上一份工作，做全球支付项目，需要用到英文与国际友人沟通。奈何自己的英语水平捉襟见肘，于是经常会有意地去收集相关的文章。\n今天心血来潮，再次看了一下之前收藏的相关文章，感觉收获不少。于是就想写一篇文章归集一下相关的内容，方便日后翻阅，顺便分享给有需要的人。\n二、资源复旦大学中文系教授严峰\n\n严老师的英语学习硬核秘诀学习英语最重要的还是兴趣，推荐听广播，背课文，背单词。\n\n学外语有什么用关于学习外语的一些用途，方便大家思考自己学习的目的。\n\n\n\n\n程序员圈”名”人王垠 :\n\n解谜英语语法语法、动词比较重要推荐：练习造句。分析句子。语法树的概念蛮好理解，我让我明白了什么叫宾补~\n\n英语学习的一些经验语法和句子结构是关键，其次才是词汇量。如果你的词汇量足够阅读技术文档，那就可以开始看了。遇到不懂的单词，查询之，使用英英字典，记录在本子上，加强记忆。\n\n\nGitHub 上的成功人士：\n\n可能是让你受益匪浅的英语进阶指南(GitHub)\n可能是让你受益匪浅的英语进阶指南(GitBook)\n\n三、后话还是得坚持看文档，背单词。\n","categories":["成长"],"tags":["English"]},{"title":"Agent CGlib VS JDK | 动态代理比较","url":"/20190330-Agent%20CGlib%20VS%20JDK%20%7C%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%AF%94%E8%BE%83/","content":"一、代理简介1.1 代理是什么举个例子：快到吃饭的点了，你有两种选择：1)自己做,2)叫外卖1.1.1 自己做你嫌麻烦，那就叫外卖，只管收外卖其它不关注(解耦);1.1.2 自己做的不好吃，那厨师上门，厨师给你增强菜的味道(增强);\n官方定义：对其他对象提供一种代理以控制对这个对象的访问。\n1.2 使用场景是什么1.2.1 设计模式中有一个设计原则是开闭原则，是说对修改关闭对扩展开放，我们在工作中有时会接手很多前人的代码，里面代码逻辑让人摸不着头脑(sometimes the code is really like shit)，这时就很难去下手修改代码，那么这时我们就可以通过代理对类进行增强。\n1.2.2 我们在使用RPC框架的时候，框架本身并不能提前知道各个业务方要调用哪些接口的哪些方法 。那么这个时候，就可用通过动态代理的方式来建立一个中间人给客户端使用，也方便框架进行搭建逻辑，某种程度上也是客户端代码和框架松耦合的一种表现。\n1.2.3 Spring的AOP机制就是采用动态代理的机制来实现切面编程。\n二、CGlib VS JDK 两种方式实现代理2.1 差异2.1.1 JDK：只能代理接口2.1.2 CGlib：直接代理类\n2.2 简单demo\n完整代码：https://github.com/hisenyuan/IDEAPractice/tree/master/src/main/java/com/hisen/jdk/agent\npublic static void main(String[] args) &#123;    System.out.println(&quot;===CGlibAgentTest===&quot;);    cGlibAgentTest();    System.out.println(&quot;\\n===JDKDynamicAgentTest===&quot;);    jdkDynamicAgentTest();&#125;private static void cGlibAgentTest() &#123;    CGlibAgent cGlibAgent = new CGlibAgent();    Apple apple = (Apple) cGlibAgent.getInstance(Apple.class);    apple.show();    System.out.println();    Orange orange = (Orange) cGlibAgent.getInstance(Orange.class);    orange.show();&#125;private static void jdkDynamicAgentTest() &#123;    // must be return interface    Fruit apple = (Fruit) DynamicAgent.agent(Fruit.class, new Apple());    apple.show();    System.out.println();    Fruit orange = (Fruit) DynamicAgent.agent(Fruit.class, new Orange());    orange.show();&#125;//===CGlibAgentTest===//-&gt; before invoking//Apple show method is invoked//-&gt; after invoking////-&gt; before invoking//    Orange show method is invoked//-&gt; after invoking////===JDKDynamicAgentTest===//-&gt; before invoking//    Apple show method is invoked//-&gt; after invoking////-&gt; before invoking//    Orange show method is invoked//-&gt; after invoking\n\n三、参考连接http://www.cnblogs.com/puyangsky/p/6218925.htmlhttps://blog.csdn.net/u011784767/article/details/78281384\n","categories":["java"],"tags":["java","jdk"]},{"title":"Autowire、Resource的区别 | Java注解","url":"/20190722-Autowire%E3%80%81Resource%E7%9A%84%E5%8C%BA%E5%88%AB%20%7C%20Java%E6%B3%A8%E8%A7%A3/","content":"零、本文背景项目中看到有一个缓存接口存在多个实现类,但是在代码中使用@Resource注解注入,之前有了解过@Autowire @Resource的区别,于是就尝试着搜索@@Resource，于是就有本文的总结了。\n一、两个注解1.1 @Autowire1.1.1 Spring开发;1.1.2 按照type来注入;\n1.2 @Resource1.2.1 JDK开发；1.2.2 按照名称注入，若无，则按type来注入(未指定name的情况下);\n二、后记\n做事情要有计划，得主动;\n需要想清楚自己想要什么样的生活，然后朝着目标奋斗;\n使用现成的代码尽量搞清楚来龙去脉，可以学习知识，更能避免被坑;\n每天的学习时间需要保证，坚持很重要;\n\n","categories":["java"],"tags":["java"]},{"title":"BeanCreationException: Error creating bean with name 'xxxService'","url":"/20170223-BeanCreationException-Error-creating-bean-with-name-xxxService/","content":"出现的问题：\n[platform] ERROR 2017-02-22 17:46:05,756 [RMI TCP Connection(4)-127.0.0.1] org.springframework.web.context.ContextLoader.() | Context initialization failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;pmTranLimitLiteServiceImpl&#x27;: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.msds.zkutil.ZkLockFactory] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;@javax.annotation.Resource(mappedName=, shareable=true, description=, name=, type=class java.lang.Object, authenticationType=CONTAINER, lookup=)&#125;\tat org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:306) ~[spring-context-3.2.4.RELEASE.jar:3.2.4.RELEASE]\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1116) ~[spring-beans-3.2.4.RELEASE.jar:3.2.4.RELEASE]\n最重要的是这句\norg.springframework.beans.factory.BeanCreationException:Error creating bean with name&#x27;pmTranLimitLiteServiceImpl&#x27;\n出现的原因：缺少相关的jar包或者依赖\n建议不要自己配置idea的module和artificts\n直接在pom.xml文件添加\n&lt;artifactId&gt;hisen-project&lt;/artifactId&gt;&lt;!--加在这句话后面--&gt;  &lt;packaging&gt;war&lt;/packaging&gt;&lt;!--加上这句话就会自动给你打war包--&gt;\n\n其他原因\n开始不知道什么问题，后来搜索这个服务。\n发现这跟dubbo有关，于是百度搜索进了官网\n没想到常见问题里面就有说这个事情\n13. 出现org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;xxxService&#x27;: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Method must not be null怎么办？通常是classpath下存在spring多个版本的jar包，排除掉不需要的spring包即可。\n更多dubbo问题：点击查看\n"},{"title":"BeanUtils 对象拷贝 - 仅拷贝指定属性 - 接口性能优化","url":"/20200926-BeanUtils-copyLimitedProperties-for-better-performance-of-response/","content":"零、背景很多时候我们调用接口并不是需要接口返回的所有信息;就像查询数据库很少使用 select * from table; 一样;\n为了使现有的存储结构以及代码逻辑改动最少想办法在最外层的接口对返回的对象进行精简\n目的使为了提高接口性能：减少 RPC 传输时间、节省网络带宽、节省序列化开销\n一、方案\n直接创建一个对象，根据入参传入的所需字段，写一堆 if else 进行 get set;\n使用序列化工具，转为类似 Map 结构，取值拼装;\n使用 BeanWrapper 操作对象;\n\n前面两种比较呆板，属于定制化开发;\n二、实践Spring BeanWrapper 方案处理非集合对象比较完美，输出对象小不少;基本数据类型有默认值，无法去除，不过这种对大小影响不大;完整代码：github.com\npublic static void main(String[] args) &#123;    Order order = getOrder();    Order smallerOrder = new Order();    List&lt;String&gt; keepFields = Lists.newArrayList();    keepFields.add(&quot;orderId&quot;);    keepFields.add(&quot;address.province&quot;);    // i want get all names, not only index 1, how to do ?    keepFields.add(&quot;productInfos[1].name&quot;);    copyLimitedProperties(order, smallerOrder, keepFields);    Gson gson = new Gson();    System.out.println(&quot;src:&quot; + gson.toJson(order));    System.out.println(&quot;des&quot; + gson.toJson(smallerOrder));&#125;\n\n输出 src:\n&#123;    &quot;address&quot;: &#123;        &quot;province&quot;: &quot;B&quot;,        &quot;city&quot;: &quot;A&quot;,        &quot;county&quot;: &quot;C&quot;    &#125;,    &quot;productInfos&quot;: [        &#123;            &quot;productId&quot;: 0,            &quot;name&quot;: &quot;name0&quot;,            &quot;price&quot;: 1,            &quot;num&quot;: 0,            &quot;imgUrl&quot;: &quot;url1&quot;        &#125;,        &#123;            &quot;productId&quot;: 0,            &quot;name&quot;: &quot;name1&quot;,            &quot;price&quot;: 2,            &quot;num&quot;: 0,            &quot;imgUrl&quot;: &quot;url1&quot;        &#125;,        &#123;            &quot;productId&quot;: 0,            &quot;name&quot;: &quot;name2&quot;,            &quot;price&quot;: 3,            &quot;num&quot;: 0,            &quot;imgUrl&quot;: &quot;url1&quot;        &#125;    ]&#125;\n\n输出dst\n&#123;    &quot;address&quot;: &#123;        &quot;province&quot;: &quot;B&quot;    &#125;,    &quot;productInfos&quot;: [        &#123;            &quot;productId&quot;: 0,            &quot;num&quot;: 0        &#125;,        &#123;            &quot;productId&quot;: 0,            &quot;name&quot;: &quot;name1&quot;,            &quot;num&quot;: 0        &#125;    ]&#125;\n三、缺点目前 Spring BeanWrapper 处理集合类型比较费劲，需要告知一个个具体的路径比如：productInfos[1].name如果能做到 productInfos[any].name 这种，然后取出所有 index 的属性，就比较完美(目前解决方法：通过自定义处理，遇到 any 标识，自动补全所有 index 的 key 即可，只是不那么优雅)\n缺陷原因：内部逻辑直接用 key 转换为 index ，没有 any 逻辑。\nelse if (value instanceof List) &#123;     index = Integer.parseInt(key);     List&lt;Object&gt; list = (List)value;     this.growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1);     value = list.get(index); &#125;\n代码位置：org.springframework.beans.AbstractNestablePropertyAccessor#getPropertyValue\n四、参考Spring 官方文档：Bean Manipulation and the BeanWrapper\n","categories":["java"],"tags":["java"]},{"title":"字节码增强 - 初识链路追踪 - ByteBuddy","url":"/20230226-Bytecode_enhancement_part_1/","content":"1. 简单介绍1.1 背景\n不能通过 -javaagent 方式启动\n需要增强非业务代码( Spring AOP 不够用)\n业务方尽量少改动代码\n\n1.2 效果[Byte Buddy] BEFORE_INSTALL net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer@87f383f on sun.instrument.InstrumentationImpl@4eb7f003[Byte Buddy] INSTALL net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer@87f383f on sun.instrument.InstrumentationImpl@4eb7f003[Byte Buddy] TRANSFORM com.hisen.agent.util.Hisen [sun.misc.Launcher$AppClassLoader@18b4aac2, null, Thread[main,5,main], loaded=false]name before:hisenhello: hisen1677417020466public static void com.hisen.agent.util.Hisen.hello(java.lang.String): took 0 millisecondHisenAdvice exit. time use:0\n2. 代码逻辑2.1 启动类/** * @author hisenyuan * @date 2023/2/6 21:31 */public class Start &#123;    public static void main(String[] args) &#123;        startTraceAgent();        Hisen.hello(&quot;hisen&quot;);    &#125;    private static void startTraceAgent() &#123;        Instrumentation install = ByteBuddyAgent.install();        HisenInterceptor.init(install);        new HisenInstrumentation().init(install);    &#125;&#125;\n\n2.2 拦截方式会改变程序执行的堆栈\n/** * @author hisenyuan * @date 2023/2/8 21:17 */public class HisenInterceptor &#123;    public static void init(Instrumentation instrumentation) &#123;        new AgentBuilder.Default()                .type(ElementMatchers.nameEndsWith(&quot;Hisen&quot;))                .transform((builder, type, classLoader, module, protectionDomain) -&gt; builder.method(ElementMatchers.any()).intercept(MethodDelegation.to(TimeInterceptor.class)))                .installOn(instrumentation);    &#125;    public static class TimeInterceptor &#123;        @RuntimeType        public static Object intercept(@Origin Method method, @SuperCall Callable&lt;?&gt; callable) throws Exception &#123;            long start = System.currentTimeMillis();            try &#123;                return callable.call();            &#125; catch (Exception e) &#123;                // 进行异常信息上报                System.out.println(&quot;方法执行发生异常&quot; + e.getMessage());                throw e;            &#125; finally &#123;                System.out.println(method + &quot;: took &quot; + (System.currentTimeMillis() - start) + &quot; millisecond&quot;);            &#125;        &#125;    &#125;&#125;\n\n2.3 代码注入不会改变代码堆栈流这种方式也可以增强系统类\n/** * @author hisenyuan * @date 2023/2/8 20:16 */public class HisenInstrumentation &#123;    public void init(Instrumentation instrumentation) &#123;        new AgentBuilder.Default()                .disableClassFormatChanges()                .with(RETRANSFORMATION)                // Make sure we see helpful logs                .with(AgentBuilder.RedefinitionStrategy.Listener.StreamWriting.toSystemError())                .with(AgentBuilder.Listener.StreamWriting.toSystemError().withTransformationsOnly())                .with(AgentBuilder.InstallationListener.StreamWriting.toSystemError())                .ignore(none())                // Ignore Byte Buddy and JDK classes we are not interested in                .ignore(                        nameStartsWith(&quot;net.bytebuddy.&quot;)                                .or(nameStartsWith(&quot;jdk.internal.reflect.&quot;))                                .or(nameStartsWith(&quot;java.lang.invoke.&quot;))                                .or(nameStartsWith(&quot;com.sun.proxy.&quot;))                )                .disableClassFormatChanges()                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)                .with(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)                .with(AgentBuilder.TypeStrategy.Default.REDEFINE)                .type(nameEndsWith(&quot;Hisen&quot;))                .transform(                        (builder, type, classLoader, transformer, module) -&gt;                                builder.visit(Advice.to(HisenAdvice.class).on(isMethod().and(named(&quot;hello&quot;)))))                .installOn(instrumentation);    &#125;    public static class HisenAdvice &#123;        @Advice.OnMethodEnter        static long enter(@Advice.Argument(value = 0, typing = DYNAMIC, readOnly = false) String name) &#123;            System.out.println(&quot;name before:&quot; + name);            // change name            name += System.currentTimeMillis();            return System.currentTimeMillis();        &#125;        @Advice.OnMethodExit(onThrowable = RuntimeException.class)        static void exit(                @Advice.Enter                long startTime) &#123;            System.out.println(&quot;HisenAdvice exit. time use:&quot; + (System.currentTimeMillis() - startTime));        &#125;    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"Curator - 封装分布式锁等 | ZooKeeper目前最好用的客户端","url":"/20190425-Curator%20-%20ZooKeeper%E7%9B%AE%E5%89%8D%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF/","content":"一、什么是CuratorApache Curator is a Java&#x2F;JVM client library for Apache ZooKeeper, a distributed coordination service.It includes a highlevel API framework and utilities to make using Apache ZooKeeper much easier and more reliable.It also includes recipes for common use cases and extensions such as service discovery and a Java 8 asynchronous DSL.\n特别说明：Guava is to Java What Curator is to ZooKeeper\n二、常见用法后期补上自己的一些demo，其实官方文档已经介绍很全了http://curator.apache.org/getting-started.html\n三、其它说明了解这个客户端是在《从Paxos到Zookeeper:分布式一致性原理与实战》这本书里面看到的(书单)Curator号称是世界上最好用的zk客户端，相比zkClinet来说拥有更好的封装让我想起Redisson和Jedis的模样\n昨天一个做移动端的前同事截图问我那些代码什么意思，用的就是Curator封装的分布式锁\n相比于Redis分布式存在超时问题，zookeeper分布式锁利用临时节点可以避免\n目前dubbo master上使用的是Curator 4.0.1\n","categories":["java"],"tags":["java"]},{"title":"Could not initialize class io.jsonwebtoken.impl.DefaultJwtBuilder","url":"/20181015-Could%20not%20initialize%20class%20io.jsonwebtoken.impl.DefaultJwtBuilder/","content":"使用jsonwebtoken出现如下错误\nCould not initialize class io.jsonwebtoken.impl.DefaultJwtBuilderjava.lang.NoClassDefFoundError: Could not initialize class io.jsonwebtoken.impl.DefaultJwtBuilder\tat io.jsonwebtoken.Jwts.builder(Jwts.java:116) ~[jjwt-0.7.0.jar:0.7.0]\n原因,因为jackson-databindb版本冲突，直接去掉了依赖\njwt必须依赖Jackson所以报错了\n出错时候的配置\n&lt;dependency&gt;    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;    &lt;version&gt;0.7.0&lt;/version&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;\n解决办法\n&lt;dependency&gt;    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;    &lt;version&gt;0.7.0&lt;/version&gt;&lt;/dependency&gt;\n","categories":["java"],"tags":["jsonwebtoken"]},{"title":"DBeaver-连接全部数据库工具-DBeaver快捷键","url":"/20170402-DBeaver-%E8%BF%9E%E6%8E%A5%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7-DBeaver%E5%BF%AB%E6%8D%B7%E9%94%AE/","content":"Windows、Linux、Mac OS X多个平台都可以用\n据我观察这个数据库可视化工具很不错，基于java\n以各种驱动来连接数据库，也就是说java支持的数据库都可以用他连接\n挺好用的，免费！！！\n安装之后新建连接，选择你要链接的数据库，配置一下就好了。\n下载地址官网下载地址\n快捷键#Shift + Home选中当前光标到行首#Shift + End选中当前光标到行尾#Shift + ↑/↓/←/→ 移动光标并且选中#Alt + X 执行选中的sql#Ctrl + Enter 执行当前光标所在行的sql#Ctrl + Alt + F 格式化SQL（file -&gt; properties -&gt; +SQL Editor -&gt; SQL formatting）","categories":["sql"],"tags":["sql"]},{"title":"Data URI scheme 利用base64字符串通过image标签显示图片","url":"/20170512-Data%20URI%20scheme%20%E5%88%A9%E7%94%A8base64%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%9A%E8%BF%87image%E6%A0%87%E7%AD%BE%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/","content":"目前，Data URI scheme支持的类型有：\n\ndata:,文本数据\ndata:text&#x2F;plain,文本数据\ndata:text&#x2F;html,HTML代码\ndata:text&#x2F;html;base64,base64编码的HTML代码\ndata:text&#x2F;css,CSS代码\ndata:text&#x2F;css;base64,base64编码的CSS代码\ndata:text&#x2F;javascript,Javascript代码\ndata:text&#x2F;javascript;base64,base64编码的Javascript代码\ndata:image&#x2F;gif;base64,base64编码的gif图片数据\ndata:image&#x2F;png;base64,base64编码的png图片数据\ndata:image&#x2F;jpeg;base64,base64编码的jpeg图片数据\ndata:image&#x2F;x-icon;base64,base64编码的icon图片数据\n\nData URL是在本地直接绘制图片，不是从服务器加载，所以节省了HTTP连接，起到加速网页的作用。\n也无法获取到图片在服务器上的真实地址\n注意：本方法适合于小图片，大图片就不要考虑了，另外IE8以下浏览器不支持这种方法。\n用这种方法会加重客户端的CPU和内存负担，总之有利有弊。\n前台代码：\n&lt;%@ page import=&quot;com.hisen.image.ShowImageByBase64&quot; %&gt;&lt;%--  Created by IntelliJ IDEA.  User: Administrator  Date: 2017/5/11  Time: 18:55  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;% String imageStr = ShowImageByBase64.showimage();%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&quot;data:image/png;base64,&lt;%=imageStr%&gt;&quot; alt=&quot;base64图片&quot;/&gt;&lt;/body&gt;&lt;/html&gt;\n\n后台代码：\npackage com.hisen.image;import com.hisen.utils.Base64Util;import com.hisen.utils.File2ByteArraysUtil;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import sun.misc.BASE64Encoder;/** * &lt;img src=&quot;data:image/png;base64,&lt;%=imageStr%&gt;&quot; alt=&quot;base64image&quot;/&gt; * Created by hisenyuan on 2017/5/11 at 18:44. */public class ShowImageByBase64 &#123;  public static String showimage() &#123;    //写相对路径会报错，暂时不知道如何解决    String imagePath = &quot;C:\\\\1\\\\830.jpg&quot;;    byte[] bytes = File2ByteArraysUtil.file2Bytes(imagePath);    String s = Base64Util.encodeBase64(bytes);    return s;  &#125;  /**   * sun.misc.BASE64Encoder   */  public static String encodeBase64(byte[] str) &#123;    if (str == null) &#123;      return null;    &#125; else &#123;      BASE64Encoder encoder = new BASE64Encoder();      try &#123;        return encoder.encode(str);      &#125; catch (Exception var3) &#123;        return null;      &#125;    &#125;  &#125;  /***   * file2byte[]   * @param path   * @return   */  public static byte[] file2Bytes(String path) &#123;    byte[] buffer = null;    File file = new File(path);    try &#123;      FileInputStream fis = new FileInputStream(file);      ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);      byte[] b = new byte[1000];      int n;      while ((n = fis.read(b)) != -1) &#123;        bos.write(b, 0, n);      &#125;      fis.close();      bos.close();      buffer = bos.toByteArray();    &#125; catch (FileNotFoundException e) &#123;      e.printStackTrace();    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125;    return buffer;  &#125;&#125;","categories":["java"],"tags":["java","jsp"]},{"title":"Debian丨Ubuntu丨shadowsocks-libev一键安装脚本","url":"/20170904-Debian%E4%B8%A8Ubuntu%E4%B8%A8shadowsocks-libev%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/","content":"执行命令：(装完就开机启动)\nwget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.shchmod +x shadowsocks-libev-debian.sh./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log\n默认设置：\n服务器端口：自己设定（如不设定，默认为 8989）密码：自己设定（如不设定，默认为 teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-gcm）\n管理命令：\n启动：/etc/init.d/shadowsocks start停止：/etc/init.d/shadowsocks stop重启：/etc/init.d/shadowsocks restart查看状态：/etc/init.d/shadowsocks status\n修改配置文件(端口、密码)\nvi /etc/shadowsocks-libe/config.json&#123;    &quot;server&quot;:&quot;0.0.0.0&quot;,    &quot;server_port&quot;:9090,    &quot;local_address&quot;:&quot;127.0.0.1&quot;,    &quot;local_port&quot;:1080,    &quot;password&quot;:&quot;password&quot;,    &quot;timeout&quot;:600,    &quot;method&quot;:&quot;aes-256-gcm&quot;&#125;\n卸载命令\n./shadowsocks-libev-debian.sh uninstall","categories":["工具"],"tags":["network"]},{"title":"Docker 入门实践","url":"/20170929-Docker%20%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/","content":"早些天不忙的时候看的入门，从有道云笔记搬过来的\n简介Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\nDocker的应用场景\nWeb 应用的自动化打包和发布。\n自动化测试和持续集成、发布。\n在服务型环境中部署和调整数据库或其他的后台应用。\n从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。\n\n\nDocker的优点\n简化程序：Docker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的\t任务，在Docker容器的处理下，只需要数秒就能完成。\n避免选择恐惧症：如果你有选择恐惧症，还是资深患者。Docker 帮你\t打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。\n节省开支：一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。\n\nDocker 架构\n\n\n中文\n英文\n解释\n\n\n\n镜像\nDocker Images\nDocker 镜像是用于创建 Docker 容器的模板。\n\n\n容器\nDocker Container\n容器是独立运行的一个或一组应用。\n\n\n客户端\nDocker Client\nDocker 客户端通过命令行或者其他工具使用 Docker API (查看API) 与 Docker 的守护进程通信。\n\n\n主机\nDocker Host\n一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。\n\n\n仓库\nDocker Registry\nDocker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(查看镜像) 提供了庞大的镜像集合供使用。\n\n\n工具\nDocker Machine\nDocker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。\n\n\nUbuntu Docker 安装使用脚本安装下载最新的安装包hisen@hisen-pc:~$ wget -qO- https://get.docker.com/ | sh\nhello-world#启动sudo service docker start#运行hello-worlddocker run hello-world##报错docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.31/containers/create: dial unix /var/run/docker.sock: connect: permission denied.##解决:su 以root方式运行#docker run hello-world##提示:没有image,然后自动下载Unable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-worldb04784fba78d: Pull complete Digest: sha256:f3b3b28a45160805bb16542c9531888519430e9e6d6ffc09d72261b0d26ff74fStatus: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.#已经启动成功\nDocker 使用#启动某个指定的镜像,运行hello-worldroot@hisen-pc:/home/hisen# docker run ubuntu:15.10 /bin/echo &quot;Hello world&quot;Unable to find image &#x27;ubuntu:15.10&#x27; locally15.10: Pulling from library/ubuntu7dcf5a444392: Downloading   6.29MB/51.07MB759aa75f3cee: Download complete 3fa871dc8a2b: Download complete 224c42ae46e7: Download complete \n各个参数解析docker run ubuntu:15.10 &#x2F;bin&#x2F;echo “Hello world”\n\n\n\n参数\n解释\n\n\n\ndocker\nDocker 的二进制执行文件\n\n\nrun\n与前面的 docker 组合来运行一个容器\n\n\nubuntu:15.10\n指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。\n\n\n&#x2F;bin&#x2F;echo “Hello world”\n在启动的容器里执行的命令\n\n\n以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin&#x2F;echo “Hello world”，然后输出结果。\n运行交互式的容器root@hisen-pc:/home/hisen# docker run -i -t ubuntu:15.10 /bin/bash##这时,我们已经进入了ubuntu:15.10的系统##这时就是进入了命令行,可以执行相关命令root@6265d70f44d2:/# ##运行exit命令或者使用CTRL+D来退出容器\n-t:在新容器内指定一个伪终端或终端。-i:允许你对容器内的标准输入 (STDIN) 进行交互。\n启动容器（后台模式）root@hisen-pc:/home/hisen# docker run -d ubuntu:15.10 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;8c2a843273608eb155279ce4e4f9f4c5442c2af3524ba50ca2d6c8ccbd207081\n后台启动完成,会返回一串容器的ID\n##查看是否有容器启动root@hisen-pc:/home/hisen# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES8c2a84327360        ubuntu:15.10        &quot;/bin/sh -c &#x27;while...&quot;   About a minute ago   Up About a minute \nCONTAINER ID:容器ID(这里是:&#x3D;&#x3D;8c2a84327360&#x3D;&#x3D;)\nNAMES:自动分配的容器名称\n## 查看上面那个ID的容器的logroot@hisen-pc:/home/hisen# docker logs 8c2a84327360## 输出内容hello worldhello world## 停止容器(指定ID:8c2a84327360)root@hisen-pc:/home/hisen# docker stop 8c2a84327360## 输出ID,说明已经停止成功8c2a84327360## 检查是否真的关闭root@hisen-pc:/home/hisen# docker ps## 输出没有,说明真的关闭了CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nDocker 客户端docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。\n## 调出帮助root@hisen-pc:/home/hisen# docker##　输出帮助信息Usage:\tdocker COMMANDA self-sufficient runtime for containersOptions:      --config string      Location of client config files (default &quot;/root/.docker&quot;)  -D, --debug              Enable debug mode      --help               Print usage  -H, --host list          Daemon socket(s) to connect to  -l, --log-level string   Set the logging level## 了解更详细的帮助信息root@hisen-pc:/home/hisen#docker　stats --help## 输出详细帮助信息Usage:\tdocker stats [OPTIONS] [CONTAINER...]Display a live stream of container(s) resource usage statisticsOptions:  -a, --all             Show all containers (default shows just running)      --format string   Pretty-print images using a Go template      --help            Print usage      --no-stream       Disable streaming stats and only pull the first result\n运行一个WEB容器运行一个 Python Flask 应用 来搭建一个web应用\n## -d:让容器在后台运行。## -P:将容器内部使用的网络端口映射到我们使用的主机上。root@hisen-pc:/home/hisen# docker run -d -P training/webapp python app.py## 提示本地没有,远程下载Unable to find image &#x27;training/webapp:latest&#x27; locallylatest: Pulling from training/webappe190868d63f8: Pull complete 909cd34c6fd7: Pull complete 0b9bfabab7c1: Pull complete a3ed95caeb02: Pull complete 10bbbc0fc0ff: Pull complete fca59b508e9f: Pull complete e7ae2541b15b: Pull complete 9dd97ef58ce9: Pull complete a4c1b0cb7af7: Pull complete Digest: sha256:06e9c1983bd6d5db5fba376ccd63bfa529e8d02f23d5079b8f74a616308fb11dStatus: Downloaded newer image for training/webapp:latest## 下载完成直接后台运行了,打印idb03903d6abf3d65a4e6469a57d11ae539aaad1f166078591e7315ca2fb2611ff## 查看运行的dockerroot@hisen-pc:/home/hisen# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMESb03903d6abf3        training/webapp     &quot;python app.py&quot;     9 minutes ago       Up 9 minutes        0.0.0.0:32768-&gt;5000/tcp   nifty_mirzakhani\n0.0.0.0:32768-&gt;5000&#x2F;tcpdocker使用的端口5000\n映射到本地端口32768\n本地可以访问:127.0.0.1:32768\n## 访问:http://localhost:32768/## 输出Hello world!## 可以指定端口 8060为自映射端口,5000为容器端口root@hisen-pc:/home/hisen# docker run -d -p 8060:5000 training/webapp python app.py0d68d3d4baf61248129ede721cc6004649ebddaaace8c23f16b677fbe2b2ce7droot@hisen-pc:/home/hisen# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES0d68d3d4baf6        training/webapp     &quot;python app.py&quot;     5 seconds ago       Up 4 seconds        0.0.0.0:8060-&gt;5000/tcp   ecstatic_jang## 查看端口映射情况(可以通过id,或者名字)## 这里用ID测试root@hisen-pc:/home/hisen# docker port 0d68d3d4baf6## 输出信息,后面为映射到本地的端口5000/tcp -&gt; 0.0.0.0:8060\n查看WEB应用程序日志## 带上 -f 参数,动态输出日志root@hisen-pc:/home/hisen# docker logs -f 0d68d3d4baf6 * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)## 刷新页面之后的日志172.17.0.1 - - [01/Sep/2017 14:09:01] &quot;GET / HTTP/1.1&quot; 200 -172.17.0.1 - - [01/Sep/2017 14:09:01] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -\n查看WEB应用程序容器的进程## top后面是跟着id或者nameroot@hisen-pc:/home/hisen# docker top 0d68d3d4baf6## 输出的信息UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                19372               19352               0                   21:39               ?                   00:00:00            python app.py\n检查WEB应用程序## 会输出一大串JSON形式的字符串## 记录着 Docker 容器的配置和状态信息root@hisen-pc:/home/hisen# docker inspect 0d68d3d4baf6\nWEB程序其他操作docker stop  0d68d3d4baf6## 移除之前必须停止,否则会报错docker rm 0d68d3d4baf6\n\nDocker 镜像使用列出所有本地的镜像root@hisen-pc:/home/hisen# docker imagesREPOSITORY           TAG                 IMAGE ID            CREATED             SIZEhello-world          latest              1815c82652c0        2 months ago        1.84kBwoailuoli993/jblse   0.2.0               82099e8d7049        6 months ago        7.58MBubuntu               15.10               9b9cb95443b5        13 months ago       137MBtraining/webapp      latest              6fae60ef3446        2 years ago         349MB\n其他命令## 获取一个镜像## ubuntu:镜像库中的TAG## 13.10:某个TAG的版本docker pull ubuntu:13.10## 搜索某个镜像docker search httpd## 拖取镜像docker pull httpd## 运行镜像docker run httpd## 创建镜像### 进入某个镜像的bash命令行(在此镜像基础上创建自己的镜像)root@hisen-pc:/home/hisen# docker run -t -i ubuntu:15.10### 更新系统(镜像的)root@4a3f5f4373d8:/# apt-get update##提交容器副本### 退出镜像的bash命令界面root@4a3f5f4373d8:/# exit          exit### 提交副本root@hisen-pc:/home/hisen# docker commit -m=&quot;has update&quot; -a=&quot;hisen&quot; 4a3f5f4373d8 hisen/ubuntu:v2### 返回副本容器的idsha256:a94d0bdd2e31aa420c14e9886ff911354c07a7772715bd8d380bd0832f396c82### 查看,发现刚刚提交的副本显示出来了root@hisen-pc:/home/hisen# docker imagesREPOSITORY           TAG                 IMAGE ID            CREATED              SIZEhisen/ubuntu         v2                  a94d0bdd2e31        About a minute ago   159MBhello-world          latest              1815c82652c0        2 months ago         1.84kBwoailuoli993/jblse   0.2.0               82099e8d7049        6 months ago         7.58MBubuntu               15.10               9b9cb95443b5        13 months ago        137MBtraining/webapp      latest              6fae60ef3446        2 years ago          349MB## 参数说明-m:提交的描述信息-a:指定镜像作者4a3f5f4373d8：容器ID(就是你修改之前的id)hisen/ubuntu:v2:指定要创建的目标镜像名## 进入新镜像的bash命令docker run -t -i hisen/ubuntu:v2 /bin/bash \n构建一个全新的镜像新建一个配置文件:Dockerfile,并添加内容\n每个指令都会在镜像上创建一个新的层\n每一个指令的前缀都必须是大写的。\n第一条FROM，指定使用哪个镜像源\nRUN 指令告诉docker 在镜像内执行命令，安装了什么\nroot@hisen-pc:/home/hisen# vi Dockerfile FROM    ubuntu:16.04MAINTAINER      Fisher &quot;hisenyuan@gmail.com&quot;RUN     /bin/echo &#x27;root:123456&#x27; |chpasswdRUN     useradd hisenRUN     /bin/echo &#x27;hisen:123456&#x27; |chpasswdRUN     /bin/echo -e &quot;LANG=\\&quot;en_US.UTF-8\\&quot;&quot; &gt;/etc/default/localEXPOSE  22EXPOSE  80CMD     /usr/sbin/sshd -D## 保存配置文件之后,构建镜像,注意最后那个点.root@hisen-pc:/home/hisen# docker build -t hisen/ubuntu:16.04 .sending build context to Docker daemon    776MB","categories":["docker"],"tags":["docker"]},{"title":"Docker一键安装脚本Ubuntu-Debian-CentOS-Fedora-racleLinux","url":"/20170417-Docker%E4%B8%80%E4%BB%B6%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%ACUbuntu-Debian-CentOS-Fedora-racleLinux/","content":"系统要求Ubuntu 14.04、16.04\nDebian 7.7、8.0\nCentOS 7.X\nFedora 20、21、22\nOracleLinux 6、7\n安装方法：\ncurl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -\n详情：http://mirrors.aliyun.com/help/docker-engine\n","categories":["linux"],"tags":["docker"]},{"title":"DockerFile - 创建java开发环境镜像","url":"/20180111-DockerFile%20-%20%E5%88%9B%E5%BB%BAjava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%95%9C%E5%83%8F/","content":"使用ubuntu官方发布的docker镜像进行二次修改\n这是一个菜鸟的脚本，执行命令应该是使用 &amp; 连接，一个RUN命令搞定\nFROM    ubuntuMAINTAINER      Fisher &quot;hisenyuan@gmail.com&quot;RUN     /bin/echo &#x27;root:hisen&#x27; |chpasswdRUN     useradd hisenRUN     /bin/echo &#x27;hisen:hisen&#x27; |chpasswdRUN     /bin/echo -e &quot;LANG=\\&quot;en_US.UTF-8\\&quot;&quot; &gt;/etc/default/local# 显示系统位数RUN\t\tuname -p# 清空源 RUN     echo &quot;&quot; &gt; /etc/apt/sources.list# 更换为阿里云源RUN\t\techo &quot;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN\t\techo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list# 更新源RUN\t\tapt-get update# 安装软件RUN     apt-get -y install vimRUN     apt-get -y install curlRUN     apt-get -y install wgetRUN     apt-get -y install net-toolsRUN     apt-get -y install iputils-pingRUN     apt-get -y install git# 创建软件文件夹RUN     mkdir -p /usr/hisen/soft/javaRUN     mkdir -p /usr/hisen/soft/tomcatRUN     mkdir -p /usr/hisen/soft/mavenRUN     mkdir -p /usr/hisen/soft/download# 添加本地软件包到指定文件夹（会自动解压，软件压缩包必须放在docker同级目录）ADD jdk-8u151-linux-x64.tar.gz /usr/hisen/soft/java/ADD apache-tomcat-8.5.24.tar.gz /usr/hisen/soft/tomcat/ADD apache-maven-3.5.2-bin.tar.gz /usr/hisen/soft/maven/# 配置环境变量# javaENV JAVA_HOME=/usr/hisen/soft/java/jdk1.8.0_151ENV JRE_HOME=$JAVA_HOME/jreENV CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libENV PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin# tomcatENV CATALINA_HOME=/usr/hisen/soft/tomcat/apache-tomcat-8.5.24ENV CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/libENV PATH=$PATH:$CATALINA_HOME/bin# mavenENV MAVEN_HOME=/usr/hisen/soft/maven/apache-maven-3.5.2ENV MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;ENV PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH# 监听端口EXPOSE  22EXPOSE  80EXPOSE  8080CMD     /usr/sbin/sshd -D","categories":["linux"],"tags":["docker"]},{"title":"Dubbo官方中文文档|用户文档|开发者指南|源码导读|运维管理","url":"/20190325-Dubbo%E5%AE%98%E6%96%B9%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%7C%E7%94%A8%E6%88%B7%E6%96%87%E6%A1%A3%7C%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97%7C%E6%BA%90%E7%A0%81%E5%AF%BC%E8%AF%BB%7C%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86/","content":"一、为什么要学Dubbo近几年一直在使用dubbo进行支付系统的开发;作为国内比较受欢迎的一个SOA框架，Dubbo使用简单设计优雅;里面用到的思想和技术，基本上涵盖大部分互联网公司用到的技术;记得直属领导说过一句话，看完Dubbo他觉得设计者简直就是天才;而且看完dubbo的源码，对他的影响很大，处处模仿dubbo的思想;\n二、文档地址中文文档：用户文档、开发者指南、源码导读、运维管理http://dubbo.apache.org/zh-cn/docs/user/quick-start.html用户手册(比较完整)：https://dubbo.gitbooks.io/dubbo-user-book/demos/routing-rule.html官方博客：http://dubbo.apache.org/zh-cn/blog/index.html\n三、Dubbo创始人博客最后更新于2014年https://javatar.iteye.com/\n","categories":["java"],"tags":["java","源码","Dubbo"]},{"title":"王慧文(美团)：很少人知道自己在愚昧之巅","url":"/20200723-Few-people-know-that-they-are-ignorance/","content":"零、写在前面早几天在领导 JG 的朋友圈看到这篇文章简单几个字的标题，让我产生了兴趣一来这个标题是挺吸引人，典型的自媒体文章二来JG 之前推过一些书很不错三来一般领导朋友圈都不会推垃圾信息\n全文看来其实感觉还是挺切合我的认知：\n\n人很难认清自己，很难找到方向，成长路上有他人指点会很棒\n除了遇到的人合读过的书，十年之后你还是你\n多与他人交流，多帮助他人，利人利己\n运动、学习、反馈、重塑大脑\n\n离开学校大部分时间都是围绕着工作有些人可能觉得当前的工作不满意然后想着学点什么高大上的东西为以后的工作做准备极端情况下这种选择是对的，大部分情况会让自己进退两难正确的选择应该是：过好当下，瞭望远方，持续学习，总结反思，慢慢进步架构师同事 SGLS 说过：做好当下的事情才是最重要的，不管现在是做什么项目，设计和实现是我们自己可以控制的。\n以下为原文\n审视是一个特别好的词。当一个人开始审视世界、审视经历、审视自己的时候，更容易做出有担当的选择。作为美团“二号首长”，王慧文选择在2020年底正式“退休”，这不可分说地成为了焦点——王慧文，是怎么成为“王慧文”的？\n一、“不自我设限”，造就无边界的王慧文什么是促使人成长的本质原因？王慧文一直在渴求突破，也一直在探究这个问题。\n1. 人要接受变化，有动荡才有进化王慧文修行的开端，就是校内网。2006年3月，王慧文、王兴和另外四名同伴绞尽脑汁、黑白颠倒，终于让校内网收获了一百多万用户。王兴开始四处找投资，但在多数投资人眼里看来，他们仍是群“生瓜蛋子”、“杂牌军”，校内网不过是几个大学生做的小打小闹的玩意儿。但在这时，千橡集团董事长陈一舟出现了，他愿意拿出一千多万人民币，收购校内网。《九败一胜：美团创始人王兴创业十年》中这样描述\n\n陈一舟说，如果你们不卖，我们可以拿这钱砸到市场上推广。当然，校内网的这群狂妄的小子被这句话激怒了，拒绝跟陈一舟谈。回绝了陈一舟后，王兴的融资依旧不顺利，陈一舟却与王兴他们保持接触，认准了校内网这条大鱼，准备放长线，持久诱惑。2006年9月，陈一舟再次抬高了收购校内网的价码，校内网召开了五人的股东会。王慧文觉得校内网的机会难得，做成的希望很大，而且是自己一手做起来的产品，感情已经很深，所以坚决反对卖掉。王兴态度中立，但倾向于不卖。赖斌强则考虑的方面更多，他支持卖掉，以免大家背着一身巨债创业。除了他们三个大股东，还有另两名小股东，杨俊和付栋平。他们加入较晚，股份也较少，觉得卖不卖都行，比起被收购，他们更担心王慧文和赖斌强由于意见不合而导致团队破裂。这次争论后不久，陈一舟就就又开出了更高的收购价格。几人意识到，如果继续争论不休，团队的裂痕势必更深。万般无奈之下，校内网不得不同意陈一舟的条件。那一晚，大家都不说话，一起去吃夜宵的时候，王兴、王慧文、赖斌强全喝醉了，所有人大哭了一场。\n不论校内网是成功的，还是失败的，在王慧文和王兴的心里，它永远都是遗憾的。回首往事，王慧文已经不再执着，反而觉得这段遗憾对自己的人生是件好事。他说：如果校内网做成了，我会变成让别人非常讨厌的人，刚愎、自负，因为挫折，所以我才懂得反省自己，能更理智客观冷静地看待自己。还有人问王慧文，如果当初不卖的话，校内网能不能做得成？王慧文答：这取决于我们遇到什么样的投资商，如果投资商能够在很多地方帮助我们，是可能做成的；如果投完钱就不怎么管，让我们自己随便搞，那就不行，因为我们还不够成熟。管理者的自我反思，会反馈在他的战略、领导力、管理、业务实操等能力上。人必须反思，是因为事物是时刻变化的，不断反思，才能不断跟上变化。王慧文在一次采访中说：美团的持续高速增长，不是我们在推动着业务发展，而是业务快速发展，我们努力地跟上，不是我们做了什么事情，只是我们跟上了，没掉队。在一个快速发展的行业里，在一个快速变化的时代里， 创业者、管理者如果没有自我反思，是很难生存下来的。在第一次创业修行中，王慧文就悟出一个道理：人，把事做成不易，不断成长、突破自己边界更难。\n2. 不设限的人生，成长机会无限“君子不器”是王慧文的人生原则之一。2019年，在极客公园创新大会上，极客公园创始人、总裁张鹏问王慧文：你觉得美团的基因是什么？王慧文当时就说出了“君子不器”四个字，他面对张鹏侃侃而谈：孔子说，君子不器，君子不是一个器皿，人不要搞自我定义，自我定义就是自我设限，我不倾向于用美团的基因来自我设限。他还用“基因突变”举例，基因变化变错的概率比变对的概率高几百万倍，所以大家都很恐惧基因变化，抵触变化。但王慧文认为变化不可怕，自我设限才最可怕，他还幽默地说：一旦变对了呢？一旦长出翅膀了呢？这种不自我设限，就是“美团无边界，专注而不专一”的根源。君子不器，有两个含义：一是人想要成长就不能有固化思维，事物是变化的，人也要具备动态发展的眼光，反思过去，展望未来；二是人不能像器皿那样自我设限，器皿只有某一方面的用途和才能，而人应该博学多识。孔子的这两点要求，王慧文都做到了，他的生活和工作就是如此。\n《财经天下》周刊记者朱晓培这样形容“百变的王慧文”\n在王慧文的朋友圈里，总能看见他忽然想到一个问题，比如：是不是20世纪在唯心主义和唯物主义领域都没有出现过大师？如果地球上没有美洲，哥伦布的船直接西行到了亚洲，今天的世界格局又会是什么样子？为什么射雕英雄传的五绝里只有反派欧阳锋没有广招门徒？\n正如王慧文在内部信中所说，他个人的兴趣“散乱不稳定”。当年创业时，王慧文和王兴都不会敲代码，但他们都觉得：没事，我们可以学。同样，后来在美团时，有一段时间王慧文要研究零售，他几乎每天都看一本关于零售的书，并且跟很多人谈论自己的心得。\n王慧文敬佩爱因斯坦，爱因斯坦曾说：科学和艺术一样，都让我们的世界更加绚丽多彩。爱因斯坦格外推崇西方古典音乐。这位“相对论”的创始人经常和“量子论”的创始人普朗克一起演奏贝多芬的作品，爱因斯坦拉小提琴，普朗克弹钢琴。相对论和量子论共同构成了21世纪物理学科的两大支柱，而它们的创始人不仅都对科学抱有偏执的热情，也都对艺术也怀有高涨的热爱，这真的很奇妙。\n\n王慧文从中体会到：爱因斯坦经常从艺术和审美的视角去探讨科学命题，人如果永远只站在一个视角来看待人生，人生就会变得特别狭隘，不够丰富，而站在不同视角来看待问题，不设限地长大，才非常重要。不自我定义、不自我设限、不抗拒变化、不沉溺过去的王慧文，与“无边界”的美团极为匹配。\n2012年底，美团实现盈亏平衡后，王慧文认为团购领域大局已定，又开始把目光聚焦在了外卖领域。2015年10月，早已在“千团大战”中站稳脚跟的美团，开始跟大众点评整合，从T型战略逐步转向餐饮、酒旅、综合三大业务架构。几次调整后，到店餐饮事业群、外卖配送事业群和餐饮生态平台被统一归进餐饮平台，总负责人仍然是王慧文。2017年12月，美团再次调整架构，王慧文担任大零售事业群总裁，统筹生鲜零售、外卖、配送、餐饮B2B等业务。同时，王慧文还负责出行事业部，正式和滴滴展开角逐。至此，美团点评已经构建了新到店事业群、大零售事业群、酒店旅游事业群和出行事业部四大业务体系，王慧文是其中两大事业群的统帅。\n如果管理者认为自己就是一个器皿，那么你就会认为自己的状态永远不会改变，也没有改变的必要。如果王慧文这样想，就不会为美团的基业立下赫赫战功。只有当你明白“君子不器”的道理时，才会意识到成长的必要性，也才会清醒地看到自己过去的弱点。不自我设限，多元思考人生，始终相信自己有更多机会，这样的管理者才能持续地自我突破，才能在激烈的竞争中拼杀出属于自己的战场。\n二、“练强兵，结硬寨，打呆仗”，造就能征善战的王慧文王慧文信奉曾国藩的九字箴言：练强兵，结硬寨，打呆仗。\n1. 有担当的管理者，麾下自有万千雄兵“练强兵”很容易理解，当时清朝腐败，太平天国武装起义，清朝的正规军竟无力抵抗，只好调动地方军事力量，多亏有曾国藩统率的湘军，才能击败太平军。此后，湘军成为了清朝军事上强有力的骨干。没有强兵，则无法作战。但强兵如何练成？曾国藩治理湘军，主要凭思想纪律，而不是战术技巧。王慧文“练强兵”，看重三点：人聪明，接地气，学习能力强（不是考试能力强）。其次，王慧文主张：管理者的一个重要责任，就是——担当。王慧文有一句话曾经火遍全网：有担当的管理者，要把下属从“愚昧之巅”推向“绝望之谷”，至于下属能否爬上“开悟之坡”，看个人造化。王慧文解释，这句话的核心词是“担当”。他向来不喜欢说“责任”，因为他认为：责任可以逃避，只有有担当的管理者才不会逃避责任。那么，什么是“愚昧之巅”、“绝望之谷”、“开悟之坡”？这些词语源于 达克效应 ，王慧文说：我思考我个人的成长和周围同事的成长，每个人都希望自己最后成为智者（大师），但是，我们要承认一个事实，大部分人没有走上去。\n愚昧之巅——人的智慧极低，但是自信度极高；绝望之谷——认识到自己的不足，智慧有所增长，自信度大幅降低；开悟之坡——智慧继续增长，自信度开始反弹增长；持续平稳高原——智慧达到顶级，自信心也持续平稳，走上大师之路。\n王慧文说：大部分人没能从愚昧之巅走到绝望之谷，大部分人都在这个部分遇到了困难。王慧文借用“达克效应”理论，不是为了拆穿别人的智慧不足，而是为了强调管理者的担当，他认为：\n大部分人都知道别人处在愚昧之巅，但是很少有人知道自己处在愚昧之巅，这就产生了非常大的信息不对称。为什么人不知道自己在愚昧之巅？就是因为每一个人在自己成长的过程中，没有得到有效反馈，没有人告诉他“你现在在愚昧之巅”。因此，有效反馈变得非常重要和稀缺。但是再进一步思考，为什么很多人没有得到这个反馈？因为别人没有这个责任反馈给你，而且戳破真相是有风险的。\n王慧文觉得他们在离开美团的环境后，很可能更没希望得到他人的有效反馈了，所以他有好几次，在同事或下属离职时，告诉了对方正处于愚昧之巅的真相，但是转眼就被拉黑了。尽管王慧文承认他们是一个好人、正直的人，也是一个想成长的、对美团有过贡献的人，将来也会成为对社会有贡献的人，王慧文希望对方成长得更好，才戳破真相，但是要戳破真相、给他人有效反馈，就必须承担得罪人的风险。\n也正因此，管理者才更需要担当。王慧文说：你给别人反馈的时候，也可能你自己是一个傻×，可能我自己是在愚昧之巅，其实人家是对的，这个可能性也是很大的，通过这个行为反而证明了你可能在愚昧之巅的事实。管理者能不能从善意出发，帮下属敲响警钟？又能不能在被误解时，甘愿承受来自下属的伤害？或者是在发现自己比下属更愚昧的时候，还能不能调整心态，通过努力学习来提升自己的智慧和自信？回答这些问题的最好方式，就是努力向一个有担当的管理者去逼近。担当，是管理者们最稀缺的能力，但却是“练强兵”必不可少的素质。\n2. 优秀管理者，都在暗下笨功夫“结硬寨，打呆仗”，是曾国藩的兵法内核。字面意思是，把军营扎得坚如磐石，打仗时不讲究技巧而是追求笨方法。曾国藩带兵打仗有个规矩，他到任何地方安营扎寨之后，不论当时是刮风还是下雨，首先命令士兵们挖掘战壕，壕深约两米，而且还要筑墙，墙高约八尺高，墙外再挖一道沟。这就确保整个营盘固若金汤。湘军总是要挖沟、筑墙，行军速度非常慢。由于这种打法显得特别笨，所以才叫“结硬寨，打呆仗”。王慧文的工作速度并不慢，但他也爱下笨功夫，一个细节一个细节得打磨，确保每个业务流程都能稳扎稳打。美团前员工这样评价王慧文：老王可能是我见过在互联网行业，大佬级别中所谓“比你聪明还更拼搏”，并且会关注很多业务细节的人。工作起来，王慧文就像变成了拼命三郎，让很多比他年轻的人都心生畏惧。据美团前员工回忆：每周六下午，是大团队的业务管理会，每个分支业务的负责人要详细地讲解业务进度，用数据说话，以结果为导向，绝对不让周报变成“流水账”；在这个过程中，王慧文会非常认真地听每个人的讲解，绝不走过场，绝不讲废话；某个员工在周报中提及“某个数据变化属于正常波动”，这是产品负责人没有特别认真思考或经验欠缺、全局感不强而惯用的一个理由，而此时王慧文则会一针见血地指出是因为什么问题、什么原因导致的数据变化，让人心服口服。王兴在内部信里这样评价王慧文：\n美团精神，老王身体力行、堪称典范。回顾老王过去九年多的工作，既有冲锋在前的勇猛，又有安营扎寨的稳健；既有舍我其谁的担当，又有功成不必在我的潇洒；既有“天下兴亡，匹夫有责”的责任感，又有“我们什么都没有，但是我们有兄弟和勇气”的真性情；既长期有耐心地保持战略定力，又坚持时不我待、只争朝夕地忘情投入。美团人经常加班到凌晨两三点，但转天早上九点又准时坐到办公室里开会，这让很多人对美团这家公司佩服不已。\n2013年6月，美团收购猛买网，猛买网创始人张智勇在加入美团之后，曾发微博说：牛x都是苦x堆出来的，你看美团网牛x，没看到的都是苦x。原来公司没有比它做得好，就是我不够苦x，是因为我管理不好。在这里，每月每周都能学到东西，蛮好的。辛苦没关系，能学到东西就行，最怕加班没结果。\n对王慧文来说，周六全天开会，周日半天高管会，每周留给自己的时间或许只有一个下午而已。但王慧文向外界和美团内部员工展现的，永远是一副精力充沛、充满激情的样子。这就像将军带兵打仗，“跟我上”和“给我上”，一字之差，但全军的战斗力却会有天壤之别。前者能把团队里每个人的心思都拧成一股绳，无往不胜；后者却永远苦于团队像一盘散沙。\n三、“不宜贪天之功，知止不殆”，造就未来不可限量的王慧文王慧文在今年年初的内部信里，把自己在美团拼搏的17年激情燃烧岁月，轻描淡写地说成了“我运气实在太好”。低调、收敛，不是王慧文今天才有的风格，而是他始终具备的性格底色。王慧文经常开玩笑地说，我是农民的孩子，只会拼命工作。玩笑的背后，是他专注做事的态度，以及不居功自傲的格局和胸襟。管理者要常常怀有“清零思维”，过去的错误要变成未来的前车之鉴，不能用来惩罚自己；过去的成就要变成未来的经验和警示，不能用来炫耀自己、骄傲自满。如果管理者觉得自己“满了”，也就意味着，你认为自己的成长之路到头了。清零思维也是一种包容心。《九败一胜：美团创始人王兴创业十年》写道：王慧文曾去过无锡，见到88米高的灵山大佛，从远处看大佛，跟山一样高，走近大佛，人还没有大佛的脚趾头高。王慧文心想，如果这尊大佛有脚臭的话，那么来观光的人就只能闻到大佛的脚臭味，而看不见整个大佛的巍巍如山。只有包容的人，心胸宽广，眼界开阔，才看得到大佛的宝相庄严。该书的作者李志刚说：也只有包容的CEO，才能听到下面的真实心声，兼听则明，才能有各种奇人异士来帮你做事。王慧文这17年来，已经为美团培养了大批人才，也为人才梯度建设付出了贡献，他离职后，自然也不需要人才来帮自己做事了，但是这种包容心会始终伴随他，让他的未来无法限量。王慧文也包容对手，他和王兴都不认为美团是在跟同行们“争”，美团是在“竞”，他说：我们不认为千团大战是我们打赢了别人，而是我们跟上了行业节奏，他们没有跟上，这个认知是跟打仗不一样的；同向为竞，相向为争。\n包容，就是不眷恋。\n王慧文不眷恋名利荣誉，他说“我运气实在太好，不宜继续贪天之功，知止不殆”；王慧文不眷恋自己的能力，他说“感谢我的家人，承受很多困难，无怨无尽地给我支持和包容”，还感谢了时代、王兴和所有同事；王慧文不眷恋他的江湖，他说“美团十年，豪兴不浅。他日江湖相逢，再当杯酒言欢”。\n金庸先生曾写：天上白云，散了又聚，聚了又散，人生离合，亦复如斯。\n今天，我们预测王慧文的人生“下半场”会有怎样的风景，已经是徒劳，因为他早已选择了一条“不确定”的人生旅程。王慧文说过，固定靶比移动靶更难打中。人生就像一个移动靶，我们谁也不知道自己的未来将穿梭至何处，也几乎不可能帮别人预测。我们只能希望，当自己修炼出清零思维、包容心、不眷恋的人生态度时，能够跟上时代变化莫测的脚步，不要掉队。不论人生的下半场将会如何，至少王慧文已经可以潇洒地说出一句——“这十年激烈精彩，不负年华”。\n四、参考美团王慧文：很少人知道自己在愚昧之巅\n","categories":["随说"],"tags":["王慧文"]},{"title":"Java 文件读取，部分中文乱码 - 分析与解决","url":"/20210731-File-reading-part-of-Chinese-garbled-code/","content":"一、背景最近做项目有一个地址库文件需要放在后端由于文件在 jar 包中的问题，一些读取文件的姿势失效(方便的 Guava Files)最后通过 getResourceAsStream 解决\n接下来遇到了一件奇怪的事情，部分汉字乱码了，调整编码，重新编辑汉字都试过了，无法解决。\n最后求助于百度搜索，得到了一些有效的信息。汉字是两个字节的，如果每次读固定个字节，可能会把汉字截断，造成乱码。再次印证了基础知识的重要性！\n二、相关代码2.1 罪魁祸首利用缓冲区读取文件，会出现边界情况下把汉字分割成两次来读。\n\nprivate static String getAddressJson(String path) throws IOException &#123;    log.info(&quot;cacheFile start. PATH:&#123;&#125;&quot;, path);    InputStream resourceAsStream = Address.class.getClassLoader().getResourceAsStream(path);    StringBuilder sb = new StringBuilder();    byte[] buf = new byte[10240];    int length;    while ((length = Objects.requireNonNull(resourceAsStream).read(buf)) != -1) &#123;        // 此处 new String 放进去了一半中文字符，导致乱码        sb.append(new String(buf, 0, length, StandardCharsets.UTF_8));    &#125;    resourceAsStream.close();    return sb.toString();&#125;\n2.2 完美运行据说现在很多人没法纯手写通过流读取文件了…(说的就是我!)\nprivate static String getAddressJson(String path) throws IOException &#123;    log.info(&quot;cacheFile start. PATH:&#123;&#125;&quot;, path);    InputStream resourceAsStream = Address.class.getClassLoader().getResourceAsStream(path);    StringBuilder sb = new StringBuilder();    InputStreamReader isr = new InputStreamReader(Objects.requireNonNull(resourceAsStream));    BufferedReader br = new BufferedReader(isr);    String newLine;    while ((newLine = br.readLine()) != null) &#123;        sb.append(newLine);    &#125;    resourceAsStream.close();    return sb.toString();&#125;\n\n三、参考文章CSDN\n\nInputStream 、InputStreamReader 和 BufferedReader\nJava 读取文件里面部分汉字内容乱码\n\n","categories":["java"],"tags":["java"]},{"title":"FindLucklyGirl - 找出值班的幸运儿","url":"/20180720-FindLucklyGirl%20-%20%E6%89%BE%E5%87%BA%E5%80%BC%E7%8F%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E5%84%BF/","content":"一、背景简介今天头给我们开会，说到团队对外沟通的问题。\n谈到对外需要积极给人解决问题，而不是各种推脱，即使自己不知道，也可以给个眼神找到对的人。\n继而谈到需要安排人轮流负责跟外部接洽\n由于这个活呢，大伙儿认为不是什么好差事，那就抓阄决定吧\n于是乎就感觉可以写一个简单的排班系统小bug，不过我这里只是提供一个简单的思路\n二、程序代码主要的逻辑在这，当然并没有考虑数据持久化的问题\n性能等其他的问题，纯粹是一个思路，用hashCode取模主要是打的比较散，很均匀\n加上日期什么的，就一个排班表出来了。\n/** * * @param person 目前所有的人 * @param lucklys 这一轮已经值班了的人 */private static void findLucklyOneByHashCode(List&lt;String&gt; person, ArrayList&lt;String&gt; lucklys) &#123;    List&lt;String&gt; result = new ArrayList&lt;&gt;(person);    result.removeAll(lucklys);    if (result.size() == 0) &#123;        lucklys.clear();        result = new ArrayList&lt;&gt;(person);    &#125;    String code = System.nanoTime() + UUID.randomUUID().toString();    int index = Math.abs(code.hashCode()) % result.size();    String lucklyOne = result.get(index);    System.out.println(&quot;lucklyOne:&quot; + lucklyOne);    lucklys.add(lucklyOne);&#125;/** * hashCode随机取出来的数据 * lucklyOne:G * lucklyOne:B * lucklyOne:C * lucklyOne:D * lucklyOne:H * lucklyOne:F * lucklyOne:E * lucklyOne:A */\n","categories":["java"],"tags":["java"]},{"title":"初识 Spring AOP 与 BeanPostProcess","url":"/20220326-Get-to-know-spring-AOP-and-BeanPostProcess/","content":"零、背景最近在做重构的项目进入阶段性收尾阶段总结记录下相关的内容方便大家遇到类似问题可以想起有某个地方可以参考\n一、初识 AOP目前的 AOP 应用，由于公司生态体系不够完善利用 AOP + ThreadLocal(transmittable-thread-local，ttl)做一部分链路追踪的事情( 耗时打印，traceId 处理 )这部分倒是很简单，只是之前用的很少\nPS：链路追踪蛮重要，针对排查问题，性能监控等大有帮助，多关注开源协议&#x2F;实现( 如 CNCF )\n二、初识 BeanPostProcess2.1 应用场景目前做的项目当中，有一个 IDC 负载均衡的工具有设置当前机器所属机房的方法，但是没有提供从配置文件读取的能力因为 IDC 路由不生效，会造成跨机房访问，导致访问延迟偏高( 回头再写性能优化相关内容 )\n\n当时发现这个问题的时候已经上线，以稳定性为主，不想升级 jar 版本于是乎当时想通过 AOP 或者字节码的方式去做一个增强\n当然，由于知识浅薄，AOP 写对了，但是不生效，工具初始化的先于 AOP 的作用时间。\n接下来就通过搜索引起各种找，偶然发现 BeanPostProcess (之前也通过一些 spring 回调做应用预热)\n于是就开始一番操作，果然给解决问题了。\n2.2 代码概览public class Idc implements BeanPostProcessor &#123;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;        if (bean instanceof ClientFactory) &#123;            ClientFactory clientFactory = (ClientFactory) bean;            String idc = System.getenv(&quot;IDC&quot;);            if (StringUtils.isNotBlank(idc)) &#123;                clientFactory.setIdc(idc);            &#125;            clientFactory.setIdc(&quot;nj&quot;);        &#125;        return bean;    &#125;&#125;\n\n2.2 BeanPostProcess 文档BeanPostProcess API\n三、总结之前一直在做业务开发也很少做从零到一的项目即使看过一些 spring 的书籍和文档但是还是没有理解太深，没有太注意果然是书到用时方恨少哇，以后还是万事深挖一步\nspring 生命周期，启动流程，各种回调，有必要看看，跑 demo 试试。\n四、参考文档\nAOP\nBeanPostProcessor\nttl - 跨线程数据传输\n\n","categories":["java"],"tags":["java","spring"]},{"title":"Get参数串KV与Map互转 - 利用java8 Stream","url":"/20180713-Get%E5%8F%82%E6%95%B0%E4%B8%B2KV%E4%B8%8EMap%E4%BA%92%E8%BD%AC%20-%20%E5%88%A9%E7%94%A8java8%20Stream/","content":"一、背景在各种系统需要加签的时一般都会把参与签名的数据以get请求参数拼接起来并且要求有序，这个方法会比较方便\n二、实现2.1  拼接为有序的get请求类字符串public String getSortedStr(Map&lt;String, String&gt; unSortedStr) &#123;    String sortedStr= unSortedStr            .entrySet()            .stream()            .filter(entry -&gt; !StringUtil.isEmpty(entry.getValue()))            .sorted(Map.Entry.comparingByKey())            .map(entry -&gt; entry.getKey() + &quot;=&quot; + entry.getValue())            .collect(Collectors.joining(&quot;&amp;&quot;));    return sortedStr;&#125;\n2.2 把get类参数字符串转为mapprivate Map&lt;String,String&gt; getMapData(String getStr)&#123;    String[] strs = getStr.split(&quot;&amp;&quot;);    HashMap&lt;String, String&gt; dataMap = new HashMap&lt;&gt;(16);    for (int i = 0; i &lt; strs.length; i++) &#123;        String[] str = strs[i].split(&quot;=&quot;);        dataMap.put(str[0], str[1]);    &#125;    return dataMap;&#125;\n\n对于get类字符串没有发现比较好的方法转换为map\n","categories":["java"],"tags":["java"]},{"title":"Git Bash tree（windows）让windows支持tree","url":"/20170713-Git%20Bash%20tree%EF%BC%88windows%EF%BC%89/","content":"在安装了git客户端之后，发现Git Bash挺好用\n之前在linux shell用过tree命令感觉不错\n发现Git Bash也可以实现，于是就记录一下\n下载地址：点击前往\n下载文件： Binaries\t \tZip\n解压文件：bin目录下找到tree.exe\n把这个放到git安装目录下后的路径：C:\\Program Files\\Git\\usr\\bin\\tree.exe\n测试：虽然有点丑。。。\n\nhisen@HiSEN MINGW64 /c/code/SpringBootCLI/myapp$ tree.|-- mvnw|-- mvnw.cmd|-- pom.xml`-- src    |-- main    |   |-- java    |   |   `-- com    |   |       `-- example    |   |           `-- myapp    |   |               |-- DemoApplication.java    |   |               `-- ServletInitializer.java    |   `-- resources    |       |-- application.properties    |       |-- static    |       `-- templates    `-- test        `-- java            `-- com                `-- example                    `-- myapp                        `-- DemoApplicationTests.java14 directories, 7 files","categories":["linux"],"tags":["linux"]},{"title":"全球国家和地区列表，中英文国名、国际代码、电话区号(SQL & 文本)","url":"/20191120-Global-country-and-region-information-list/","content":"零、说明包含全球200+国家和地区的信息本列表属于之前有外国人整理过利用有道翻译API翻译了国家名涉及到全球的业务应该会用的上\n一、SQLsql如下：\n\nSET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for `sms_country`-- ----------------------------DROP TABLE IF EXISTS `sms_country`;CREATE TABLE `sms_country` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `iso` char(2) NOT NULL,  `iso3` char(3) DEFAULT NULL,  `name` varchar(80) NOT NULL,  `name_zh` varchar(80) DEFAULT NULL,  `nicename` varchar(80) NOT NULL,  `numcode` smallint(6) DEFAULT NULL,  `phonecode` int(5) NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=240 DEFAULT CHARSET=utf8;-- ------------------------------ Records of sms_country-- ----------------------------INSERT INTO `sms_country` VALUES (&#x27;1&#x27;, &#x27;AF&#x27;, &#x27;AFG&#x27;, &#x27;AFGHANISTAN&#x27;, &#x27;阿富汗&#x27;, &#x27;Afghanistan&#x27;, &#x27;4&#x27;, &#x27;93&#x27;);INSERT INTO `sms_country` VALUES (&#x27;2&#x27;, &#x27;AL&#x27;, &#x27;ALB&#x27;, &#x27;ALBANIA&#x27;, &#x27;阿尔巴尼亚&#x27;, &#x27;Albania&#x27;, &#x27;8&#x27;, &#x27;355&#x27;);INSERT INTO `sms_country` VALUES (&#x27;3&#x27;, &#x27;DZ&#x27;, &#x27;DZA&#x27;, &#x27;ALGERIA&#x27;, &#x27;阿尔及利亚&#x27;, &#x27;Algeria&#x27;, &#x27;12&#x27;, &#x27;213&#x27;);INSERT INTO `sms_country` VALUES (&#x27;4&#x27;, &#x27;AS&#x27;, &#x27;ASM&#x27;, &#x27;AMERICAN SAMOA&#x27;, &#x27;美属萨摩亚&#x27;, &#x27;American Samoa&#x27;, &#x27;16&#x27;, &#x27;1684&#x27;);INSERT INTO `sms_country` VALUES (&#x27;5&#x27;, &#x27;AD&#x27;, &#x27;AND&#x27;, &#x27;ANDORRA&#x27;, &#x27;安道尔&#x27;, &#x27;Andorra&#x27;, &#x27;20&#x27;, &#x27;376&#x27;);INSERT INTO `sms_country` VALUES (&#x27;6&#x27;, &#x27;AO&#x27;, &#x27;AGO&#x27;, &#x27;ANGOLA&#x27;, &#x27;安哥拉&#x27;, &#x27;Angola&#x27;, &#x27;24&#x27;, &#x27;244&#x27;);INSERT INTO `sms_country` VALUES (&#x27;7&#x27;, &#x27;AI&#x27;, &#x27;AIA&#x27;, &#x27;ANGUILLA&#x27;, &#x27;安圭拉岛&#x27;, &#x27;Anguilla&#x27;, &#x27;660&#x27;, &#x27;1264&#x27;);INSERT INTO `sms_country` VALUES (&#x27;8&#x27;, &#x27;AQ&#x27;, null, &#x27;ANTARCTICA&#x27;, &#x27;南极洲&#x27;, &#x27;Antarctica&#x27;, null, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;9&#x27;, &#x27;AG&#x27;, &#x27;ATG&#x27;, &#x27;ANTIGUA AND BARBUDA&#x27;, &#x27;安提瓜岛和巴布达&#x27;, &#x27;Antigua and Barbuda&#x27;, &#x27;28&#x27;, &#x27;1268&#x27;);INSERT INTO `sms_country` VALUES (&#x27;10&#x27;, &#x27;AR&#x27;, &#x27;ARG&#x27;, &#x27;ARGENTINA&#x27;, &#x27;阿根廷&#x27;, &#x27;Argentina&#x27;, &#x27;32&#x27;, &#x27;54&#x27;);INSERT INTO `sms_country` VALUES (&#x27;11&#x27;, &#x27;AM&#x27;, &#x27;ARM&#x27;, &#x27;ARMENIA&#x27;, &#x27;亚美尼亚&#x27;, &#x27;Armenia&#x27;, &#x27;51&#x27;, &#x27;374&#x27;);INSERT INTO `sms_country` VALUES (&#x27;12&#x27;, &#x27;AW&#x27;, &#x27;ABW&#x27;, &#x27;ARUBA&#x27;, &#x27;阿鲁巴岛&#x27;, &#x27;Aruba&#x27;, &#x27;533&#x27;, &#x27;297&#x27;);INSERT INTO `sms_country` VALUES (&#x27;13&#x27;, &#x27;AU&#x27;, &#x27;AUS&#x27;, &#x27;AUSTRALIA&#x27;, &#x27;澳大利亚&#x27;, &#x27;Australia&#x27;, &#x27;36&#x27;, &#x27;61&#x27;);INSERT INTO `sms_country` VALUES (&#x27;14&#x27;, &#x27;AT&#x27;, &#x27;AUT&#x27;, &#x27;AUSTRIA&#x27;, &#x27;奥地利&#x27;, &#x27;Austria&#x27;, &#x27;40&#x27;, &#x27;43&#x27;);INSERT INTO `sms_country` VALUES (&#x27;15&#x27;, &#x27;AZ&#x27;, &#x27;AZE&#x27;, &#x27;AZERBAIJAN&#x27;, &#x27;阿塞拜疆&#x27;, &#x27;Azerbaijan&#x27;, &#x27;31&#x27;, &#x27;994&#x27;);INSERT INTO `sms_country` VALUES (&#x27;16&#x27;, &#x27;BS&#x27;, &#x27;BHS&#x27;, &#x27;BAHAMAS&#x27;, &#x27;巴哈马群岛&#x27;, &#x27;Bahamas&#x27;, &#x27;44&#x27;, &#x27;1242&#x27;);INSERT INTO `sms_country` VALUES (&#x27;17&#x27;, &#x27;BH&#x27;, &#x27;BHR&#x27;, &#x27;BAHRAIN&#x27;, &#x27;巴林&#x27;, &#x27;Bahrain&#x27;, &#x27;48&#x27;, &#x27;973&#x27;);INSERT INTO `sms_country` VALUES (&#x27;18&#x27;, &#x27;BD&#x27;, &#x27;BGD&#x27;, &#x27;BANGLADESH&#x27;, &#x27;孟加拉国&#x27;, &#x27;Bangladesh&#x27;, &#x27;50&#x27;, &#x27;880&#x27;);INSERT INTO `sms_country` VALUES (&#x27;19&#x27;, &#x27;BB&#x27;, &#x27;BRB&#x27;, &#x27;BARBADOS&#x27;, &#x27;巴巴多斯&#x27;, &#x27;Barbados&#x27;, &#x27;52&#x27;, &#x27;1246&#x27;);INSERT INTO `sms_country` VALUES (&#x27;20&#x27;, &#x27;BY&#x27;, &#x27;BLR&#x27;, &#x27;BELARUS&#x27;, &#x27;白俄罗斯&#x27;, &#x27;Belarus&#x27;, &#x27;112&#x27;, &#x27;375&#x27;);INSERT INTO `sms_country` VALUES (&#x27;21&#x27;, &#x27;BE&#x27;, &#x27;BEL&#x27;, &#x27;BELGIUM&#x27;, &#x27;比利时&#x27;, &#x27;Belgium&#x27;, &#x27;56&#x27;, &#x27;32&#x27;);INSERT INTO `sms_country` VALUES (&#x27;22&#x27;, &#x27;BZ&#x27;, &#x27;BLZ&#x27;, &#x27;BELIZE&#x27;, &#x27;伯利兹&#x27;, &#x27;Belize&#x27;, &#x27;84&#x27;, &#x27;501&#x27;);INSERT INTO `sms_country` VALUES (&#x27;23&#x27;, &#x27;BJ&#x27;, &#x27;BEN&#x27;, &#x27;BENIN&#x27;, &#x27;贝宁&#x27;, &#x27;Benin&#x27;, &#x27;204&#x27;, &#x27;229&#x27;);INSERT INTO `sms_country` VALUES (&#x27;24&#x27;, &#x27;BM&#x27;, &#x27;BMU&#x27;, &#x27;BERMUDA&#x27;, &#x27;百慕大&#x27;, &#x27;Bermuda&#x27;, &#x27;60&#x27;, &#x27;1441&#x27;);INSERT INTO `sms_country` VALUES (&#x27;25&#x27;, &#x27;BT&#x27;, &#x27;BTN&#x27;, &#x27;BHUTAN&#x27;, &#x27;不丹&#x27;, &#x27;Bhutan&#x27;, &#x27;64&#x27;, &#x27;975&#x27;);INSERT INTO `sms_country` VALUES (&#x27;26&#x27;, &#x27;BO&#x27;, &#x27;BOL&#x27;, &#x27;BOLIVIA&#x27;, &#x27;玻利维亚&#x27;, &#x27;Bolivia&#x27;, &#x27;68&#x27;, &#x27;591&#x27;);INSERT INTO `sms_country` VALUES (&#x27;27&#x27;, &#x27;BA&#x27;, &#x27;BIH&#x27;, &#x27;BOSNIA AND HERZEGOVINA&#x27;, &#x27;波斯尼亚和黑塞哥维那&#x27;, &#x27;Bosnia and Herzegovina&#x27;, &#x27;70&#x27;, &#x27;387&#x27;);INSERT INTO `sms_country` VALUES (&#x27;28&#x27;, &#x27;BW&#x27;, &#x27;BWA&#x27;, &#x27;BOTSWANA&#x27;, &#x27;博茨瓦纳&#x27;, &#x27;Botswana&#x27;, &#x27;72&#x27;, &#x27;267&#x27;);INSERT INTO `sms_country` VALUES (&#x27;29&#x27;, &#x27;BV&#x27;, null, &#x27;BOUVET ISLAND&#x27;, &#x27;布维岛&#x27;, &#x27;Bouvet Island&#x27;, null, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;30&#x27;, &#x27;BR&#x27;, &#x27;BRA&#x27;, &#x27;BRAZIL&#x27;, &#x27;巴西&#x27;, &#x27;Brazil&#x27;, &#x27;76&#x27;, &#x27;55&#x27;);INSERT INTO `sms_country` VALUES (&#x27;31&#x27;, &#x27;IO&#x27;, null, &#x27;BRITISH INDIAN OCEAN TERRITORY&#x27;, &#x27;英属印度洋领地&#x27;, &#x27;British Indian Ocean Territory&#x27;, null, &#x27;246&#x27;);INSERT INTO `sms_country` VALUES (&#x27;32&#x27;, &#x27;BN&#x27;, &#x27;BRN&#x27;, &#x27;BRUNEI DARUSSALAM&#x27;, &#x27;文莱达鲁萨兰国&#x27;, &#x27;Brunei Darussalam&#x27;, &#x27;96&#x27;, &#x27;673&#x27;);INSERT INTO `sms_country` VALUES (&#x27;33&#x27;, &#x27;BG&#x27;, &#x27;BGR&#x27;, &#x27;BULGARIA&#x27;, &#x27;保加利亚&#x27;, &#x27;Bulgaria&#x27;, &#x27;100&#x27;, &#x27;359&#x27;);INSERT INTO `sms_country` VALUES (&#x27;34&#x27;, &#x27;BF&#x27;, &#x27;BFA&#x27;, &#x27;BURKINA FASO&#x27;, &#x27;布吉纳法索&#x27;, &#x27;Burkina Faso&#x27;, &#x27;854&#x27;, &#x27;226&#x27;);INSERT INTO `sms_country` VALUES (&#x27;35&#x27;, &#x27;BI&#x27;, &#x27;BDI&#x27;, &#x27;BURUNDI&#x27;, &#x27;布隆迪&#x27;, &#x27;Burundi&#x27;, &#x27;108&#x27;, &#x27;257&#x27;);INSERT INTO `sms_country` VALUES (&#x27;36&#x27;, &#x27;KH&#x27;, &#x27;KHM&#x27;, &#x27;CAMBODIA&#x27;, &#x27;柬埔寨&#x27;, &#x27;Cambodia&#x27;, &#x27;116&#x27;, &#x27;855&#x27;);INSERT INTO `sms_country` VALUES (&#x27;37&#x27;, &#x27;CM&#x27;, &#x27;CMR&#x27;, &#x27;CAMEROON&#x27;, &#x27;喀麦隆&#x27;, &#x27;Cameroon&#x27;, &#x27;120&#x27;, &#x27;237&#x27;);INSERT INTO `sms_country` VALUES (&#x27;38&#x27;, &#x27;CA&#x27;, &#x27;CAN&#x27;, &#x27;CANADA&#x27;, &#x27;加拿大&#x27;, &#x27;Canada&#x27;, &#x27;124&#x27;, &#x27;1&#x27;);INSERT INTO `sms_country` VALUES (&#x27;39&#x27;, &#x27;CV&#x27;, &#x27;CPV&#x27;, &#x27;CAPE VERDE&#x27;, &#x27;佛得角&#x27;, &#x27;Cape Verde&#x27;, &#x27;132&#x27;, &#x27;238&#x27;);INSERT INTO `sms_country` VALUES (&#x27;40&#x27;, &#x27;KY&#x27;, &#x27;CYM&#x27;, &#x27;CAYMAN ISLANDS&#x27;, &#x27;开曼群岛&#x27;, &#x27;Cayman Islands&#x27;, &#x27;136&#x27;, &#x27;1345&#x27;);INSERT INTO `sms_country` VALUES (&#x27;41&#x27;, &#x27;CF&#x27;, &#x27;CAF&#x27;, &#x27;CENTRAL AFRICAN REPUBLIC&#x27;, &#x27;中非共和国&#x27;, &#x27;Central African Republic&#x27;, &#x27;140&#x27;, &#x27;236&#x27;);INSERT INTO `sms_country` VALUES (&#x27;42&#x27;, &#x27;TD&#x27;, &#x27;TCD&#x27;, &#x27;CHAD&#x27;, &#x27;乍得&#x27;, &#x27;Chad&#x27;, &#x27;148&#x27;, &#x27;235&#x27;);INSERT INTO `sms_country` VALUES (&#x27;43&#x27;, &#x27;CL&#x27;, &#x27;CHL&#x27;, &#x27;CHILE&#x27;, &#x27;智利&#x27;, &#x27;Chile&#x27;, &#x27;152&#x27;, &#x27;56&#x27;);INSERT INTO `sms_country` VALUES (&#x27;44&#x27;, &#x27;CN&#x27;, &#x27;CHN&#x27;, &#x27;CHINA&#x27;, &#x27;中国&#x27;, &#x27;China&#x27;, &#x27;156&#x27;, &#x27;86&#x27;);INSERT INTO `sms_country` VALUES (&#x27;45&#x27;, &#x27;CX&#x27;, null, &#x27;CHRISTMAS ISLAND&#x27;, &#x27;圣诞岛&#x27;, &#x27;Christmas Island&#x27;, null, &#x27;61&#x27;);INSERT INTO `sms_country` VALUES (&#x27;46&#x27;, &#x27;CC&#x27;, null, &#x27;COCOS (KEELING) ISLANDS&#x27;, &#x27;COCOS(KEELING)岛&#x27;, &#x27;Cocos (Keeling) Islands&#x27;, null, &#x27;672&#x27;);INSERT INTO `sms_country` VALUES (&#x27;47&#x27;, &#x27;CO&#x27;, &#x27;COL&#x27;, &#x27;COLOMBIA&#x27;, &#x27;哥伦比亚&#x27;, &#x27;Colombia&#x27;, &#x27;170&#x27;, &#x27;57&#x27;);INSERT INTO `sms_country` VALUES (&#x27;48&#x27;, &#x27;KM&#x27;, &#x27;COM&#x27;, &#x27;COMOROS&#x27;, &#x27;科摩罗&#x27;, &#x27;Comoros&#x27;, &#x27;174&#x27;, &#x27;269&#x27;);INSERT INTO `sms_country` VALUES (&#x27;49&#x27;, &#x27;CG&#x27;, &#x27;COG&#x27;, &#x27;CONGO&#x27;, &#x27;刚果&#x27;, &#x27;Congo&#x27;, &#x27;178&#x27;, &#x27;242&#x27;);INSERT INTO `sms_country` VALUES (&#x27;50&#x27;, &#x27;CD&#x27;, &#x27;COD&#x27;, &#x27;CONGO, THE DEMOCRATIC REPUBLIC OF THE&#x27;, &#x27;刚果民主共和国的&#x27;, &#x27;Congo, the Democratic Republic of the&#x27;, &#x27;180&#x27;, &#x27;242&#x27;);INSERT INTO `sms_country` VALUES (&#x27;51&#x27;, &#x27;CK&#x27;, &#x27;COK&#x27;, &#x27;COOK ISLANDS&#x27;, &#x27;库克群岛&#x27;, &#x27;Cook Islands&#x27;, &#x27;184&#x27;, &#x27;682&#x27;);INSERT INTO `sms_country` VALUES (&#x27;52&#x27;, &#x27;CR&#x27;, &#x27;CRI&#x27;, &#x27;COSTA RICA&#x27;, &#x27;哥斯达黎加&#x27;, &#x27;Costa Rica&#x27;, &#x27;188&#x27;, &#x27;506&#x27;);INSERT INTO `sms_country` VALUES (&#x27;53&#x27;, &#x27;CI&#x27;, &#x27;CIV&#x27;, &#x27;COTE D\\&#x27;IVOIRE&#x27;, &#x27;科特迪瓦&#x27;, &#x27;Cote D\\&#x27;Ivoire&#x27;, &#x27;384&#x27;, &#x27;225&#x27;);INSERT INTO `sms_country` VALUES (&#x27;54&#x27;, &#x27;HR&#x27;, &#x27;HRV&#x27;, &#x27;CROATIA&#x27;, &#x27;克罗地亚&#x27;, &#x27;Croatia&#x27;, &#x27;191&#x27;, &#x27;385&#x27;);INSERT INTO `sms_country` VALUES (&#x27;55&#x27;, &#x27;CU&#x27;, &#x27;CUB&#x27;, &#x27;CUBA&#x27;, &#x27;古巴&#x27;, &#x27;Cuba&#x27;, &#x27;192&#x27;, &#x27;53&#x27;);INSERT INTO `sms_country` VALUES (&#x27;56&#x27;, &#x27;CY&#x27;, &#x27;CYP&#x27;, &#x27;CYPRUS&#x27;, &#x27;塞浦路斯&#x27;, &#x27;Cyprus&#x27;, &#x27;196&#x27;, &#x27;357&#x27;);INSERT INTO `sms_country` VALUES (&#x27;57&#x27;, &#x27;CZ&#x27;, &#x27;CZE&#x27;, &#x27;CZECH REPUBLIC&#x27;, &#x27;捷克共和国&#x27;, &#x27;Czech Republic&#x27;, &#x27;203&#x27;, &#x27;420&#x27;);INSERT INTO `sms_country` VALUES (&#x27;58&#x27;, &#x27;DK&#x27;, &#x27;DNK&#x27;, &#x27;DENMARK&#x27;, &#x27;丹麦&#x27;, &#x27;Denmark&#x27;, &#x27;208&#x27;, &#x27;45&#x27;);INSERT INTO `sms_country` VALUES (&#x27;59&#x27;, &#x27;DJ&#x27;, &#x27;DJI&#x27;, &#x27;DJIBOUTI&#x27;, &#x27;吉布提&#x27;, &#x27;Djibouti&#x27;, &#x27;262&#x27;, &#x27;253&#x27;);INSERT INTO `sms_country` VALUES (&#x27;60&#x27;, &#x27;DM&#x27;, &#x27;DMA&#x27;, &#x27;DOMINICA&#x27;, &#x27;多米尼加&#x27;, &#x27;Dominica&#x27;, &#x27;212&#x27;, &#x27;1767&#x27;);INSERT INTO `sms_country` VALUES (&#x27;61&#x27;, &#x27;DO&#x27;, &#x27;DOM&#x27;, &#x27;DOMINICAN REPUBLIC&#x27;, &#x27;多米尼加共和国&#x27;, &#x27;Dominican Republic&#x27;, &#x27;214&#x27;, &#x27;1809&#x27;);INSERT INTO `sms_country` VALUES (&#x27;62&#x27;, &#x27;EC&#x27;, &#x27;ECU&#x27;, &#x27;ECUADOR&#x27;, &#x27;厄瓜多尔&#x27;, &#x27;Ecuador&#x27;, &#x27;218&#x27;, &#x27;593&#x27;);INSERT INTO `sms_country` VALUES (&#x27;63&#x27;, &#x27;EG&#x27;, &#x27;EGY&#x27;, &#x27;EGYPT&#x27;, &#x27;埃及&#x27;, &#x27;Egypt&#x27;, &#x27;818&#x27;, &#x27;20&#x27;);INSERT INTO `sms_country` VALUES (&#x27;64&#x27;, &#x27;SV&#x27;, &#x27;SLV&#x27;, &#x27;EL SALVADOR&#x27;, &#x27;萨尔瓦多&#x27;, &#x27;El Salvador&#x27;, &#x27;222&#x27;, &#x27;503&#x27;);INSERT INTO `sms_country` VALUES (&#x27;65&#x27;, &#x27;GQ&#x27;, &#x27;GNQ&#x27;, &#x27;EQUATORIAL GUINEA&#x27;, &#x27;赤道几内亚&#x27;, &#x27;Equatorial Guinea&#x27;, &#x27;226&#x27;, &#x27;240&#x27;);INSERT INTO `sms_country` VALUES (&#x27;66&#x27;, &#x27;ER&#x27;, &#x27;ERI&#x27;, &#x27;ERITREA&#x27;, &#x27;厄立特里亚&#x27;, &#x27;Eritrea&#x27;, &#x27;232&#x27;, &#x27;291&#x27;);INSERT INTO `sms_country` VALUES (&#x27;67&#x27;, &#x27;EE&#x27;, &#x27;EST&#x27;, &#x27;ESTONIA&#x27;, &#x27;爱沙尼亚&#x27;, &#x27;Estonia&#x27;, &#x27;233&#x27;, &#x27;372&#x27;);INSERT INTO `sms_country` VALUES (&#x27;68&#x27;, &#x27;ET&#x27;, &#x27;ETH&#x27;, &#x27;ETHIOPIA&#x27;, &#x27;埃塞俄比亚&#x27;, &#x27;Ethiopia&#x27;, &#x27;231&#x27;, &#x27;251&#x27;);INSERT INTO `sms_country` VALUES (&#x27;69&#x27;, &#x27;FK&#x27;, &#x27;FLK&#x27;, &#x27;FALKLAND ISLANDS (MALVINAS)&#x27;, &#x27;福克兰群岛(马尔维纳斯)&#x27;, &#x27;Falkland Islands (Malvinas)&#x27;, &#x27;238&#x27;, &#x27;500&#x27;);INSERT INTO `sms_country` VALUES (&#x27;70&#x27;, &#x27;FO&#x27;, &#x27;FRO&#x27;, &#x27;FAROE ISLANDS&#x27;, &#x27;法罗群岛&#x27;, &#x27;Faroe Islands&#x27;, &#x27;234&#x27;, &#x27;298&#x27;);INSERT INTO `sms_country` VALUES (&#x27;71&#x27;, &#x27;FJ&#x27;, &#x27;FJI&#x27;, &#x27;FIJI&#x27;, &#x27;斐济&#x27;, &#x27;Fiji&#x27;, &#x27;242&#x27;, &#x27;679&#x27;);INSERT INTO `sms_country` VALUES (&#x27;72&#x27;, &#x27;FI&#x27;, &#x27;FIN&#x27;, &#x27;FINLAND&#x27;, &#x27;芬兰&#x27;, &#x27;Finland&#x27;, &#x27;246&#x27;, &#x27;358&#x27;);INSERT INTO `sms_country` VALUES (&#x27;73&#x27;, &#x27;FR&#x27;, &#x27;FRA&#x27;, &#x27;FRANCE&#x27;, &#x27;法国&#x27;, &#x27;France&#x27;, &#x27;250&#x27;, &#x27;33&#x27;);INSERT INTO `sms_country` VALUES (&#x27;74&#x27;, &#x27;GF&#x27;, &#x27;GUF&#x27;, &#x27;FRENCH GUIANA&#x27;, &#x27;法属圭亚那&#x27;, &#x27;French Guiana&#x27;, &#x27;254&#x27;, &#x27;594&#x27;);INSERT INTO `sms_country` VALUES (&#x27;75&#x27;, &#x27;PF&#x27;, &#x27;PYF&#x27;, &#x27;FRENCH POLYNESIA&#x27;, &#x27;法属波利尼西亚&#x27;, &#x27;French Polynesia&#x27;, &#x27;258&#x27;, &#x27;689&#x27;);INSERT INTO `sms_country` VALUES (&#x27;76&#x27;, &#x27;TF&#x27;, null, &#x27;FRENCH SOUTHERN TERRITORIES&#x27;, &#x27;法国南部地区&#x27;, &#x27;French Southern Territories&#x27;, null, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;77&#x27;, &#x27;GA&#x27;, &#x27;GAB&#x27;, &#x27;GABON&#x27;, &#x27;加蓬&#x27;, &#x27;Gabon&#x27;, &#x27;266&#x27;, &#x27;241&#x27;);INSERT INTO `sms_country` VALUES (&#x27;78&#x27;, &#x27;GM&#x27;, &#x27;GMB&#x27;, &#x27;GAMBIA&#x27;, &#x27;冈比亚&#x27;, &#x27;Gambia&#x27;, &#x27;270&#x27;, &#x27;220&#x27;);INSERT INTO `sms_country` VALUES (&#x27;79&#x27;, &#x27;GE&#x27;, &#x27;GEO&#x27;, &#x27;GEORGIA&#x27;, &#x27;乔治亚州&#x27;, &#x27;Georgia&#x27;, &#x27;268&#x27;, &#x27;995&#x27;);INSERT INTO `sms_country` VALUES (&#x27;80&#x27;, &#x27;DE&#x27;, &#x27;DEU&#x27;, &#x27;GERMANY&#x27;, &#x27;德国&#x27;, &#x27;Germany&#x27;, &#x27;276&#x27;, &#x27;49&#x27;);INSERT INTO `sms_country` VALUES (&#x27;81&#x27;, &#x27;GH&#x27;, &#x27;GHA&#x27;, &#x27;GHANA&#x27;, &#x27;加纳&#x27;, &#x27;Ghana&#x27;, &#x27;288&#x27;, &#x27;233&#x27;);INSERT INTO `sms_country` VALUES (&#x27;82&#x27;, &#x27;GI&#x27;, &#x27;GIB&#x27;, &#x27;GIBRALTAR&#x27;, &#x27;直布罗陀&#x27;, &#x27;Gibraltar&#x27;, &#x27;292&#x27;, &#x27;350&#x27;);INSERT INTO `sms_country` VALUES (&#x27;83&#x27;, &#x27;GR&#x27;, &#x27;GRC&#x27;, &#x27;GREECE&#x27;, &#x27;希腊&#x27;, &#x27;Greece&#x27;, &#x27;300&#x27;, &#x27;30&#x27;);INSERT INTO `sms_country` VALUES (&#x27;84&#x27;, &#x27;GL&#x27;, &#x27;GRL&#x27;, &#x27;GREENLAND&#x27;, &#x27;格陵兰岛&#x27;, &#x27;Greenland&#x27;, &#x27;304&#x27;, &#x27;299&#x27;);INSERT INTO `sms_country` VALUES (&#x27;85&#x27;, &#x27;GD&#x27;, &#x27;GRD&#x27;, &#x27;GRENADA&#x27;, &#x27;格林纳达&#x27;, &#x27;Grenada&#x27;, &#x27;308&#x27;, &#x27;1473&#x27;);INSERT INTO `sms_country` VALUES (&#x27;86&#x27;, &#x27;GP&#x27;, &#x27;GLP&#x27;, &#x27;GUADELOUPE&#x27;, &#x27;瓜德罗普岛&#x27;, &#x27;Guadeloupe&#x27;, &#x27;312&#x27;, &#x27;590&#x27;);INSERT INTO `sms_country` VALUES (&#x27;87&#x27;, &#x27;GU&#x27;, &#x27;GUM&#x27;, &#x27;GUAM&#x27;, &#x27;关岛&#x27;, &#x27;Guam&#x27;, &#x27;316&#x27;, &#x27;1671&#x27;);INSERT INTO `sms_country` VALUES (&#x27;88&#x27;, &#x27;GT&#x27;, &#x27;GTM&#x27;, &#x27;GUATEMALA&#x27;, &#x27;危地马拉&#x27;, &#x27;Guatemala&#x27;, &#x27;320&#x27;, &#x27;502&#x27;);INSERT INTO `sms_country` VALUES (&#x27;89&#x27;, &#x27;GN&#x27;, &#x27;GIN&#x27;, &#x27;GUINEA&#x27;, &#x27;几内亚&#x27;, &#x27;Guinea&#x27;, &#x27;324&#x27;, &#x27;224&#x27;);INSERT INTO `sms_country` VALUES (&#x27;90&#x27;, &#x27;GW&#x27;, &#x27;GNB&#x27;, &#x27;GUINEA-BISSAU&#x27;, &#x27;几内亚比绍&#x27;, &#x27;Guinea-Bissau&#x27;, &#x27;624&#x27;, &#x27;245&#x27;);INSERT INTO `sms_country` VALUES (&#x27;91&#x27;, &#x27;GY&#x27;, &#x27;GUY&#x27;, &#x27;GUYANA&#x27;, &#x27;圭亚那&#x27;, &#x27;Guyana&#x27;, &#x27;328&#x27;, &#x27;592&#x27;);INSERT INTO `sms_country` VALUES (&#x27;92&#x27;, &#x27;HT&#x27;, &#x27;HTI&#x27;, &#x27;HAITI&#x27;, &#x27;海地&#x27;, &#x27;Haiti&#x27;, &#x27;332&#x27;, &#x27;509&#x27;);INSERT INTO `sms_country` VALUES (&#x27;93&#x27;, &#x27;HM&#x27;, null, &#x27;HEARD ISLAND AND MCDONALD ISLANDS&#x27;, &#x27;听到岛和麦当劳的岛屿&#x27;, &#x27;Heard Island and Mcdonald Islands&#x27;, null, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;94&#x27;, &#x27;VA&#x27;, &#x27;VAT&#x27;, &#x27;HOLY SEE (VATICAN CITY STATE)&#x27;, &#x27;教廷(梵蒂冈)&#x27;, &#x27;Holy See (Vatican City State)&#x27;, &#x27;336&#x27;, &#x27;39&#x27;);INSERT INTO `sms_country` VALUES (&#x27;95&#x27;, &#x27;HN&#x27;, &#x27;HND&#x27;, &#x27;HONDURAS&#x27;, &#x27;洪都拉斯&#x27;, &#x27;Honduras&#x27;, &#x27;340&#x27;, &#x27;504&#x27;);INSERT INTO `sms_country` VALUES (&#x27;96&#x27;, &#x27;HK&#x27;, &#x27;HKG&#x27;, &#x27;HONG KONG&#x27;, &#x27;香港&#x27;, &#x27;Hong Kong&#x27;, &#x27;344&#x27;, &#x27;852&#x27;);INSERT INTO `sms_country` VALUES (&#x27;97&#x27;, &#x27;HU&#x27;, &#x27;HUN&#x27;, &#x27;HUNGARY&#x27;, &#x27;匈牙利&#x27;, &#x27;Hungary&#x27;, &#x27;348&#x27;, &#x27;36&#x27;);INSERT INTO `sms_country` VALUES (&#x27;98&#x27;, &#x27;IS&#x27;, &#x27;ISL&#x27;, &#x27;ICELAND&#x27;, &#x27;冰岛&#x27;, &#x27;Iceland&#x27;, &#x27;352&#x27;, &#x27;354&#x27;);INSERT INTO `sms_country` VALUES (&#x27;99&#x27;, &#x27;IN&#x27;, &#x27;IND&#x27;, &#x27;INDIA&#x27;, &#x27;印度&#x27;, &#x27;India&#x27;, &#x27;356&#x27;, &#x27;91&#x27;);INSERT INTO `sms_country` VALUES (&#x27;100&#x27;, &#x27;ID&#x27;, &#x27;IDN&#x27;, &#x27;INDONESIA&#x27;, &#x27;印尼&#x27;, &#x27;Indonesia&#x27;, &#x27;360&#x27;, &#x27;62&#x27;);INSERT INTO `sms_country` VALUES (&#x27;101&#x27;, &#x27;IR&#x27;, &#x27;IRN&#x27;, &#x27;IRAN, ISLAMIC REPUBLIC OF&#x27;, &#x27;伊朗伊斯兰共和国&#x27;, &#x27;Iran, Islamic Republic of&#x27;, &#x27;364&#x27;, &#x27;98&#x27;);INSERT INTO `sms_country` VALUES (&#x27;102&#x27;, &#x27;IQ&#x27;, &#x27;IRQ&#x27;, &#x27;IRAQ&#x27;, &#x27;伊拉克&#x27;, &#x27;Iraq&#x27;, &#x27;368&#x27;, &#x27;964&#x27;);INSERT INTO `sms_country` VALUES (&#x27;103&#x27;, &#x27;IE&#x27;, &#x27;IRL&#x27;, &#x27;IRELAND&#x27;, &#x27;爱尔兰&#x27;, &#x27;Ireland&#x27;, &#x27;372&#x27;, &#x27;353&#x27;);INSERT INTO `sms_country` VALUES (&#x27;104&#x27;, &#x27;IL&#x27;, &#x27;ISR&#x27;, &#x27;ISRAEL&#x27;, &#x27;以色列&#x27;, &#x27;Israel&#x27;, &#x27;376&#x27;, &#x27;972&#x27;);INSERT INTO `sms_country` VALUES (&#x27;105&#x27;, &#x27;IT&#x27;, &#x27;ITA&#x27;, &#x27;ITALY&#x27;, &#x27;意大利&#x27;, &#x27;Italy&#x27;, &#x27;380&#x27;, &#x27;39&#x27;);INSERT INTO `sms_country` VALUES (&#x27;106&#x27;, &#x27;JM&#x27;, &#x27;JAM&#x27;, &#x27;JAMAICA&#x27;, &#x27;牙买加&#x27;, &#x27;Jamaica&#x27;, &#x27;388&#x27;, &#x27;1876&#x27;);INSERT INTO `sms_country` VALUES (&#x27;107&#x27;, &#x27;JP&#x27;, &#x27;JPN&#x27;, &#x27;JAPAN&#x27;, &#x27;日本&#x27;, &#x27;Japan&#x27;, &#x27;392&#x27;, &#x27;81&#x27;);INSERT INTO `sms_country` VALUES (&#x27;108&#x27;, &#x27;JO&#x27;, &#x27;JOR&#x27;, &#x27;JORDAN&#x27;, &#x27;约旦&#x27;, &#x27;Jordan&#x27;, &#x27;400&#x27;, &#x27;962&#x27;);INSERT INTO `sms_country` VALUES (&#x27;109&#x27;, &#x27;KZ&#x27;, &#x27;KAZ&#x27;, &#x27;KAZAKHSTAN&#x27;, &#x27;哈萨克斯坦&#x27;, &#x27;Kazakhstan&#x27;, &#x27;398&#x27;, &#x27;7&#x27;);INSERT INTO `sms_country` VALUES (&#x27;110&#x27;, &#x27;KE&#x27;, &#x27;KEN&#x27;, &#x27;KENYA&#x27;, &#x27;肯尼亚&#x27;, &#x27;Kenya&#x27;, &#x27;404&#x27;, &#x27;254&#x27;);INSERT INTO `sms_country` VALUES (&#x27;111&#x27;, &#x27;KI&#x27;, &#x27;KIR&#x27;, &#x27;KIRIBATI&#x27;, &#x27;基里巴斯&#x27;, &#x27;Kiribati&#x27;, &#x27;296&#x27;, &#x27;686&#x27;);INSERT INTO `sms_country` VALUES (&#x27;112&#x27;, &#x27;KP&#x27;, &#x27;PRK&#x27;, &#x27;KOREA, DEMOCRATIC PEOPLE\\&#x27;S REPUBLIC OF&#x27;, &#x27;朝鲜民主主义人民共和国&#x27;, &#x27;Korea, Democratic People\\&#x27;s Republic of&#x27;, &#x27;408&#x27;, &#x27;850&#x27;);INSERT INTO `sms_country` VALUES (&#x27;113&#x27;, &#x27;KR&#x27;, &#x27;KOR&#x27;, &#x27;KOREA, REPUBLIC OF&#x27;, &#x27;朝鲜共和国&#x27;, &#x27;Korea, Republic of&#x27;, &#x27;410&#x27;, &#x27;82&#x27;);INSERT INTO `sms_country` VALUES (&#x27;114&#x27;, &#x27;KW&#x27;, &#x27;KWT&#x27;, &#x27;KUWAIT&#x27;, &#x27;科威特&#x27;, &#x27;Kuwait&#x27;, &#x27;414&#x27;, &#x27;965&#x27;);INSERT INTO `sms_country` VALUES (&#x27;115&#x27;, &#x27;KG&#x27;, &#x27;KGZ&#x27;, &#x27;KYRGYZSTAN&#x27;, &#x27;吉尔吉斯斯坦&#x27;, &#x27;Kyrgyzstan&#x27;, &#x27;417&#x27;, &#x27;996&#x27;);INSERT INTO `sms_country` VALUES (&#x27;116&#x27;, &#x27;LA&#x27;, &#x27;LAO&#x27;, &#x27;LAO PEOPLE\\&#x27;S DEMOCRATIC REPUBLIC&#x27;, &#x27;老挝人民民主共和国&#x27;, &#x27;Lao People\\&#x27;s Democratic Republic&#x27;, &#x27;418&#x27;, &#x27;856&#x27;);INSERT INTO `sms_country` VALUES (&#x27;117&#x27;, &#x27;LV&#x27;, &#x27;LVA&#x27;, &#x27;LATVIA&#x27;, &#x27;拉脱维亚&#x27;, &#x27;Latvia&#x27;, &#x27;428&#x27;, &#x27;371&#x27;);INSERT INTO `sms_country` VALUES (&#x27;118&#x27;, &#x27;LB&#x27;, &#x27;LBN&#x27;, &#x27;LEBANON&#x27;, &#x27;黎巴嫩&#x27;, &#x27;Lebanon&#x27;, &#x27;422&#x27;, &#x27;961&#x27;);INSERT INTO `sms_country` VALUES (&#x27;119&#x27;, &#x27;LS&#x27;, &#x27;LSO&#x27;, &#x27;LESOTHO&#x27;, &#x27;莱索托&#x27;, &#x27;Lesotho&#x27;, &#x27;426&#x27;, &#x27;266&#x27;);INSERT INTO `sms_country` VALUES (&#x27;120&#x27;, &#x27;LR&#x27;, &#x27;LBR&#x27;, &#x27;LIBERIA&#x27;, &#x27;利比里亚&#x27;, &#x27;Liberia&#x27;, &#x27;430&#x27;, &#x27;231&#x27;);INSERT INTO `sms_country` VALUES (&#x27;121&#x27;, &#x27;LY&#x27;, &#x27;LBY&#x27;, &#x27;LIBYAN ARAB JAMAHIRIYA&#x27;, &#x27;阿拉伯利比亚民众国&#x27;, &#x27;Libyan Arab Jamahiriya&#x27;, &#x27;434&#x27;, &#x27;218&#x27;);INSERT INTO `sms_country` VALUES (&#x27;122&#x27;, &#x27;LI&#x27;, &#x27;LIE&#x27;, &#x27;LIECHTENSTEIN&#x27;, &#x27;列支敦斯登&#x27;, &#x27;Liechtenstein&#x27;, &#x27;438&#x27;, &#x27;423&#x27;);INSERT INTO `sms_country` VALUES (&#x27;123&#x27;, &#x27;LT&#x27;, &#x27;LTU&#x27;, &#x27;LITHUANIA&#x27;, &#x27;立陶宛&#x27;, &#x27;Lithuania&#x27;, &#x27;440&#x27;, &#x27;370&#x27;);INSERT INTO `sms_country` VALUES (&#x27;124&#x27;, &#x27;LU&#x27;, &#x27;LUX&#x27;, &#x27;LUXEMBOURG&#x27;, &#x27;卢森堡&#x27;, &#x27;Luxembourg&#x27;, &#x27;442&#x27;, &#x27;352&#x27;);INSERT INTO `sms_country` VALUES (&#x27;125&#x27;, &#x27;MO&#x27;, &#x27;MAC&#x27;, &#x27;MACAO&#x27;, &#x27;澳门&#x27;, &#x27;Macao&#x27;, &#x27;446&#x27;, &#x27;853&#x27;);INSERT INTO `sms_country` VALUES (&#x27;126&#x27;, &#x27;MK&#x27;, &#x27;MKD&#x27;, &#x27;MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF&#x27;, &#x27;前南斯拉夫马其顿共和国&#x27;, &#x27;Macedonia, the Former Yugoslav Republic of&#x27;, &#x27;807&#x27;, &#x27;389&#x27;);INSERT INTO `sms_country` VALUES (&#x27;127&#x27;, &#x27;MG&#x27;, &#x27;MDG&#x27;, &#x27;MADAGASCAR&#x27;, &#x27;马达加斯加&#x27;, &#x27;Madagascar&#x27;, &#x27;450&#x27;, &#x27;261&#x27;);INSERT INTO `sms_country` VALUES (&#x27;128&#x27;, &#x27;MW&#x27;, &#x27;MWI&#x27;, &#x27;MALAWI&#x27;, &#x27;马拉维&#x27;, &#x27;Malawi&#x27;, &#x27;454&#x27;, &#x27;265&#x27;);INSERT INTO `sms_country` VALUES (&#x27;129&#x27;, &#x27;MY&#x27;, &#x27;MYS&#x27;, &#x27;MALAYSIA&#x27;, &#x27;马来西亚&#x27;, &#x27;Malaysia&#x27;, &#x27;458&#x27;, &#x27;60&#x27;);INSERT INTO `sms_country` VALUES (&#x27;130&#x27;, &#x27;MV&#x27;, &#x27;MDV&#x27;, &#x27;MALDIVES&#x27;, &#x27;马尔代夫&#x27;, &#x27;Maldives&#x27;, &#x27;462&#x27;, &#x27;960&#x27;);INSERT INTO `sms_country` VALUES (&#x27;131&#x27;, &#x27;ML&#x27;, &#x27;MLI&#x27;, &#x27;MALI&#x27;, &#x27;马里&#x27;, &#x27;Mali&#x27;, &#x27;466&#x27;, &#x27;223&#x27;);INSERT INTO `sms_country` VALUES (&#x27;132&#x27;, &#x27;MT&#x27;, &#x27;MLT&#x27;, &#x27;MALTA&#x27;, &#x27;马耳他&#x27;, &#x27;Malta&#x27;, &#x27;470&#x27;, &#x27;356&#x27;);INSERT INTO `sms_country` VALUES (&#x27;133&#x27;, &#x27;MH&#x27;, &#x27;MHL&#x27;, &#x27;MARSHALL ISLANDS&#x27;, &#x27;马绍尔群岛&#x27;, &#x27;Marshall Islands&#x27;, &#x27;584&#x27;, &#x27;692&#x27;);INSERT INTO `sms_country` VALUES (&#x27;134&#x27;, &#x27;MQ&#x27;, &#x27;MTQ&#x27;, &#x27;MARTINIQUE&#x27;, &#x27;马提尼克岛&#x27;, &#x27;Martinique&#x27;, &#x27;474&#x27;, &#x27;596&#x27;);INSERT INTO `sms_country` VALUES (&#x27;135&#x27;, &#x27;MR&#x27;, &#x27;MRT&#x27;, &#x27;MAURITANIA&#x27;, &#x27;毛利塔尼亚&#x27;, &#x27;Mauritania&#x27;, &#x27;478&#x27;, &#x27;222&#x27;);INSERT INTO `sms_country` VALUES (&#x27;136&#x27;, &#x27;MU&#x27;, &#x27;MUS&#x27;, &#x27;MAURITIUS&#x27;, &#x27;毛里求斯&#x27;, &#x27;Mauritius&#x27;, &#x27;480&#x27;, &#x27;230&#x27;);INSERT INTO `sms_country` VALUES (&#x27;137&#x27;, &#x27;YT&#x27;, null, &#x27;MAYOTTE&#x27;, &#x27;马约特岛&#x27;, &#x27;Mayotte&#x27;, null, &#x27;269&#x27;);INSERT INTO `sms_country` VALUES (&#x27;138&#x27;, &#x27;MX&#x27;, &#x27;MEX&#x27;, &#x27;MEXICO&#x27;, &#x27;墨西哥&#x27;, &#x27;Mexico&#x27;, &#x27;484&#x27;, &#x27;52&#x27;);INSERT INTO `sms_country` VALUES (&#x27;139&#x27;, &#x27;FM&#x27;, &#x27;FSM&#x27;, &#x27;MICRONESIA, FEDERATED STATES OF&#x27;, &#x27;密克罗尼西亚联邦&#x27;, &#x27;Micronesia, Federated States of&#x27;, &#x27;583&#x27;, &#x27;691&#x27;);INSERT INTO `sms_country` VALUES (&#x27;140&#x27;, &#x27;MD&#x27;, &#x27;MDA&#x27;, &#x27;MOLDOVA, REPUBLIC OF&#x27;, &#x27;摩尔多瓦共和国&#x27;, &#x27;Moldova, Republic of&#x27;, &#x27;498&#x27;, &#x27;373&#x27;);INSERT INTO `sms_country` VALUES (&#x27;141&#x27;, &#x27;MC&#x27;, &#x27;MCO&#x27;, &#x27;MONACO&#x27;, &#x27;摩纳哥&#x27;, &#x27;Monaco&#x27;, &#x27;492&#x27;, &#x27;377&#x27;);INSERT INTO `sms_country` VALUES (&#x27;142&#x27;, &#x27;MN&#x27;, &#x27;MNG&#x27;, &#x27;MONGOLIA&#x27;, &#x27;蒙古&#x27;, &#x27;Mongolia&#x27;, &#x27;496&#x27;, &#x27;976&#x27;);INSERT INTO `sms_country` VALUES (&#x27;143&#x27;, &#x27;MS&#x27;, &#x27;MSR&#x27;, &#x27;MONTSERRAT&#x27;, &#x27;蒙特塞拉特&#x27;, &#x27;Montserrat&#x27;, &#x27;500&#x27;, &#x27;1664&#x27;);INSERT INTO `sms_country` VALUES (&#x27;144&#x27;, &#x27;MA&#x27;, &#x27;MAR&#x27;, &#x27;MOROCCO&#x27;, &#x27;摩洛哥&#x27;, &#x27;Morocco&#x27;, &#x27;504&#x27;, &#x27;212&#x27;);INSERT INTO `sms_country` VALUES (&#x27;145&#x27;, &#x27;MZ&#x27;, &#x27;MOZ&#x27;, &#x27;MOZAMBIQUE&#x27;, &#x27;MOZAMBIQUE&#x27;, &#x27;Mozambique&#x27;, &#x27;508&#x27;, &#x27;258&#x27;);INSERT INTO `sms_country` VALUES (&#x27;146&#x27;, &#x27;MM&#x27;, &#x27;MMR&#x27;, &#x27;MYANMAR&#x27;, &#x27;缅甸&#x27;, &#x27;Myanmar&#x27;, &#x27;104&#x27;, &#x27;95&#x27;);INSERT INTO `sms_country` VALUES (&#x27;147&#x27;, &#x27;NA&#x27;, &#x27;NAM&#x27;, &#x27;NAMIBIA&#x27;, &#x27;纳米比亚&#x27;, &#x27;Namibia&#x27;, &#x27;516&#x27;, &#x27;264&#x27;);INSERT INTO `sms_country` VALUES (&#x27;148&#x27;, &#x27;NR&#x27;, &#x27;NRU&#x27;, &#x27;NAURU&#x27;, &#x27;瑙鲁&#x27;, &#x27;Nauru&#x27;, &#x27;520&#x27;, &#x27;674&#x27;);INSERT INTO `sms_country` VALUES (&#x27;149&#x27;, &#x27;NP&#x27;, &#x27;NPL&#x27;, &#x27;NEPAL&#x27;, &#x27;尼泊尔&#x27;, &#x27;Nepal&#x27;, &#x27;524&#x27;, &#x27;977&#x27;);INSERT INTO `sms_country` VALUES (&#x27;150&#x27;, &#x27;NL&#x27;, &#x27;NLD&#x27;, &#x27;NETHERLANDS&#x27;, &#x27;荷兰&#x27;, &#x27;Netherlands&#x27;, &#x27;528&#x27;, &#x27;31&#x27;);INSERT INTO `sms_country` VALUES (&#x27;151&#x27;, &#x27;AN&#x27;, &#x27;ANT&#x27;, &#x27;NETHERLANDS ANTILLES&#x27;, &#x27;荷属安的列斯群岛&#x27;, &#x27;Netherlands Antilles&#x27;, &#x27;530&#x27;, &#x27;599&#x27;);INSERT INTO `sms_country` VALUES (&#x27;152&#x27;, &#x27;NC&#x27;, &#x27;NCL&#x27;, &#x27;NEW CALEDONIA&#x27;, &#x27;新喀里多尼亚&#x27;, &#x27;New Caledonia&#x27;, &#x27;540&#x27;, &#x27;687&#x27;);INSERT INTO `sms_country` VALUES (&#x27;153&#x27;, &#x27;NZ&#x27;, &#x27;NZL&#x27;, &#x27;NEW ZEALAND&#x27;, &#x27;新西兰&#x27;, &#x27;New Zealand&#x27;, &#x27;554&#x27;, &#x27;64&#x27;);INSERT INTO `sms_country` VALUES (&#x27;154&#x27;, &#x27;NI&#x27;, &#x27;NIC&#x27;, &#x27;NICARAGUA&#x27;, &#x27;尼加拉瓜&#x27;, &#x27;Nicaragua&#x27;, &#x27;558&#x27;, &#x27;505&#x27;);INSERT INTO `sms_country` VALUES (&#x27;155&#x27;, &#x27;NE&#x27;, &#x27;NER&#x27;, &#x27;NIGER&#x27;, &#x27;尼日尔&#x27;, &#x27;Niger&#x27;, &#x27;562&#x27;, &#x27;227&#x27;);INSERT INTO `sms_country` VALUES (&#x27;156&#x27;, &#x27;NG&#x27;, &#x27;NGA&#x27;, &#x27;NIGERIA&#x27;, &#x27;尼日利亚&#x27;, &#x27;Nigeria&#x27;, &#x27;566&#x27;, &#x27;234&#x27;);INSERT INTO `sms_country` VALUES (&#x27;157&#x27;, &#x27;NU&#x27;, &#x27;NIU&#x27;, &#x27;NIUE&#x27;, &#x27;纽埃岛&#x27;, &#x27;Niue&#x27;, &#x27;570&#x27;, &#x27;683&#x27;);INSERT INTO `sms_country` VALUES (&#x27;158&#x27;, &#x27;NF&#x27;, &#x27;NFK&#x27;, &#x27;NORFOLK ISLAND&#x27;, &#x27;诺福克岛&#x27;, &#x27;Norfolk Island&#x27;, &#x27;574&#x27;, &#x27;672&#x27;);INSERT INTO `sms_country` VALUES (&#x27;159&#x27;, &#x27;MP&#x27;, &#x27;MNP&#x27;, &#x27;NORTHERN MARIANA ISLANDS&#x27;, &#x27;北马里亚纳群岛&#x27;, &#x27;Northern Mariana Islands&#x27;, &#x27;580&#x27;, &#x27;1670&#x27;);INSERT INTO `sms_country` VALUES (&#x27;160&#x27;, &#x27;NO&#x27;, &#x27;NOR&#x27;, &#x27;NORWAY&#x27;, &#x27;挪威&#x27;, &#x27;Norway&#x27;, &#x27;578&#x27;, &#x27;47&#x27;);INSERT INTO `sms_country` VALUES (&#x27;161&#x27;, &#x27;OM&#x27;, &#x27;OMN&#x27;, &#x27;OMAN&#x27;, &#x27;阿曼&#x27;, &#x27;Oman&#x27;, &#x27;512&#x27;, &#x27;968&#x27;);INSERT INTO `sms_country` VALUES (&#x27;162&#x27;, &#x27;PK&#x27;, &#x27;PAK&#x27;, &#x27;PAKISTAN&#x27;, &#x27;巴基斯坦&#x27;, &#x27;Pakistan&#x27;, &#x27;586&#x27;, &#x27;92&#x27;);INSERT INTO `sms_country` VALUES (&#x27;163&#x27;, &#x27;PW&#x27;, &#x27;PLW&#x27;, &#x27;PALAU&#x27;, &#x27;帕劳&#x27;, &#x27;Palau&#x27;, &#x27;585&#x27;, &#x27;680&#x27;);INSERT INTO `sms_country` VALUES (&#x27;164&#x27;, &#x27;PS&#x27;, null, &#x27;PALESTINIAN TERRITORY, OCCUPIED&#x27;, &#x27;巴勒斯坦的领土,占领&#x27;, &#x27;Palestinian Territory, Occupied&#x27;, null, &#x27;970&#x27;);INSERT INTO `sms_country` VALUES (&#x27;165&#x27;, &#x27;PA&#x27;, &#x27;PAN&#x27;, &#x27;PANAMA&#x27;, &#x27;巴拿马&#x27;, &#x27;Panama&#x27;, &#x27;591&#x27;, &#x27;507&#x27;);INSERT INTO `sms_country` VALUES (&#x27;166&#x27;, &#x27;PG&#x27;, &#x27;PNG&#x27;, &#x27;PAPUA NEW GUINEA&#x27;, &#x27;巴布新几内亚&#x27;, &#x27;Papua New Guinea&#x27;, &#x27;598&#x27;, &#x27;675&#x27;);INSERT INTO `sms_country` VALUES (&#x27;167&#x27;, &#x27;PY&#x27;, &#x27;PRY&#x27;, &#x27;PARAGUAY&#x27;, &#x27;巴拉圭&#x27;, &#x27;Paraguay&#x27;, &#x27;600&#x27;, &#x27;595&#x27;);INSERT INTO `sms_country` VALUES (&#x27;168&#x27;, &#x27;PE&#x27;, &#x27;PER&#x27;, &#x27;PERU&#x27;, &#x27;秘鲁&#x27;, &#x27;Peru&#x27;, &#x27;604&#x27;, &#x27;51&#x27;);INSERT INTO `sms_country` VALUES (&#x27;169&#x27;, &#x27;PH&#x27;, &#x27;PHL&#x27;, &#x27;PHILIPPINES&#x27;, &#x27;菲律宾&#x27;, &#x27;Philippines&#x27;, &#x27;608&#x27;, &#x27;63&#x27;);INSERT INTO `sms_country` VALUES (&#x27;170&#x27;, &#x27;PN&#x27;, &#x27;PCN&#x27;, &#x27;PITCAIRN&#x27;, &#x27;皮特克恩&#x27;, &#x27;Pitcairn&#x27;, &#x27;612&#x27;, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;171&#x27;, &#x27;PL&#x27;, &#x27;POL&#x27;, &#x27;POLAND&#x27;, &#x27;波兰&#x27;, &#x27;Poland&#x27;, &#x27;616&#x27;, &#x27;48&#x27;);INSERT INTO `sms_country` VALUES (&#x27;172&#x27;, &#x27;PT&#x27;, &#x27;PRT&#x27;, &#x27;PORTUGAL&#x27;, &#x27;葡萄牙&#x27;, &#x27;Portugal&#x27;, &#x27;620&#x27;, &#x27;351&#x27;);INSERT INTO `sms_country` VALUES (&#x27;173&#x27;, &#x27;PR&#x27;, &#x27;PRI&#x27;, &#x27;PUERTO RICO&#x27;, &#x27;波多黎各&#x27;, &#x27;Puerto Rico&#x27;, &#x27;630&#x27;, &#x27;1787&#x27;);INSERT INTO `sms_country` VALUES (&#x27;174&#x27;, &#x27;QA&#x27;, &#x27;QAT&#x27;, &#x27;QATAR&#x27;, &#x27;卡塔尔&#x27;, &#x27;Qatar&#x27;, &#x27;634&#x27;, &#x27;974&#x27;);INSERT INTO `sms_country` VALUES (&#x27;175&#x27;, &#x27;RE&#x27;, &#x27;REU&#x27;, &#x27;REUNION&#x27;, &#x27;团聚&#x27;, &#x27;Reunion&#x27;, &#x27;638&#x27;, &#x27;262&#x27;);INSERT INTO `sms_country` VALUES (&#x27;176&#x27;, &#x27;RO&#x27;, &#x27;ROM&#x27;, &#x27;ROMANIA&#x27;, &#x27;罗马尼亚&#x27;, &#x27;Romania&#x27;, &#x27;642&#x27;, &#x27;40&#x27;);INSERT INTO `sms_country` VALUES (&#x27;177&#x27;, &#x27;RU&#x27;, &#x27;RUS&#x27;, &#x27;RUSSIAN FEDERATION&#x27;, &#x27;俄罗斯联邦&#x27;, &#x27;Russian Federation&#x27;, &#x27;643&#x27;, &#x27;70&#x27;);INSERT INTO `sms_country` VALUES (&#x27;178&#x27;, &#x27;RW&#x27;, &#x27;RWA&#x27;, &#x27;RWANDA&#x27;, &#x27;卢旺达&#x27;, &#x27;Rwanda&#x27;, &#x27;646&#x27;, &#x27;250&#x27;);INSERT INTO `sms_country` VALUES (&#x27;179&#x27;, &#x27;SH&#x27;, &#x27;SHN&#x27;, &#x27;SAINT HELENA&#x27;, &#x27;圣赫勒拿&#x27;, &#x27;Saint Helena&#x27;, &#x27;654&#x27;, &#x27;290&#x27;);INSERT INTO `sms_country` VALUES (&#x27;180&#x27;, &#x27;KN&#x27;, &#x27;KNA&#x27;, &#x27;SAINT KITTS AND NEVIS&#x27;, &#x27;圣基茨和尼维斯&#x27;, &#x27;Saint Kitts and Nevis&#x27;, &#x27;659&#x27;, &#x27;1869&#x27;);INSERT INTO `sms_country` VALUES (&#x27;181&#x27;, &#x27;LC&#x27;, &#x27;LCA&#x27;, &#x27;SAINT LUCIA&#x27;, &#x27;圣卢西亚岛&#x27;, &#x27;Saint Lucia&#x27;, &#x27;662&#x27;, &#x27;1758&#x27;);INSERT INTO `sms_country` VALUES (&#x27;182&#x27;, &#x27;PM&#x27;, &#x27;SPM&#x27;, &#x27;SAINT PIERRE AND MIQUELON&#x27;, &#x27;圣皮埃尔和MIQUELON&#x27;, &#x27;Saint Pierre and Miquelon&#x27;, &#x27;666&#x27;, &#x27;508&#x27;);INSERT INTO `sms_country` VALUES (&#x27;183&#x27;, &#x27;VC&#x27;, &#x27;VCT&#x27;, &#x27;SAINT VINCENT AND THE GRENADINES&#x27;, &#x27;圣文森特和格林纳丁斯&#x27;, &#x27;Saint Vincent and the Grenadines&#x27;, &#x27;670&#x27;, &#x27;1784&#x27;);INSERT INTO `sms_country` VALUES (&#x27;184&#x27;, &#x27;WS&#x27;, &#x27;WSM&#x27;, &#x27;SAMOA&#x27;, &#x27;萨摩亚&#x27;, &#x27;Samoa&#x27;, &#x27;882&#x27;, &#x27;684&#x27;);INSERT INTO `sms_country` VALUES (&#x27;185&#x27;, &#x27;SM&#x27;, &#x27;SMR&#x27;, &#x27;SAN MARINO&#x27;, &#x27;圣马力诺&#x27;, &#x27;San Marino&#x27;, &#x27;674&#x27;, &#x27;378&#x27;);INSERT INTO `sms_country` VALUES (&#x27;186&#x27;, &#x27;ST&#x27;, &#x27;STP&#x27;, &#x27;SAO TOME AND PRINCIPE&#x27;, &#x27;圣多美和王子&#x27;, &#x27;Sao Tome and Principe&#x27;, &#x27;678&#x27;, &#x27;239&#x27;);INSERT INTO `sms_country` VALUES (&#x27;187&#x27;, &#x27;SA&#x27;, &#x27;SAU&#x27;, &#x27;SAUDI ARABIA&#x27;, &#x27;沙特阿拉伯&#x27;, &#x27;Saudi Arabia&#x27;, &#x27;682&#x27;, &#x27;966&#x27;);INSERT INTO `sms_country` VALUES (&#x27;188&#x27;, &#x27;SN&#x27;, &#x27;SEN&#x27;, &#x27;SENEGAL&#x27;, &#x27;塞内加尔&#x27;, &#x27;Senegal&#x27;, &#x27;686&#x27;, &#x27;221&#x27;);INSERT INTO `sms_country` VALUES (&#x27;189&#x27;, &#x27;CS&#x27;, null, &#x27;SERBIA AND MONTENEGRO&#x27;, &#x27;塞尔维亚和黑山&#x27;, &#x27;Serbia and Montenegro&#x27;, null, &#x27;381&#x27;);INSERT INTO `sms_country` VALUES (&#x27;190&#x27;, &#x27;SC&#x27;, &#x27;SYC&#x27;, &#x27;SEYCHELLES&#x27;, &#x27;塞舌尔&#x27;, &#x27;Seychelles&#x27;, &#x27;690&#x27;, &#x27;248&#x27;);INSERT INTO `sms_country` VALUES (&#x27;191&#x27;, &#x27;SL&#x27;, &#x27;SLE&#x27;, &#x27;SIERRA LEONE&#x27;, &#x27;塞拉利昂&#x27;, &#x27;Sierra Leone&#x27;, &#x27;694&#x27;, &#x27;232&#x27;);INSERT INTO `sms_country` VALUES (&#x27;192&#x27;, &#x27;SG&#x27;, &#x27;SGP&#x27;, &#x27;SINGAPORE&#x27;, &#x27;新加坡&#x27;, &#x27;Singapore&#x27;, &#x27;702&#x27;, &#x27;65&#x27;);INSERT INTO `sms_country` VALUES (&#x27;193&#x27;, &#x27;SK&#x27;, &#x27;SVK&#x27;, &#x27;SLOVAKIA&#x27;, &#x27;斯洛伐克&#x27;, &#x27;Slovakia&#x27;, &#x27;703&#x27;, &#x27;421&#x27;);INSERT INTO `sms_country` VALUES (&#x27;194&#x27;, &#x27;SI&#x27;, &#x27;SVN&#x27;, &#x27;SLOVENIA&#x27;, &#x27;斯洛文尼亚&#x27;, &#x27;Slovenia&#x27;, &#x27;705&#x27;, &#x27;386&#x27;);INSERT INTO `sms_country` VALUES (&#x27;195&#x27;, &#x27;SB&#x27;, &#x27;SLB&#x27;, &#x27;SOLOMON ISLANDS&#x27;, &#x27;所罗门群岛&#x27;, &#x27;Solomon Islands&#x27;, &#x27;90&#x27;, &#x27;677&#x27;);INSERT INTO `sms_country` VALUES (&#x27;196&#x27;, &#x27;SO&#x27;, &#x27;SOM&#x27;, &#x27;SOMALIA&#x27;, &#x27;索马里&#x27;, &#x27;Somalia&#x27;, &#x27;706&#x27;, &#x27;252&#x27;);INSERT INTO `sms_country` VALUES (&#x27;197&#x27;, &#x27;ZA&#x27;, &#x27;ZAF&#x27;, &#x27;SOUTH AFRICA&#x27;, &#x27;南非&#x27;, &#x27;South Africa&#x27;, &#x27;710&#x27;, &#x27;27&#x27;);INSERT INTO `sms_country` VALUES (&#x27;198&#x27;, &#x27;GS&#x27;, null, &#x27;SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS&#x27;, &#x27;南乔治亚岛和南桑威奇群岛&#x27;, &#x27;South Georgia and the South Sandwich Islands&#x27;, null, &#x27;0&#x27;);INSERT INTO `sms_country` VALUES (&#x27;199&#x27;, &#x27;ES&#x27;, &#x27;ESP&#x27;, &#x27;SPAIN&#x27;, &#x27;西班牙&#x27;, &#x27;Spain&#x27;, &#x27;724&#x27;, &#x27;34&#x27;);INSERT INTO `sms_country` VALUES (&#x27;200&#x27;, &#x27;LK&#x27;, &#x27;LKA&#x27;, &#x27;SRI LANKA&#x27;, &#x27;斯里兰卡&#x27;, &#x27;Sri Lanka&#x27;, &#x27;144&#x27;, &#x27;94&#x27;);INSERT INTO `sms_country` VALUES (&#x27;201&#x27;, &#x27;SD&#x27;, &#x27;SDN&#x27;, &#x27;SUDAN&#x27;, &#x27;苏丹&#x27;, &#x27;Sudan&#x27;, &#x27;736&#x27;, &#x27;249&#x27;);INSERT INTO `sms_country` VALUES (&#x27;202&#x27;, &#x27;SR&#x27;, &#x27;SUR&#x27;, &#x27;SURINAME&#x27;, &#x27;苏里南&#x27;, &#x27;Suriname&#x27;, &#x27;740&#x27;, &#x27;597&#x27;);INSERT INTO `sms_country` VALUES (&#x27;203&#x27;, &#x27;SJ&#x27;, &#x27;SJM&#x27;, &#x27;SVALBARD AND JAN MAYEN&#x27;, &#x27;斯瓦尔巴群岛和扬马延岛&#x27;, &#x27;Svalbard and Jan Mayen&#x27;, &#x27;744&#x27;, &#x27;47&#x27;);INSERT INTO `sms_country` VALUES (&#x27;204&#x27;, &#x27;SZ&#x27;, &#x27;SWZ&#x27;, &#x27;SWAZILAND&#x27;, &#x27;斯威士兰&#x27;, &#x27;Swaziland&#x27;, &#x27;748&#x27;, &#x27;268&#x27;);INSERT INTO `sms_country` VALUES (&#x27;205&#x27;, &#x27;SE&#x27;, &#x27;SWE&#x27;, &#x27;SWEDEN&#x27;, &#x27;瑞典&#x27;, &#x27;Sweden&#x27;, &#x27;752&#x27;, &#x27;46&#x27;);INSERT INTO `sms_country` VALUES (&#x27;206&#x27;, &#x27;CH&#x27;, &#x27;CHE&#x27;, &#x27;SWITZERLAND&#x27;, &#x27;瑞士&#x27;, &#x27;Switzerland&#x27;, &#x27;756&#x27;, &#x27;41&#x27;);INSERT INTO `sms_country` VALUES (&#x27;207&#x27;, &#x27;SY&#x27;, &#x27;SYR&#x27;, &#x27;SYRIAN ARAB REPUBLIC&#x27;, &#x27;阿拉伯叙利亚共和国&#x27;, &#x27;Syrian Arab Republic&#x27;, &#x27;760&#x27;, &#x27;963&#x27;);INSERT INTO `sms_country` VALUES (&#x27;208&#x27;, &#x27;TW&#x27;, &#x27;TWN&#x27;, &#x27;TAIWAN, PROVINCE OF CHINA&#x27;, &#x27;台湾,中国的省份&#x27;, &#x27;Taiwan, Province of China&#x27;, &#x27;158&#x27;, &#x27;886&#x27;);INSERT INTO `sms_country` VALUES (&#x27;209&#x27;, &#x27;TJ&#x27;, &#x27;TJK&#x27;, &#x27;TAJIKISTAN&#x27;, &#x27;塔吉克斯坦&#x27;, &#x27;Tajikistan&#x27;, &#x27;762&#x27;, &#x27;992&#x27;);INSERT INTO `sms_country` VALUES (&#x27;210&#x27;, &#x27;TZ&#x27;, &#x27;TZA&#x27;, &#x27;TANZANIA, UNITED REPUBLIC OF&#x27;, &#x27;坦桑尼亚联合共和国&#x27;, &#x27;Tanzania, United Republic of&#x27;, &#x27;834&#x27;, &#x27;255&#x27;);INSERT INTO `sms_country` VALUES (&#x27;211&#x27;, &#x27;TH&#x27;, &#x27;THA&#x27;, &#x27;THAILAND&#x27;, &#x27;泰国&#x27;, &#x27;Thailand&#x27;, &#x27;764&#x27;, &#x27;66&#x27;);INSERT INTO `sms_country` VALUES (&#x27;212&#x27;, &#x27;TL&#x27;, null, &#x27;TIMOR-LESTE&#x27;, &#x27;东帝汶&#x27;, &#x27;Timor-Leste&#x27;, null, &#x27;670&#x27;);INSERT INTO `sms_country` VALUES (&#x27;213&#x27;, &#x27;TG&#x27;, &#x27;TGO&#x27;, &#x27;TOGO&#x27;, &#x27;多哥&#x27;, &#x27;Togo&#x27;, &#x27;768&#x27;, &#x27;228&#x27;);INSERT INTO `sms_country` VALUES (&#x27;214&#x27;, &#x27;TK&#x27;, &#x27;TKL&#x27;, &#x27;TOKELAU&#x27;, &#x27;托克劳&#x27;, &#x27;Tokelau&#x27;, &#x27;772&#x27;, &#x27;690&#x27;);INSERT INTO `sms_country` VALUES (&#x27;215&#x27;, &#x27;TO&#x27;, &#x27;TON&#x27;, &#x27;TONGA&#x27;, &#x27;汤加&#x27;, &#x27;Tonga&#x27;, &#x27;776&#x27;, &#x27;676&#x27;);INSERT INTO `sms_country` VALUES (&#x27;216&#x27;, &#x27;TT&#x27;, &#x27;TTO&#x27;, &#x27;TRINIDAD AND TOBAGO&#x27;, &#x27;特立尼达和多巴哥&#x27;, &#x27;Trinidad and Tobago&#x27;, &#x27;780&#x27;, &#x27;1868&#x27;);INSERT INTO `sms_country` VALUES (&#x27;217&#x27;, &#x27;TN&#x27;, &#x27;TUN&#x27;, &#x27;TUNISIA&#x27;, &#x27;突尼斯&#x27;, &#x27;Tunisia&#x27;, &#x27;788&#x27;, &#x27;216&#x27;);INSERT INTO `sms_country` VALUES (&#x27;218&#x27;, &#x27;TR&#x27;, &#x27;TUR&#x27;, &#x27;TURKEY&#x27;, &#x27;土耳其&#x27;, &#x27;Turkey&#x27;, &#x27;792&#x27;, &#x27;90&#x27;);INSERT INTO `sms_country` VALUES (&#x27;219&#x27;, &#x27;TM&#x27;, &#x27;TKM&#x27;, &#x27;TURKMENISTAN&#x27;, &#x27;土库曼斯坦&#x27;, &#x27;Turkmenistan&#x27;, &#x27;795&#x27;, &#x27;7370&#x27;);INSERT INTO `sms_country` VALUES (&#x27;220&#x27;, &#x27;TC&#x27;, &#x27;TCA&#x27;, &#x27;TURKS AND CAICOS ISLANDS&#x27;, &#x27;特克斯和凯科斯群岛&#x27;, &#x27;Turks and Caicos Islands&#x27;, &#x27;796&#x27;, &#x27;1649&#x27;);INSERT INTO `sms_country` VALUES (&#x27;221&#x27;, &#x27;TV&#x27;, &#x27;TUV&#x27;, &#x27;TUVALU&#x27;, &#x27;图瓦卢&#x27;, &#x27;Tuvalu&#x27;, &#x27;798&#x27;, &#x27;688&#x27;);INSERT INTO `sms_country` VALUES (&#x27;222&#x27;, &#x27;UG&#x27;, &#x27;UGA&#x27;, &#x27;UGANDA&#x27;, &#x27;乌干达&#x27;, &#x27;Uganda&#x27;, &#x27;800&#x27;, &#x27;256&#x27;);INSERT INTO `sms_country` VALUES (&#x27;223&#x27;, &#x27;UA&#x27;, &#x27;UKR&#x27;, &#x27;UKRAINE&#x27;, &#x27;乌克兰&#x27;, &#x27;Ukraine&#x27;, &#x27;804&#x27;, &#x27;380&#x27;);INSERT INTO `sms_country` VALUES (&#x27;224&#x27;, &#x27;AE&#x27;, &#x27;ARE&#x27;, &#x27;UNITED ARAB EMIRATES&#x27;, &#x27;阿拉伯联合酋长国&#x27;, &#x27;United Arab Emirates&#x27;, &#x27;784&#x27;, &#x27;971&#x27;);INSERT INTO `sms_country` VALUES (&#x27;225&#x27;, &#x27;GB&#x27;, &#x27;GBR&#x27;, &#x27;UNITED KINGDOM&#x27;, &#x27;联合王国&#x27;, &#x27;United Kingdom&#x27;, &#x27;826&#x27;, &#x27;44&#x27;);INSERT INTO `sms_country` VALUES (&#x27;226&#x27;, &#x27;US&#x27;, &#x27;USA&#x27;, &#x27;UNITED STATES&#x27;, &#x27;美国&#x27;, &#x27;United States&#x27;, &#x27;840&#x27;, &#x27;1&#x27;);INSERT INTO `sms_country` VALUES (&#x27;227&#x27;, &#x27;UM&#x27;, null, &#x27;UNITED STATES MINOR OUTLYING ISLANDS&#x27;, &#x27;美国小离岛&#x27;, &#x27;United States Minor Outlying Islands&#x27;, null, &#x27;1&#x27;);INSERT INTO `sms_country` VALUES (&#x27;228&#x27;, &#x27;UY&#x27;, &#x27;URY&#x27;, &#x27;URUGUAY&#x27;, &#x27;乌拉圭&#x27;, &#x27;Uruguay&#x27;, &#x27;858&#x27;, &#x27;598&#x27;);INSERT INTO `sms_country` VALUES (&#x27;229&#x27;, &#x27;UZ&#x27;, &#x27;UZB&#x27;, &#x27;UZBEKISTAN&#x27;, &#x27;乌兹别克斯坦&#x27;, &#x27;Uzbekistan&#x27;, &#x27;860&#x27;, &#x27;998&#x27;);INSERT INTO `sms_country` VALUES (&#x27;230&#x27;, &#x27;VU&#x27;, &#x27;VUT&#x27;, &#x27;VANUATU&#x27;, &#x27;瓦努阿图&#x27;, &#x27;Vanuatu&#x27;, &#x27;548&#x27;, &#x27;678&#x27;);INSERT INTO `sms_country` VALUES (&#x27;231&#x27;, &#x27;VE&#x27;, &#x27;VEN&#x27;, &#x27;VENEZUELA&#x27;, &#x27;委内瑞拉&#x27;, &#x27;Venezuela&#x27;, &#x27;862&#x27;, &#x27;58&#x27;);INSERT INTO `sms_country` VALUES (&#x27;232&#x27;, &#x27;VN&#x27;, &#x27;VNM&#x27;, &#x27;VIET NAM&#x27;, &#x27;越南&#x27;, &#x27;Viet Nam&#x27;, &#x27;704&#x27;, &#x27;84&#x27;);INSERT INTO `sms_country` VALUES (&#x27;233&#x27;, &#x27;VG&#x27;, &#x27;VGB&#x27;, &#x27;VIRGIN ISLANDS, BRITISH&#x27;, &#x27;维尔京群岛,英国&#x27;, &#x27;Virgin Islands, British&#x27;, &#x27;92&#x27;, &#x27;1284&#x27;);INSERT INTO `sms_country` VALUES (&#x27;234&#x27;, &#x27;VI&#x27;, &#x27;VIR&#x27;, &#x27;VIRGIN ISLANDS, U.S.&#x27;, &#x27;维尔京群岛,美国&#x27;, &#x27;Virgin Islands, U.s.&#x27;, &#x27;850&#x27;, &#x27;1340&#x27;);INSERT INTO `sms_country` VALUES (&#x27;235&#x27;, &#x27;WF&#x27;, &#x27;WLF&#x27;, &#x27;WALLIS AND FUTUNA&#x27;, &#x27;瓦利斯群岛和富图纳群岛&#x27;, &#x27;Wallis and Futuna&#x27;, &#x27;876&#x27;, &#x27;681&#x27;);INSERT INTO `sms_country` VALUES (&#x27;236&#x27;, &#x27;EH&#x27;, &#x27;ESH&#x27;, &#x27;WESTERN SAHARA&#x27;, &#x27;西撒哈拉&#x27;, &#x27;Western Sahara&#x27;, &#x27;732&#x27;, &#x27;212&#x27;);INSERT INTO `sms_country` VALUES (&#x27;237&#x27;, &#x27;YE&#x27;, &#x27;YEM&#x27;, &#x27;YEMEN&#x27;, &#x27;也门&#x27;, &#x27;Yemen&#x27;, &#x27;887&#x27;, &#x27;967&#x27;);INSERT INTO `sms_country` VALUES (&#x27;238&#x27;, &#x27;ZM&#x27;, &#x27;ZMB&#x27;, &#x27;ZAMBIA&#x27;, &#x27;赞比亚&#x27;, &#x27;Zambia&#x27;, &#x27;894&#x27;, &#x27;260&#x27;);INSERT INTO `sms_country` VALUES (&#x27;239&#x27;, &#x27;ZW&#x27;, &#x27;ZWE&#x27;, &#x27;ZIMBABWE&#x27;, &#x27;津巴布韦&#x27;, &#x27;Zimbabwe&#x27;, &#x27;716&#x27;, &#x27;263&#x27;);\n\n二、文本1,AF,AFG,AFGHANISTAN,阿富汗,Afghanistan,4,932,AL,ALB,ALBANIA,阿尔巴尼亚,Albania,8,3553,DZ,DZA,ALGERIA,阿尔及利亚,Algeria,12,2134,AS,ASM,AMERICAN SAMOA,美属萨摩亚,American Samoa,16,16845,AD,AND,ANDORRA,安道尔,Andorra,20,3766,AO,AGO,ANGOLA,安哥拉,Angola,24,2447,AI,AIA,ANGUILLA,安圭拉岛,Anguilla,660,12648,AQ,,ANTARCTICA,南极洲,Antarctica,,09,AG,ATG,ANTIGUA AND BARBUDA,安提瓜岛和巴布达,Antigua and Barbuda,28,126810,AR,ARG,ARGENTINA,阿根廷,Argentina,32,5411,AM,ARM,ARMENIA,亚美尼亚,Armenia,51,37412,AW,ABW,ARUBA,阿鲁巴岛,Aruba,533,29713,AU,AUS,AUSTRALIA,澳大利亚,Australia,36,6114,AT,AUT,AUSTRIA,奥地利,Austria,40,4315,AZ,AZE,AZERBAIJAN,阿塞拜疆,Azerbaijan,31,99416,BS,BHS,BAHAMAS,巴哈马群岛,Bahamas,44,124217,BH,BHR,BAHRAIN,巴林,Bahrain,48,97318,BD,BGD,BANGLADESH,孟加拉国,Bangladesh,50,88019,BB,BRB,BARBADOS,巴巴多斯,Barbados,52,124620,BY,BLR,BELARUS,白俄罗斯,Belarus,112,37521,BE,BEL,BELGIUM,比利时,Belgium,56,3222,BZ,BLZ,BELIZE,伯利兹,Belize,84,50123,BJ,BEN,BENIN,贝宁,Benin,204,22924,BM,BMU,BERMUDA,百慕大,Bermuda,60,144125,BT,BTN,BHUTAN,不丹,Bhutan,64,97526,BO,BOL,BOLIVIA,玻利维亚,Bolivia,68,59127,BA,BIH,BOSNIA AND HERZEGOVINA,波斯尼亚和黑塞哥维那,Bosnia and Herzegovina,70,38728,BW,BWA,BOTSWANA,博茨瓦纳,Botswana,72,26729,BV,,BOUVET ISLAND,布维岛,Bouvet Island,,030,BR,BRA,BRAZIL,巴西,Brazil,76,5531,IO,,BRITISH INDIAN OCEAN TERRITORY,英属印度洋领地,British Indian Ocean Territory,,24632,BN,BRN,BRUNEI DARUSSALAM,文莱达鲁萨兰国,Brunei Darussalam,96,67333,BG,BGR,BULGARIA,保加利亚,Bulgaria,100,35934,BF,BFA,BURKINA FASO,布吉纳法索,Burkina Faso,854,22635,BI,BDI,BURUNDI,布隆迪,Burundi,108,25736,KH,KHM,CAMBODIA,柬埔寨,Cambodia,116,85537,CM,CMR,CAMEROON,喀麦隆,Cameroon,120,23738,CA,CAN,CANADA,加拿大,Canada,124,139,CV,CPV,CAPE VERDE,佛得角,Cape Verde,132,23840,KY,CYM,CAYMAN ISLANDS,开曼群岛,Cayman Islands,136,134541,CF,CAF,CENTRAL AFRICAN REPUBLIC,中非共和国,Central African Republic,140,23642,TD,TCD,CHAD,乍得,Chad,148,23543,CL,CHL,CHILE,智利,Chile,152,5644,CN,CHN,CHINA,中国,China,156,8645,CX,,CHRISTMAS ISLAND,圣诞岛,Christmas Island,,6146,CC,,COCOS (KEELING) ISLANDS,COCOS(KEELING)岛,Cocos (Keeling) Islands,,67247,CO,COL,COLOMBIA,哥伦比亚,Colombia,170,5748,KM,COM,COMOROS,科摩罗,Comoros,174,26949,CG,COG,CONGO,刚果,Congo,178,24250,CD,COD,CONGO, THE DEMOCRATIC REPUBLIC OF THE,刚果民主共和国的,Congo, the Democratic Republic of the,180,24251,CK,COK,COOK ISLANDS,库克群岛,Cook Islands,184,68252,CR,CRI,COSTA RICA,哥斯达黎加,Costa Rica,188,50653,CI,CIV,COTE D&#x27;IVOIRE,科特迪瓦,Cote D&#x27;Ivoire,384,22554,HR,HRV,CROATIA,克罗地亚,Croatia,191,38555,CU,CUB,CUBA,古巴,Cuba,192,5356,CY,CYP,CYPRUS,塞浦路斯,Cyprus,196,35757,CZ,CZE,CZECH REPUBLIC,捷克共和国,Czech Republic,203,42058,DK,DNK,DENMARK,丹麦,Denmark,208,4559,DJ,DJI,DJIBOUTI,吉布提,Djibouti,262,25360,DM,DMA,DOMINICA,多米尼加,Dominica,212,176761,DO,DOM,DOMINICAN REPUBLIC,多米尼加共和国,Dominican Republic,214,180962,EC,ECU,ECUADOR,厄瓜多尔,Ecuador,218,59363,EG,EGY,EGYPT,埃及,Egypt,818,2064,SV,SLV,EL SALVADOR,萨尔瓦多,El Salvador,222,50365,GQ,GNQ,EQUATORIAL GUINEA,赤道几内亚,Equatorial Guinea,226,24066,ER,ERI,ERITREA,厄立特里亚,Eritrea,232,29167,EE,EST,ESTONIA,爱沙尼亚,Estonia,233,37268,ET,ETH,ETHIOPIA,埃塞俄比亚,Ethiopia,231,25169,FK,FLK,FALKLAND ISLANDS (MALVINAS),福克兰群岛(马尔维纳斯),Falkland Islands (Malvinas),238,50070,FO,FRO,FAROE ISLANDS,法罗群岛,Faroe Islands,234,29871,FJ,FJI,FIJI,斐济,Fiji,242,67972,FI,FIN,FINLAND,芬兰,Finland,246,35873,FR,FRA,FRANCE,法国,France,250,3374,GF,GUF,FRENCH GUIANA,法属圭亚那,French Guiana,254,59475,PF,PYF,FRENCH POLYNESIA,法属波利尼西亚,French Polynesia,258,68976,TF,,FRENCH SOUTHERN TERRITORIES,法国南部地区,French Southern Territories,,077,GA,GAB,GABON,加蓬,Gabon,266,24178,GM,GMB,GAMBIA,冈比亚,Gambia,270,22079,GE,GEO,GEORGIA,乔治亚州,Georgia,268,99580,DE,DEU,GERMANY,德国,Germany,276,4981,GH,GHA,GHANA,加纳,Ghana,288,23382,GI,GIB,GIBRALTAR,直布罗陀,Gibraltar,292,35083,GR,GRC,GREECE,希腊,Greece,300,3084,GL,GRL,GREENLAND,格陵兰岛,Greenland,304,29985,GD,GRD,GRENADA,格林纳达,Grenada,308,147386,GP,GLP,GUADELOUPE,瓜德罗普岛,Guadeloupe,312,59087,GU,GUM,GUAM,关岛,Guam,316,167188,GT,GTM,GUATEMALA,危地马拉,Guatemala,320,50289,GN,GIN,GUINEA,几内亚,Guinea,324,22490,GW,GNB,GUINEA-BISSAU,几内亚比绍,Guinea-Bissau,624,24591,GY,GUY,GUYANA,圭亚那,Guyana,328,59292,HT,HTI,HAITI,海地,Haiti,332,50993,HM,,HEARD ISLAND AND MCDONALD ISLANDS,听到岛和麦当劳的岛屿,Heard Island and Mcdonald Islands,,094,VA,VAT,HOLY SEE (VATICAN CITY STATE),教廷(梵蒂冈),Holy See (Vatican City State),336,3995,HN,HND,HONDURAS,洪都拉斯,Honduras,340,50496,HK,HKG,HONG KONG,香港,Hong Kong,344,85297,HU,HUN,HUNGARY,匈牙利,Hungary,348,3698,IS,ISL,ICELAND,冰岛,Iceland,352,35499,IN,IND,INDIA,印度,India,356,91100,ID,IDN,INDONESIA,印尼,Indonesia,360,62101,IR,IRN,IRAN, ISLAMIC REPUBLIC OF,伊朗伊斯兰共和国,Iran, Islamic Republic of,364,98102,IQ,IRQ,IRAQ,伊拉克,Iraq,368,964103,IE,IRL,IRELAND,爱尔兰,Ireland,372,353104,IL,ISR,ISRAEL,以色列,Israel,376,972105,IT,ITA,ITALY,意大利,Italy,380,39106,JM,JAM,JAMAICA,牙买加,Jamaica,388,1876107,JP,JPN,JAPAN,日本,Japan,392,81108,JO,JOR,JORDAN,约旦,Jordan,400,962109,KZ,KAZ,KAZAKHSTAN,哈萨克斯坦,Kazakhstan,398,7110,KE,KEN,KENYA,肯尼亚,Kenya,404,254111,KI,KIR,KIRIBATI,基里巴斯,Kiribati,296,686112,KP,PRK,KOREA, DEMOCRATIC PEOPLE&#x27;S REPUBLIC OF,朝鲜民主主义人民共和国,Korea, Democratic People&#x27;s Republic of,408,850113,KR,KOR,KOREA, REPUBLIC OF,朝鲜共和国,Korea, Republic of,410,82114,KW,KWT,KUWAIT,科威特,Kuwait,414,965115,KG,KGZ,KYRGYZSTAN,吉尔吉斯斯坦,Kyrgyzstan,417,996116,LA,LAO,LAO PEOPLE&#x27;S DEMOCRATIC REPUBLIC,老挝人民民主共和国,Lao People&#x27;s Democratic Republic,418,856117,LV,LVA,LATVIA,拉脱维亚,Latvia,428,371118,LB,LBN,LEBANON,黎巴嫩,Lebanon,422,961119,LS,LSO,LESOTHO,莱索托,Lesotho,426,266120,LR,LBR,LIBERIA,利比里亚,Liberia,430,231121,LY,LBY,LIBYAN ARAB JAMAHIRIYA,阿拉伯利比亚民众国,Libyan Arab Jamahiriya,434,218122,LI,LIE,LIECHTENSTEIN,列支敦斯登,Liechtenstein,438,423123,LT,LTU,LITHUANIA,立陶宛,Lithuania,440,370124,LU,LUX,LUXEMBOURG,卢森堡,Luxembourg,442,352125,MO,MAC,MACAO,澳门,Macao,446,853126,MK,MKD,MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF,前南斯拉夫马其顿共和国,Macedonia, the Former Yugoslav Republic of,807,389127,MG,MDG,MADAGASCAR,马达加斯加,Madagascar,450,261128,MW,MWI,MALAWI,马拉维,Malawi,454,265129,MY,MYS,MALAYSIA,马来西亚,Malaysia,458,60130,MV,MDV,MALDIVES,马尔代夫,Maldives,462,960131,ML,MLI,MALI,马里,Mali,466,223132,MT,MLT,MALTA,马耳他,Malta,470,356133,MH,MHL,MARSHALL ISLANDS,马绍尔群岛,Marshall Islands,584,692134,MQ,MTQ,MARTINIQUE,马提尼克岛,Martinique,474,596135,MR,MRT,MAURITANIA,毛利塔尼亚,Mauritania,478,222136,MU,MUS,MAURITIUS,毛里求斯,Mauritius,480,230137,YT,,MAYOTTE,马约特岛,Mayotte,,269138,MX,MEX,MEXICO,墨西哥,Mexico,484,52139,FM,FSM,MICRONESIA, FEDERATED STATES OF,密克罗尼西亚联邦,Micronesia, Federated States of,583,691140,MD,MDA,MOLDOVA, REPUBLIC OF,摩尔多瓦共和国,Moldova, Republic of,498,373141,MC,MCO,MONACO,摩纳哥,Monaco,492,377142,MN,MNG,MONGOLIA,蒙古,Mongolia,496,976143,MS,MSR,MONTSERRAT,蒙特塞拉特,Montserrat,500,1664144,MA,MAR,MOROCCO,摩洛哥,Morocco,504,212145,MZ,MOZ,MOZAMBIQUE,MOZAMBIQUE,Mozambique,508,258146,MM,MMR,MYANMAR,缅甸,Myanmar,104,95147,NA,NAM,NAMIBIA,纳米比亚,Namibia,516,264148,NR,NRU,NAURU,瑙鲁,Nauru,520,674149,NP,NPL,NEPAL,尼泊尔,Nepal,524,977150,NL,NLD,NETHERLANDS,荷兰,Netherlands,528,31151,AN,ANT,NETHERLANDS ANTILLES,荷属安的列斯群岛,Netherlands Antilles,530,599152,NC,NCL,NEW CALEDONIA,新喀里多尼亚,New Caledonia,540,687153,NZ,NZL,NEW ZEALAND,新西兰,New Zealand,554,64154,NI,NIC,NICARAGUA,尼加拉瓜,Nicaragua,558,505155,NE,NER,NIGER,尼日尔,Niger,562,227156,NG,NGA,NIGERIA,尼日利亚,Nigeria,566,234157,NU,NIU,NIUE,纽埃岛,Niue,570,683158,NF,NFK,NORFOLK ISLAND,诺福克岛,Norfolk Island,574,672159,MP,MNP,NORTHERN MARIANA ISLANDS,北马里亚纳群岛,Northern Mariana Islands,580,1670160,NO,NOR,NORWAY,挪威,Norway,578,47161,OM,OMN,OMAN,阿曼,Oman,512,968162,PK,PAK,PAKISTAN,巴基斯坦,Pakistan,586,92163,PW,PLW,PALAU,帕劳,Palau,585,680164,PS,,PALESTINIAN TERRITORY, OCCUPIED,巴勒斯坦的领土,占领,Palestinian Territory, Occupied,,970165,PA,PAN,PANAMA,巴拿马,Panama,591,507166,PG,PNG,PAPUA NEW GUINEA,巴布新几内亚,Papua New Guinea,598,675167,PY,PRY,PARAGUAY,巴拉圭,Paraguay,600,595168,PE,PER,PERU,秘鲁,Peru,604,51169,PH,PHL,PHILIPPINES,菲律宾,Philippines,608,63170,PN,PCN,PITCAIRN,皮特克恩,Pitcairn,612,0171,PL,POL,POLAND,波兰,Poland,616,48172,PT,PRT,PORTUGAL,葡萄牙,Portugal,620,351173,PR,PRI,PUERTO RICO,波多黎各,Puerto Rico,630,1787174,QA,QAT,QATAR,卡塔尔,Qatar,634,974175,RE,REU,REUNION,团聚,Reunion,638,262176,RO,ROM,ROMANIA,罗马尼亚,Romania,642,40177,RU,RUS,RUSSIAN FEDERATION,俄罗斯联邦,Russian Federation,643,70178,RW,RWA,RWANDA,卢旺达,Rwanda,646,250179,SH,SHN,SAINT HELENA,圣赫勒拿,Saint Helena,654,290180,KN,KNA,SAINT KITTS AND NEVIS,圣基茨和尼维斯,Saint Kitts and Nevis,659,1869181,LC,LCA,SAINT LUCIA,圣卢西亚岛,Saint Lucia,662,1758182,PM,SPM,SAINT PIERRE AND MIQUELON,圣皮埃尔和MIQUELON,Saint Pierre and Miquelon,666,508183,VC,VCT,SAINT VINCENT AND THE GRENADINES,圣文森特和格林纳丁斯,Saint Vincent and the Grenadines,670,1784184,WS,WSM,SAMOA,萨摩亚,Samoa,882,684185,SM,SMR,SAN MARINO,圣马力诺,San Marino,674,378186,ST,STP,SAO TOME AND PRINCIPE,圣多美和王子,Sao Tome and Principe,678,239187,SA,SAU,SAUDI ARABIA,沙特阿拉伯,Saudi Arabia,682,966188,SN,SEN,SENEGAL,塞内加尔,Senegal,686,221189,CS,,SERBIA AND MONTENEGRO,塞尔维亚和黑山,Serbia and Montenegro,,381190,SC,SYC,SEYCHELLES,塞舌尔,Seychelles,690,248191,SL,SLE,SIERRA LEONE,塞拉利昂,Sierra Leone,694,232192,SG,SGP,SINGAPORE,新加坡,Singapore,702,65193,SK,SVK,SLOVAKIA,斯洛伐克,Slovakia,703,421194,SI,SVN,SLOVENIA,斯洛文尼亚,Slovenia,705,386195,SB,SLB,SOLOMON ISLANDS,所罗门群岛,Solomon Islands,90,677196,SO,SOM,SOMALIA,索马里,Somalia,706,252197,ZA,ZAF,SOUTH AFRICA,南非,South Africa,710,27198,GS,,SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS,南乔治亚岛和南桑威奇群岛,South Georgia and the South Sandwich Islands,,0199,ES,ESP,SPAIN,西班牙,Spain,724,34200,LK,LKA,SRI LANKA,斯里兰卡,Sri Lanka,144,94201,SD,SDN,SUDAN,苏丹,Sudan,736,249202,SR,SUR,SURINAME,苏里南,Suriname,740,597203,SJ,SJM,SVALBARD AND JAN MAYEN,斯瓦尔巴群岛和扬马延岛,Svalbard and Jan Mayen,744,47204,SZ,SWZ,SWAZILAND,斯威士兰,Swaziland,748,268205,SE,SWE,SWEDEN,瑞典,Sweden,752,46206,CH,CHE,SWITZERLAND,瑞士,Switzerland,756,41207,SY,SYR,SYRIAN ARAB REPUBLIC,阿拉伯叙利亚共和国,Syrian Arab Republic,760,963208,TW,TWN,TAIWAN, PROVINCE OF CHINA,台湾,中国的省份,Taiwan, Province of China,158,886209,TJ,TJK,TAJIKISTAN,塔吉克斯坦,Tajikistan,762,992210,TZ,TZA,TANZANIA, UNITED REPUBLIC OF,坦桑尼亚联合共和国,Tanzania, United Republic of,834,255211,TH,THA,THAILAND,泰国,Thailand,764,66212,TL,,TIMOR-LESTE,东帝汶,Timor-Leste,,670213,TG,TGO,TOGO,多哥,Togo,768,228214,TK,TKL,TOKELAU,托克劳,Tokelau,772,690215,TO,TON,TONGA,汤加,Tonga,776,676216,TT,TTO,TRINIDAD AND TOBAGO,特立尼达和多巴哥,Trinidad and Tobago,780,1868217,TN,TUN,TUNISIA,突尼斯,Tunisia,788,216218,TR,TUR,TURKEY,土耳其,Turkey,792,90219,TM,TKM,TURKMENISTAN,土库曼斯坦,Turkmenistan,795,7370220,TC,TCA,TURKS AND CAICOS ISLANDS,特克斯和凯科斯群岛,Turks and Caicos Islands,796,1649221,TV,TUV,TUVALU,图瓦卢,Tuvalu,798,688222,UG,UGA,UGANDA,乌干达,Uganda,800,256223,UA,UKR,UKRAINE,乌克兰,Ukraine,804,380224,AE,ARE,UNITED ARAB EMIRATES,阿拉伯联合酋长国,United Arab Emirates,784,971225,GB,GBR,UNITED KINGDOM,联合王国,United Kingdom,826,44226,US,USA,UNITED STATES,美国,United States,840,1227,UM,,UNITED STATES MINOR OUTLYING ISLANDS,美国小离岛,United States Minor Outlying Islands,,1228,UY,URY,URUGUAY,乌拉圭,Uruguay,858,598229,UZ,UZB,UZBEKISTAN,乌兹别克斯坦,Uzbekistan,860,998230,VU,VUT,VANUATU,瓦努阿图,Vanuatu,548,678231,VE,VEN,VENEZUELA,委内瑞拉,Venezuela,862,58232,VN,VNM,VIET NAM,越南,Viet Nam,704,84233,VG,VGB,VIRGIN ISLANDS, BRITISH,维尔京群岛,英国,Virgin Islands, British,92,1284234,VI,VIR,VIRGIN ISLANDS, U.S.,维尔京群岛,美国,Virgin Islands, U.s.,850,1340235,WF,WLF,WALLIS AND FUTUNA,瓦利斯群岛和富图纳群岛,Wallis and Futuna,876,681236,EH,ESH,WESTERN SAHARA,西撒哈拉,Western Sahara,732,212237,YE,YEM,YEMEN,也门,Yemen,887,967238,ZM,ZMB,ZAMBIA,赞比亚,Zambia,894,260239,ZW,ZWE,ZIMBABWE,津巴布韦,Zimbabwe,716,263\n\n三、参考信息\nhttps://www.iban.com/currency-codes\nhttps://country-code.cl/\n\n","categories":["基础数据"],"tags":["基础数据"]},{"title":"Google java工具类 - Guava - 常见用法","url":"/20170801-Google%20java%E5%B7%A5%E5%85%B7%E7%B1%BB%20-%20Guava%20-%20%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/","content":"概述\n工具类 就是封装平常用的方法，不需要你重复造轮子，节省开发人员时间，提高工作效率。谷歌作为大公司，当然会从日常的工作中提取中很多高效率的方法出来。所以就诞生了Guava。\n高效设计良好的API，被Google的开发者设计，实现和使用\n遵循高效的java语法实践\n使代码更刻度，简洁，简单\n节约时间，资源，提高生产力 Guava工程\n包含了若干被Google的 Java项目广泛依赖 的核心库，例如：\n\n集合 [collections]\n缓存 [caching]\n原生类型支持 [primitives support]\n并发库 [concurrency libraries]\n通用注解 [common annotations]\n字符串处理 [string processing]\nI&#x2F;O 等等。\n\n部分用法如下：\n\npublic class CommonUsage &#123;  /**   * 2.集合转换为特定格式的字符串   */  @Test  public void collection2Srt() &#123;    //List转    List&lt;String&gt; list = new ArrayList&lt;String&gt;();    list.add(&quot;a&quot;);    list.add(&quot;b&quot;);    list.add(&quot;c&quot;);    list.add(&quot;d&quot;);    list.add(&quot;e&quot;);    list.add(&quot;f&quot;);    String result = Joiner.on(&quot;-&quot;).join(list);    System.out.println(result);//a-b-c-d-e-f    //Map 转    HashMap&lt;String, Integer&gt; map = Maps.newHashMap();    map.put(&quot;a&quot;, 1);    map.put(&quot;b&quot;, 2);    map.put(&quot;c&quot;, 3);    //on 分隔符，withKeyValueSeparator key value之间的分隔符    String s = Joiner.on(&quot;,&quot;).withKeyValueSeparator(&quot;=&quot;).join(map);    System.out.println(s);//a=1,b=2,c=3  &#125;  /**   * 3.将String 转为特定的集合   */  @Test  public void str2Collection() &#123;    String s = &quot;1,2,3,4,5,6,7,8,9&quot;;    List&lt;String&gt; list = Splitter.on(&quot;,&quot;).splitToList(s);    System.out.println(list);    s = &quot;1-2-3-4- 5-  6  &quot;;    //去除空串与空格    List&lt;String&gt; list1 = Splitter.on(&quot;-&quot;).omitEmptyStrings().trimResults().splitToList(s);    System.out.println(list1);    //将String转换为map    String str = &quot;a=1,b=2&quot;;    Map&lt;String, String&gt; map = Splitter.on(&quot;,&quot;).withKeyValueSeparator(&quot;=&quot;).split(str);  &#125;  /**   * 4.多个字符切割，或者特定的正则分隔   */  @Test  public void strSplit() &#123;    String input = &quot;aa.dd,,ff,,.&quot;;    List&lt;String&gt; list = Splitter.onPattern(&quot;[.|,]&quot;).omitEmptyStrings().trimResults()        .splitToList(input);    System.out.println(list);    // 判断匹配结果    boolean result = CharMatcher.inRange(&#x27;a&#x27;, &#x27;z&#x27;).or(CharMatcher.inRange(&#x27;A&#x27;, &#x27;Z&#x27;))        .matches(&#x27;K&#x27;);//true    // 保留数字文本    String s1 = CharMatcher.digit().retainFrom(&quot;abc 123 efg&quot;);//123    // 删除数字文本    String s2 = CharMatcher.digit().removeFrom(&quot;abc 123 efg&quot;);//abc  efg  &#125;  /**   * 9.计算程序开始结束用了多少时间   */  @Test  public void countTime() &#123;    Stopwatch stopwatch = Stopwatch.createStarted();    for (int i = 0; i &lt; 100000; i++) &#123;    &#125;    //TimeUnit可以指定时间精度    long nanos = stopwatch.elapsed(TimeUnit.MILLISECONDS);    System.out.println(nanos);  &#125;  /**   * 10.Files 文件操作   * 方便，   */  @Test  public void filesOperation() &#123;    String fileName = &quot;./src/main/java/com/hisen/jars/guava/test.txt&quot;;    for (int i = 0; i &lt; 1000; i++) &#123;      //写      filesWrite(fileName, String.valueOf(i) + &quot;\\n&quot;);    &#125;    //读    List&lt;String&gt; list = filesRead(fileName);    System.out.println(&quot;读取到的内容：&quot; + list.toString());//    Files.copy(sourceFile, targetFile); //复制文件//    Files.equal(File,File);//比较文件内容是否完全一致//    touch方法创建或者更新文件的时间戳。//    createTempDir()方法创建临时目录//    Files.createParentDirs(File) 创建父级目录//    getChecksum(File)获得文件的checksum//    hash(File)获得文件的hashmap系列方法获得文件的内存映射//    getFileExtension(String)获得文件的扩展名//    getNameWithoutExtension(String file)获得不带扩展名的文件名  &#125;  /**   * Files写文件   *   * @param fileName 文件名（包括路径）   * @param contents 写入的单行内容   */  public void filesWrite(final String fileName, final String contents) &#123;    checkNotNull(fileName, &quot;文件名称不能为空&quot;);    checkNotNull(contents, &quot;写入内容不能为空&quot;);    final File file = new File(fileName);    try &#123;      //Files.write(contents.getBytes(), file);//覆盖      Files.append(contents, file, Charsets.UTF_8);//追加    &#125; catch (IOException e) &#123;      System.out.println(&quot;ERROR trying to write to file &#x27;&quot; + fileName + &quot;&#x27; - &quot;          + e.toString());    &#125;  &#125;  /**   * Files 文件单行读取   *   * @param filePath 文件名(包括路径)   */  public List&lt;String&gt; filesRead(String filePath) &#123;    checkNotNull(filePath, &quot;文件名称不能为空&quot;);    File file = new File(filePath);    List&lt;String&gt; list = null;    try &#123;      list = Files.readLines(file, Charsets.UTF_8);    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125;    return list;  &#125;&#125;\n\n部分摘自：点击查看\n","categories":["java"],"tags":["java","google","jar"]},{"title":"HashMap和Hashtable的区别","url":"/20170217-HashMap%E5%92%8CHashtable%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"在Java 2以前，一般使用Hashtable来映射键值和元素。为了使用Java集合框架，Java对Hashtable进行了重新设计，但是，为了向后兼容保留了所有的方法。Hashtable实现了Map接口，除了Hashtable具有同步功能之外，它与HashMap的用法是一样的。·在使用时一般是用ArrayList代替Vector，LinkedList代替Stack，HashMap代替HashTable，即使在多线程中需要同步，也是用同步包装类。\n另外在使用上还有一些小的差异，比如：\n\nHashTable的key和value都不允许为null值，而HashMap的key和value则都是允许null值的。这个其实没有好坏之分，只是Sun为了统一Collection的操作特性而改进的。\nHashTable有一个contains(Object value)方法，功能上与containsValue(Object value)一样，但是在实现上花销更大，现在已不推荐使用。而HashMap只有containsValue(Object value)方法。\nHashTable使用Enumeration，HashMap使用Iterator。Iterator其实与Enmeration功能上很相似，只是多了删除的功能。用Iterator不过是在名字上变得更为贴切一些。模式的另外一个很重要的功用，就是能够形成一种交流的语言（或者说文化）。有时候，你说Enumeration大家都不明白，说Iterator就都明白了。\n\n在实现上两者已有一些差异，这里简单说明一下：\npublic Hashtable(int initialCapacity, float loadFactor) &#123;        if (initialCapacity &lt; 0)            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+                                               initialCapacity);        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))            throw new IllegalArgumentException(&quot;Illegal Load: &quot;+loadFactor);        if (initialCapacity==0)            initialCapacity = 1;        this.loadFactor = loadFactor;        table = new Entry[initialCapacity];        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);        initHashSeedAsNeeded(initialCapacity);    &#125;public Hashtable(int initialCapacity) &#123;        this(initialCapacity, 0.75f);    &#125;public Hashtable() &#123;        this(11, 0.75f);    &#125;public HashMap(int initialCapacity, float loadFactor) &#123;        if (initialCapacity &lt; 0)            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +                                               initialCapacity);        if (initialCapacity &gt; MAXIMUM_CAPACITY)            initialCapacity = MAXIMUM_CAPACITY;        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +                                               loadFactor);        this.loadFactor = loadFactor;        threshold = initialCapacity;        init();    &#125;public HashMap(int initialCapacity) &#123;        this(initialCapacity, DEFAULT_LOAD_FACTOR);    &#125;public HashMap() &#123;        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);    &#125;\nHashTable中构造hash数组时initialCapacity默认大小是11，增加的方式是 old*2+1。HashMap中构造hash数组时initialCapacity默认大小是16，而且一定是2的指数。对于哈希值的使用也有所不同，HashTable直接使用对象的hashCode，代码是这样的：\nint hash = key.hashCode();int index = (hash &amp; 0x7FFFFFFF) % tab.length;\n而HashMap重新计算hash值，而且用与代替求模：\nint hash = hash(k);int i = indexFor(hash, table.length); static int hash(Object x) &#123;　　int h = x.hashCode(); 　　h += ~(h &lt;&lt; 9);　　h ^= (h &gt;&gt;&gt; 14);　　h += (h &lt;&lt; 4);　　h ^= (h &gt;&gt;&gt; 10);　　return h;&#125;static int indexFor(int h, int length) &#123;　　return h &amp; (length-1);&#125;\n\n仅供参考，内容来源于互联网\n","categories":["java"],"tags":["HashMap","Hashtable"]},{"title":"Guice Demo | solve NoSuchMethodError","url":"/20190424-Guice%20Demo%20%7C%20solve%20NoSuchMethodError/","content":"一、Guice简介Google公司的Bob lee开发的轻量级IoC容器，其特点是：\n\n速度快，号称是spring的100倍速度\n无配置文件，实用JDK5.0的annotation描述组件依赖，简单，而且有编译器检查和重构支持\n简单，代码量很少\n\n二、简单样例\n详细代码：https://github.com/hisenyuan/IDEAPractice/tree/master/src/main/java/com/hisen/jars/guice\n依赖\n\n&lt;dependency&gt;    &lt;groupId&gt;com.google.inject&lt;/groupId&gt;    &lt;artifactId&gt;guice&lt;/artifactId&gt;    &lt;version&gt;4.2.2&lt;/version&gt;&lt;/dependency&gt;\n\n测试类\n\npublic class HelloApp extends BaseServer &#123;    @Inject    private HelloServiceImpl hello;    @Test    public void testSayHello() &#123;        // 方式一        Injector injector = Guice.createInjector();        HelloService helloService = injector.getInstance(HelloService.class);        helloService.sayHello(&quot;hisen&quot;);        // 方式二 其实是在BaseServer中做了方式1的事情 【类似Spring的方式】        hello.sayHello(&quot;1&quot;);    &#125;&#125;\n\n三、解决问题java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\ngithub有人遇到同样的问题：https://github.com/SeleniumHQ/selenium/issues/3880\n把本地的guava版本由19.0改为21.0成功解决问题\n","categories":["java"],"tags":["java"]},{"title":"Hexo next主题添加本地搜索 - 不使用第三方服务","url":"/20170407-Hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%20-%20%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/","content":"之前安装过第三方的搜索服务，贼蛋疼。都不免费了。\n也有自己安装插件，然后写js的，麻烦\n后来找到两个插件，安装之后就搞定了\n感谢开发的作者！！！\n安装插件记得要在站点根目录执行下面的安装操作\n1.安装 hexo-generator-search\nnpm install hexo-generator-searchdb --save\n2.安装 hexo-generator-searchdb\nnpm install hexo-generator-searchdb --save\n\n启用搜索编辑站点文件**_config.yml**，添加以下内容开启搜索\nsearch:  path: search.xml  field: post  format: html  limit: 10000\n编辑主题文件**_config.yml**，启用本地搜索功能：\n# Local search\nlocal_search:\n  enable: true\n\n效果预览\n\n小缺点第一次点击搜索的时候反应会比较慢\n因为是要加载一个xml文件\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hexo Landscape主题JS优化，不使用谷歌CDN","url":"/20170208-Hexo-Landscape%E4%B8%BB%E9%A2%98JS%E4%BC%98%E5%8C%96%EF%BC%8C%E4%B8%8D%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8CCDN/","content":"jQuery库的优化修改这个文件：\nthemes/landscape/layout/_partial/after-footer.ejs\n将17行左右的\n&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;\n改为\n&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;\n重新生成博客之后就把谷歌的cdn替换成百度的cdn了\n","tags":["hexo"]},{"title":"Hexo 绑定个人域名简单方法","url":"/20170209-Hexo-%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/","content":"**1.**直接注册个域名(随便在哪里)**2.**添加域名解析\n\n\n\n记录类型\n主机记录\n记录值\n\n\n\nCNAME\n@\nhisen-yuan.github.io\n\n\n主机记录：@ 代表顶级域名，例如hisen.me 如果想要www.hisen.me把@改成www\n记录值：你的博客原始地址\n3.在\\blog\\source下添加CNAME文件，没有后缀名，内容为你的域名，注意不要带http:&#x2F;&#x2F;\n我的域名解析为 hisen.me 文件内容为 hisen.me\n等待解析生效即可！\n","tags":["hexo"]},{"title":"Hexo提速优化 - 压缩html、css、js by hexo-neat插件","url":"/20170211-Hexo%E6%8F%90%E9%80%9F%E4%BC%98%E5%8C%96-%E5%8E%8B%E7%BC%A9html%E3%80%81css%E3%80%81js-by-hexo-neat%E6%8F%92%E4%BB%B6/","content":"hexo博客生成的HTML代码留有大量的空白\n通过搜索发现有不错的方法可以解决这个问题\n那就是安装一个插件！名字叫：hexo-neat\n安装命令行进入博客根目录，执行以下命令\nnpm install hexo-neat --save\n如果使用的是淘宝的cnmp执行以下命令\ncnpm install hexo-neat --save\n配置打开站点配置文件**_config.yml**，添加以下内容：\n\n\n#hexo-neat 优化提速插件neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - &#x27;*.min.css&#x27;neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - &#x27;*.min.js&#x27;\n\n安装好之后，就直接正常使用(跟以前没有装的时候一样使用)，\n重新生成博客就可以发现html源码已经压缩了\n只是在生成博客的过程中可能要浪费一丁点时间\n访问速度有所提升！\n参考：点击查看\n","categories":["软件"],"tags":["hexo"]},{"title":"Hexo新玩法 - Atom + platformio-ide-terminal","url":"/20180716-Hexo%E6%96%B0%E7%8E%A9%E6%B3%95%20-%20Atom%20+%20platformio-ide-terminal/","content":"最近在慢慢适应mbp\n然后就在研究怎么方便的写博客\n首先就是找了几款markdown编辑器，发现GitHub出品的Atom还不错\n插件很丰富，然而下载了第一个terminal插件但是无效，一度折腾了很久\n后来搜索了一下，发现这个插件很不错：platformio-ide-terminal\n利用快捷键：control + 点(1左边那个)\n就可以在当前界面呼出终端，而且是当前目录\n也就是在_post目录下，写完了之后执行命令就上传了\n还是很方便的。后续还需要慢慢熟悉更多的插件与工具\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hxeo百度站长工具抓取失败的原因","url":"/20170216-Hxeot%E7%99%BE%E5%BA%A6%E7%AB%99%E9%95%BF%E5%B7%A5%E5%85%B7%E6%8A%93%E5%8F%96%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0/","content":"近期在折腾下hexo博客\n发现百度搜索网址都搜索不到自己的站点\n我只把hexo传到github上，然而去百度站长工具提交网址几条后也没有反应\n我就测试了一下百度站长工具 - 抓取诊断\n结果是抓取失败:Github把百度的爬虫给干掉了！所以。。。\n\n具体内容如下：\n提交网址：\thttp://hisen.me/20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/抓取网址：\thttp://hisen.me/20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/抓取UA：\tMozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)抓取时间：\t2017-02-16 09:48:55网站IP：\t151.***.***.133 已反馈，预计几分钟内完成更新下载时长：\t0.331秒抓取异常信息：\t拒绝访问  查看帮助 \n返回HTTP头：\nHTTP/1.1 403 ForbiddenCache-Control: no-cacheContent-Type: text/htmlTransfer-Encoding: chunkedAccept-Ranges: bytesDate: Thu, 16 Feb 2017 01:48:55 GMTVia: 1.1 varnishConnection: closeX-Served-By: cache-itm7421-ITMX-Cache: MISSX-Cache-Hits: 0X-Timer: S1487209735.687949,VS0,VE187Vary: Accept-EncodingX-Fastly-Request-ID: 3e528056d3333113dfb5da5c92a2421fa71f3705","categories":["软件"],"tags":["hexo"]},{"title":"IDEA Denpendencies红色波浪线报错,所有的包无法导入 - 一种解决办法","url":"/20170228-IDEA-Denpendencies%E7%BA%A2%E8%89%B2%E6%B3%A2%E6%B5%AA%E7%BA%BF%E6%8A%A5%E9%94%99-%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5-%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"failed to read artifact descriptor for xxx：jar\n一下午那代码里面是各种报错\n凡是引入的大部分都报错\n原因就是maven管理的jar没有添加上依赖\n最后在stackoverflow找到了良药\n上面有图片，错误会详细一点，如果你的也相同，可以试一试\nmaven project -&gt; Execute Maven Goal -&gt; mvn -U clean install\n执行以上命令之后等待完成，应该就好了\n参考自stackoverflow：点击查看\n","categories":["java"],"tags":["java","idea","Maven"]},{"title":"IDEA maven项目通过mongo-java-driver折腾一下MongoDB","url":"/20170220-IDEA-maven%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87mongo-java-driver%E6%8A%98%E8%85%BE%E4%B8%80%E4%B8%8BMongoDB/","content":"这几天折腾ubuntu然后安装了下mongodb\n通过Oracle VM VirtualBox端口转发，连接了虚拟机的MongoDB\n1.用idea创建一个maven项目\n2.在pom.xml中添加mongodb java驱动\n&lt;dependency&gt;    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;    &lt;artifactId&gt;mongodb-driver&lt;/artifactId&gt;    &lt;version&gt;3.2.2&lt;/version&gt;&lt;/dependency&gt;\n3.参考官方：MongoDB Driver Quick Tour\n本用例github地址：mongodbTest\n贴下代码：\n\npackage com.hisen.jdbc;import com.mongodb.Block;import com.mongodb.MongoClient;import com.mongodb.client.MongoCollection;import com.mongodb.client.MongoCursor;import com.mongodb.client.MongoDatabase;import com.mongodb.client.result.DeleteResult;import com.mongodb.client.result.UpdateResult;import org.bson.Document;import java.util.ArrayList;import java.util.List;import static com.mongodb.client.model.Accumulators.sum;import static com.mongodb.client.model.Aggregates.group;import static com.mongodb.client.model.Filters.*;import static com.mongodb.client.model.Projections.excludeId;import static com.mongodb.client.model.Sorts.descending;import static com.mongodb.client.model.Updates.inc;import static com.mongodb.client.model.Updates.set;import static java.util.Collections.singletonList;/** * Created by hisenyuan on 2017/2/20 at 13:42. */public class QuickTour &#123;    public static void main(String[] args) &#123;        MongoClient mongoClient = new MongoClient(&quot;localhost&quot;, 27017);        MongoDatabase database = mongoClient.getDatabase(&quot;mydb&quot;);        //gets the collection test        MongoCollection&lt;Document&gt; collection = database.getCollection(&quot;test&quot;);        //插入数据        //insert(collection);        //插入大量数据        insertMany(collection);        //统计条数        count(collection);        //打印查询到的第一条数据        print(collection);        //打印所有数据        findAll(collection);        //按条件查询一条数据        findOneWithFilter(collection);        //按条件查询一个Set集合        getSet(collection);        //排序，输出第一条        sortDocuments(collection);        //获取指定的field        projectingFields(collection);        aggregations(collection);        //更新        update(collection);        //删除数据        delete(collection);    &#125;    /**     * 插入单个文档     * @param collection     */    public static void insert(MongoCollection&lt;Document&gt; collection) &#123;        //create document        Document doc = new Document(&quot;name&quot;, &quot;MongoDB&quot;)                .append(&quot;type&quot;, &quot;database&quot;)                .append(&quot;count&quot;, 1)                .append(&quot;info&quot;, new Document(&quot;x&quot;, 203).append(&quot;y&quot;, 102));        //insert the document into the collection        collection.insertOne(doc);    &#125;    /**     * 一次性插入多条数据，用ArrayList拼装     * @param collection     */    public static void insertMany(MongoCollection&lt;Document&gt; collection) &#123;        //Create the documents in a loop        List&lt;Document&gt; documents = new ArrayList&lt;Document&gt;();        for (int i = 0; i &lt; 100; i++) &#123;            documents.add(new Document(&quot;i&quot;, i));        &#125;        collection.insertMany(documents);    &#125;    /**     * 统计集合中的总条数     * @param collection     */    public static void count(MongoCollection&lt;Document&gt; collection) &#123;        //Count Documents in A Collection        System.out.println(&quot;总条数：&quot; + collection.count());    &#125;    /**     * 打印查询到的第一条数据     * @param collection     */    public static void print(MongoCollection&lt;Document&gt; collection) &#123;        //prints the first document found in the collection        Document myDoc = collection.find().first();        System.out.println(myDoc.toJson());    &#125;    /**     * 查询集合中所有的数据     * 不推荐使用foreach循环     * @param collection     */    public static void findAll(MongoCollection&lt;Document&gt; collection) &#123;        System.out.println(&quot;----------------输出所有数据----------------&quot;);        MongoCursor&lt;Document&gt; cursor = collection.find().iterator();        try &#123;            while (cursor.hasNext()) &#123;                System.out.println(cursor.next().toJson());            &#125;        &#125; finally &#123;            cursor.close();        &#125;    &#125;    /**     * 条件查询单条数据     * @param collection     */    public static void findOneWithFilter(MongoCollection&lt;Document&gt; collection) &#123;        //Get A Single Document with a Query Filter        Document myDoc = collection.find(eq(&quot;i&quot;, 71)).first();        System.out.println(myDoc.toJson());    &#125;    /**     * 获得一个Set集合的数据     * @param collection     */    public static void getSet(MongoCollection&lt;Document&gt; collection) &#123;        // now use a range query to get a larger subset        Block&lt;Document&gt; printBlock = new Block&lt;Document&gt;() &#123;            public void apply(final Document document) &#123;                System.out.println(document.toJson());            &#125;        &#125;;        //i的值大于98的数据        System.out.println(&quot;----------------i大于98的数据----------------&quot;);        collection.find(gt(&quot;i&quot;, 98)).forEach(printBlock);        //50 - 51 gt:大于 lte:小于等于        System.out.println(&quot;----------------50&lt;i&lt;=51的数据----------------&quot;);        collection.find(and(gt(&quot;i&quot;, 50), lte(&quot;i&quot;, 51))).forEach(printBlock);    &#125;    /**     * 排序     * @param collection     */    public static void sortDocuments(MongoCollection&lt;Document&gt; collection) &#123;        //根据i的值进行排序        Document myDoc = collection.find(exists(&quot;i&quot;)).sort(descending(&quot;i&quot;)).first();        System.out.println(&quot;----------------排序，输出第一条----------------&quot;);        System.out.println(myDoc.toJson());    &#125;    /**     * 获取想要的field(字段)     * @param collection     */    public static void projectingFields(MongoCollection&lt;Document&gt; collection) &#123;        System.out.println(&quot;----------------获取指定field，输出第一条----------------&quot;);        //排除ID字段        Document myDoc = collection.find().projection(excludeId()).first();        System.out.println(myDoc.toJson());    &#125;    public static void aggregations(MongoCollection&lt;Document&gt; collection) &#123;        /*        collection.aggregate(asList(                match(gt(&quot;i&quot;, 0)),                project(Document.parse(&quot;&#123;ITimes10: &#123;$multiply: [&#x27;$i&#x27;, 10]&#125;&#125;&quot;)))        ).forEach(printBlock);        */        //求和        Document myDoc = collection.aggregate(singletonList(group(null, sum(&quot;total&quot;, &quot;$i&quot;)))).first();        System.out.println(myDoc.toJson());    &#125;    /**     * 更新document的方法     * @param collection     */    public static void update(MongoCollection&lt;Document&gt; collection) &#123;        //更新一个，如果不引入下面这个包，set方法会报错        //import static com.mongodb.client.model.Updates.*;        collection.updateOne(eq(&quot;i&quot;, 10), set(&quot;i&quot;, 110));        //更新多个，小于100的都加100        UpdateResult updateResult = collection.updateMany(lt(&quot;i&quot;, 190), inc(&quot;i&quot;, 100));        System.out.println(&quot;----------------更新条数----------------&quot;);        System.out.println(updateResult.getModifiedCount());    &#125;    /**     * 删除数据的方法     * @param collection     */    public static void delete(MongoCollection&lt;Document&gt; collection) &#123;        collection.deleteOne(eq(&quot;i&quot;, 210));        //gte 大于等于100的都删除        DeleteResult deleteResult = collection.deleteMany(gte(&quot;i&quot;, 100));        System.out.println(&quot;----------------删除条数----------------&quot;);        System.out.println(deleteResult.getDeletedCount());    &#125;    /*    public static void bulk(MongoCollection&lt;Document&gt; collection) &#123;        // 2. Ordered bulk operation - order is guarenteed        collection.bulkWrite(                Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)),                        new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)),                        new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)),                        new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1),                                new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))),                        new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)),                        new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3),                                new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4))));        // 2. Unordered bulk operation - no guarantee of order of operation        collection.bulkWrite(                Arrays.asList(new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 4)),                        new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 5)),                        new InsertOneModel&lt;&gt;(new Document(&quot;_id&quot;, 6)),                        new UpdateOneModel&lt;&gt;(new Document(&quot;_id&quot;, 1),                                new Document(&quot;$set&quot;, new Document(&quot;x&quot;, 2))),                        new DeleteOneModel&lt;&gt;(new Document(&quot;_id&quot;, 2)),                        new ReplaceOneModel&lt;&gt;(new Document(&quot;_id&quot;, 3),                                new Document(&quot;_id&quot;, 3).append(&quot;x&quot;, 4))),                new BulkWriteOptions().ordered(false));    &#125;    */&#125;","categories":["java"],"tags":["java","mongo"]},{"title":"IDEA 貌似注解失效 - 报错：cannot resolve method xxx","url":"/20170301-IDEA-%E8%B2%8C%E4%BC%BC%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88-%E6%8A%A5%E9%94%99%EF%BC%9Acannot-resolve-method-xxx/","content":"在java平台上lombok提供了简单的注解的形式\n来帮助我们消除一些必须有但看起来很臃肿的代码\n比如属性的get&#x2F;set，及对象的toString等方法，特别是相对于 POJO;\n\n出现问题\n各种log方法，set方法中红色波浪线\n提示：cannot resolve method xxx\n虽然出现错误但是编译是可以通过的\n\n问题原因原来的代码用了lombok简单注解比如maven的pom.xml文件有如下配置\n&lt;dependency&gt;\t&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\t&lt;artifactId&gt;lombok&lt;/artifactId&gt;\t&lt;version&gt;1.16.8&lt;/version&gt;&lt;/dependency&gt;\n\n解决办法安装lombok plugin\n\n装完插件之后就舒服了，也不报错\n","categories":["java"],"tags":["java","idea"]},{"title":"IDEA修改全局设置，如maven等","url":"/20170215-IDEA%E4%BF%AE%E6%94%B9%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%EF%BC%8C%E5%A6%82maven%E7%AD%89/","content":"这几天在折腾maven项目\n我发现居然每次新open一个项目就得配置下maven\n因为默认的maven配置文件不行，我自定义的文件用的是阿里云的镜像\n那样快一点，于是很郁闷，决定要搞定他！！！\n结果这样设置就可以了，全局设置。\nFile---&gt;Other Setting---&gt;Default Setting\n接下来的设置就是一样的了，各种设置都可以，只要你想全局生效\n","categories":["软件"],"tags":["idea"]},{"title":"IDEA智能补全快捷键更改为Ctrl + 逗号","url":"/20170328-IDEA%E6%99%BA%E8%83%BD%E8%A1%A5%E5%85%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%9B%B4%E6%94%B9%E4%B8%BACtrl%20+%20%E9%80%97%E5%8F%B7/","content":"一直就听说idea的智能补全很厉害，但是Ctrl + 空格 被万恶的输入法给占用了网上搜也不是很清晰，这里就写个博客记录一下\n快捷键设置：file－&gt;setting-&gt;Keymap-&gt;Main menu-&gt;Code-&gt;Completion-&gt;Basic找到之后右键Add keyboard Shortcut，然后按下：Ctrl + 逗号\n","categories":["idea"],"tags":["idea"]},{"title":"IDEA自定义注释模板(javadoc) - Jindent插件 - 安装&设置","url":"/20170214-IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF-javadoc-Jindent%E6%8F%92%E4%BB%B6-%E5%AE%89%E8%A3%85-%E8%AE%BE%E7%BD%AE/","content":"在线安装\n\nFile—&gt;Settings—&gt;Plugin—&gt;Browse repositories…\n搜索框输入：jindent\nJindent - Source Code Formatter 选中\n右边 install\n等待安装完成\napply之后会让你重启idea\n\n","categories":["软件"],"tags":["javadoc"]},{"title":"IDEA设置intellij-java-google-style","url":"/20170401-IDEA%E8%AE%BE%E7%BD%AEintellij-java-google-style/","content":"一直想弄个格式化代码，后来发现很多人用谷歌的，于是也来整一份\n保存一份google code的xml，链接有最新的intellij-java-google-style.xml设置方法如下：Setting -&gt; Editor -&gt; Code Stytle -&gt; Java最后一步就选择你存放之前保存的xml\n然后就大功告成，来个对比前\npackage com.hisen.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * Created by hisenyuan on 2017/3/23 at 18:02. */public class test &#123;    public static void main(String[] args) &#123;String s = &quot;&#123;&#x27;A&#x27;:&#x27;a&#x27;&#125;&quot;;        JSONObject obj= JSON.parseObject(s);        System.out.println(obj.get(&quot;A&quot;));    &#125;&#125;\n后\npackage com.hisen.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * Created by hisenyuan on 2017/3/23 at 18:02. */public class test &#123;  public static void main(String[] args) &#123;    String s = &quot;&#123;&#x27;A&#x27;:&#x27;a&#x27;&#125;&quot;;    JSONObject obj = JSON.parseObject(s);    System.out.println(obj.get(&quot;A&quot;));  &#125;&#125;\n","categories":["idea"],"tags":["intellij-java-google-style"]},{"title":"IDEA部署tomcat项目前台传输的json到后台乱码 - IDEA乱码解决","url":"/20170330-IDEA%E9%83%A8%E7%BD%B2tomcat%E9%A1%B9%E7%9B%AE%E5%89%8D%E5%8F%B0%E4%BC%A0%E8%BE%93%E7%9A%84json%E5%88%B0%E5%90%8E%E5%8F%B0%E4%B9%B1%E7%A0%81/","content":"idea涉及编码的地方都改了主要是编译时候的编码，tomcat的编码，以及idea配置里面的编码\n一、idea配置文件\n\\HOME\\IntelliJ IDEA 2016.3.4\\bin\\idea64.exe.vmoptions\n增加一行：-Dfile.encoding&#x3D;UTF-8\n二、编译参数\nFile -&gt; Settings -&gt; Build, Execution, Deployment-&gt; Compiler -&gt; Java Compiler -&gt; Addition command line parameters\n在空格里面添加：-encoding utf-8三、工程编码\nFile -&gt; Settings -&gt; Editor -&gt; File Encodings\n此页面三个地方都选择UTF-8四、tomcat参数\nRun/debug Configuration tomcat\nVM options：-Dfile.encoding&#x3D;UTF-8\n","categories":["idea"],"tags":["java","idea"]},{"title":"IntelliJ IDEA 调试窗口、帮助窗口、搜索框、底部消息等中文乱码问题解决","url":"/20170825-IntelliJ%20IDEA%20%E8%B0%83%E8%AF%95%E7%AA%97%E5%8F%A3%E3%80%81%E5%B8%AE%E5%8A%A9%E7%AA%97%E5%8F%A3%E3%80%81%E6%90%9C%E7%B4%A2%E6%A1%86%E3%80%81%E5%BA%95%E9%83%A8%E6%B6%88%E6%81%AF%E7%AD%89%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"IntelliJ IDEA 调试窗口、帮助窗口、搜索框、底部消息等中文乱码\n在使用的过程中发现，搜索框历史、提交svn后的消息提示乱码\n最后发现是由于更改了idea界面的字体，字体对中文支持不佳导致\n解决办法：更改为支持中文的字体（比如：微软雅黑 Microsoft YaHei）\n设置路径：Settings -&gt; Appearance &amp; Behavior -&gt; UI Options -&gt; override default fonts by\n选择何时的字体即可，也可以把勾勾去掉，使用默认的。\n","categories":["idea"],"tags":["乱码"]},{"title":"idea列编辑：IntelliJ IDEA：toggle block selection mode","url":"/20171024-IntelliJ%20IDEA%EF%BC%9Atoggle%20block%20selection%20mode/","content":"在eclipse中有列编辑模式：toggle block selection mode\n在idea中也可以，而且还比较高级，哈哈\nidea -&gt; 右上角 -&gt; Edit -&gt; Column Selection Mode -&gt; 移动光标到你想要弄的行\n完事在重复一次，就可以退出列编辑模式\n","categories":["idea"],"tags":["idea"]},{"title":"Intellij IDEA中使用MyBatis-generator 自动生成MyBatis代码","url":"/20170322-Intellij%20IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8MyBatis-generator%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90MyBatis%E4%BB%A3%E7%A0%81/","content":"MyBatis Generator是一个非常方便的代码生成工具，\n可以根据数据库中表结构自动生成CRUD代码，可以满足大部分需求。\nMyBatis Generator (MBG) 是一个Mybatis的代码生成器 ，\n可以根据数据库中表结构自动生成简单的CRUD（插入，查询，更新，删除）操作。\n但联合查询和存储过程，需手动手写SQL和对象。\nPS:配置过程中请注意自己的工程目录结构\n一、pom.xml添加插件&lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.3.2&lt;/version&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;5.1.5&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;                &lt;configuration&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;\n二、配置generatorConfig.xml\nresources下建generatorConfig.xml,作为mybatis-generator-maven-plugin插件的执行目标。\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;context id=&quot;mysqlgenerator&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;!--数据库连接信息--&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;                        connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/ssm&quot;                        userId=&quot;root&quot;                        password=&quot;hisen&quot; /&gt;        &lt;!--代码相关路径和包--&gt;        &lt;javaModelGenerator targetPackage=&quot;com.hisen.mybatis.model&quot; targetProject=&quot;src/main/java&quot; /&gt;        &lt;sqlMapGenerator targetPackage=&quot;com.hisen.mybatis.mapper&quot; targetProject=&quot;src/main/resources&quot; /&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.hisen.mybatis.mapper&quot; targetProject=&quot;src/main/java&quot; /&gt;        &lt;!--表名--&gt;        &lt;table tableName=&quot;appointment&quot;/&gt;        &lt;table tableName=&quot;book&quot;/&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;\n三、Intellij配置MyBatis Generator生成代码的运行方式：命令行、使用Ant、使用Maven、Java编码。\n本文采用Maven插件mybatis-generator-maven-plugin来运行MyBatis Generator，用的是命令行的方式。\n配置插件选择目录，输入命令：mybatis-generator:generate -e找到插件。双击执行即可看到生成的文件\n","categories":["java"],"tags":["idea","mybatis"]},{"title":"Intellij Idea 快捷键汇总&介绍","url":"/20170213-Intellij-Idea-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB-%E4%BB%8B%E7%BB%8D/","content":"最常用快捷键(1~18)\n\nCtrl＋E，可以显示最近编辑的文件列表\nShift＋Click可以关闭文件\nCtrl＋[或]可以跳到大括号的开头结尾\nCtrl＋Shift＋Backspace可以跳转到上次编辑的地方\nCtrl＋F12，可以显示当前文件的结构\nCtrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择\nCtrl＋N，可以快速打开类\nCtrl＋Shift＋N，可以快速打开文件\nAlt＋Q可以看到当前方法的声明\nCtrl＋W可以选择单词继而语句继而行继而函数\nAlt＋F1可以将正在编辑的元素在各个面板中定位\nCtrl＋P，可以显示参数信息\nCtrl＋Shift＋Insert可以选择剪贴板内容并插入\nAlt＋Insert可以生成构造器&#x2F;Getter&#x2F;Setter等\nCtrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量\nCtrl＋Alt＋T可以把代码包在一块内，例如try&#x2F;catch\nAlt＋Up and Alt＋Down可在方法间快速移动\n在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”&#x3D;&#x3D;”改为”equals()”\nCtrl＋Shift＋Alt＋N可以快速打开符号\nCtrl＋Shift＋Space在很多时候都能够给出Smart提示\nAlt＋F3可以快速寻找\nCtrl＋&#x2F;和Ctrl＋Shift＋&#x2F;可以注释代码\nCtrl＋Alt＋B可以跳转到抽象方法的实现\nCtrl＋O可以选择父类的方法进行重写\nCtrl＋Q可以看JavaDoc\nCtrl＋Alt＋Space是类名自动完成\n快速打开类&#x2F;文件&#x2F;符号时，可以使用通配符，也可以使用缩写\nLive Templates! Ctrl＋J\nCtrl＋Shift＋F7可以高亮当前元素在当前文件中的使用\nCtrl＋Alt＋Up &#x2F;Ctrl＋Alt＋Down可以快速跳转搜索结果\nCtrl＋Shift＋J可以整合两行\nAlt＋F8是计算变量值\n\n\nAlt+回车 导入包,自动修正\nCtrl+N   查找类\nCtrl+Shift+N 查找文件\nCtrl+Alt+L  格式化代码\nCtrl+Alt+O 优化导入的类和包\nAlt+Insert 生成代码(如get,set方法,构造函数等)\nCtrl+E或者Alt+Shift+C  最近更改的代码\nCtrl+R 替换文本\nCtrl+F 查找文本\nCtrl+Shift+Space 自动补全代码\nCtrl+空格 代码提示\nCtrl+Alt+Space 类名或接口名提示\nCtrl+P 方法参数提示\nCtrl+Shift+Alt+N 查找类中的方法或变量\nAlt+Shift+C 对比最近修改的代码\nShift+F6  重构-重命名\nCtrl+Shift+先上键\nCtrl+X 删除行\nCtrl+D 复制行\nCtrl+&#x2F; 或 Ctrl+Shift+&#x2F;  注释（&#x2F;&#x2F; 或者&#x2F;…&#x2F; ）\nCtrl+J  自动代码\nCtrl+E 最近打开的文件\nCtrl+H 显示类结构图\nCtrl+Q 显示注释文档\nAlt+F1 查找代码所在位置\nAlt+1 快速打开或隐藏工程面板\nCtrl+Alt+ left&#x2F;right 返回至上次浏览的位置\nAlt+ left&#x2F;right 切换代码视图\nAlt+ Up&#x2F;Down 在方法间快速移动定位\nCtrl+Shift+Up&#x2F;Down 代码向上&#x2F;下移动。\nF2 或Shift+F2 高亮错误或警告快速定位\n代码标签输入完成后，按Tab，生成代码。\n选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。\nCtrl+W 选中代码，连续按会有其他效果\n选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。\nCtrl+Up&#x2F;Down 光标跳转到第一行或最后一行下\nCtrl+B 快速打开光标处的类或方法\n","categories":["软件"],"tags":["java","idea"]},{"title":"JAVA中几种常用的RPC框架","url":"/20170317-JAVA%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%9A%84RPC%E6%A1%86%E6%9E%B6/","content":"RPC是远程过程调用的简称，广泛应用在大规模分布式应用中，\n作用是有助于系统的垂直拆分，使系统更易拓展。\nJava中的RPC框架比较多，各有特色，广泛使用的有RMI、Hessian、Dubbo等。\nRPC还有一个特点就是能够跨语言，本文只以JAVA语言里的RPC为例。\n其他的框架结构也类似，区别在于对象的序列化方法，传输对象的通讯协议，\n以及注册中心的管理与failover设计（利用zookeeper）。\n客户端和服务端可以运行在不同的JVM中，Client只需要引入接口，\n接口的实现以及运行时需要的数据都在Server端，RPC的主要依赖技术是序列化、反序列化和传输协议，\nJAVA里对应的就是对象的序列化、反序列化以及序列化后数据的传输。\nRMI的序列化和反序列化是JAVA自带的，Hessian里的序列化和反序列化是私有的，传输协议则是HTTP，\nDubbo的序列化可以多种选择，一般使用Hessian的序列化协议，传输则是TCP协议，使用了高性能的NIO框架Netty。\n对于序列化，我还了解一些，像Google的ProBuffer、JBoss Marshalling和Apache Thrift等\n1.RMI\nJAVA自带的远程方法调用工具，不过有一定的局限性，\n\n毕竟是JAVA语言最开始时的设计，后来很多框架的原理都基于RMI，RMI的使用如下：\n对外接口\npublic interface IService extends Remote &#123;      public String queryName(String no) throws RemoteException;  &#125;\n服务实现\n\nimport java.rmi.RemoteException;import java.rmi.server.UnicastRemoteObject;// 服务实现public class ServiceImpl extends UnicastRemoteObject implements IService &#123;    /**     */    private static final long serialVersionUID = 682805210518738166L;    /**     * @throws RemoteException     */    protected ServiceImpl() throws RemoteException &#123;        super();    &#125;    /* (non-Javadoc)     * @see com.suning.ebuy.wd.web.IService#queryName(java.lang.String)     */    @Override    public String queryName(String no) throws RemoteException &#123;        // 方法的具体实现        System.out.println(&quot;hello&quot; + no);        return String.valueOf(System.currentTimeMillis());    &#125;    &#125;\nRMI客户端\nimport java.rmi.AccessException;import java.rmi.NotBoundException;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;// RMI客户端public class Client &#123;    public static void main(String[] args) &#123;        // 注册管理器        Registry registry = null;        try &#123;            // 获取服务注册管理器            registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,8088);            // 列出所有注册的服务            String[] list = registry.list();            for(String s : list)&#123;                System.out.println(s);            &#125;        &#125; catch (RemoteException e) &#123;                    &#125;        try &#123;            // 根据命名获取服务            IService server = (IService) registry.lookup(&quot;vince&quot;);            // 调用远程方法            String result = server.queryName(&quot;ha ha ha ha&quot;);            // 输出调用结果            System.out.println(&quot;result from remote : &quot; + result);        &#125; catch (AccessException e) &#123;                    &#125; catch (RemoteException e) &#123;                    &#125; catch (NotBoundException e) &#123;                    &#125;    &#125;&#125;\nRMI服务端\nimport java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;// RMI服务端public class Server &#123;    public static void main(String[] args) &#123;        // 注册管理器        Registry registry = null;        try &#123;            // 创建一个服务注册管理器            registry = LocateRegistry.createRegistry(8088);        &#125; catch (RemoteException e) &#123;                    &#125;        try &#123;            // 创建一个服务            ServiceImpl server = new ServiceImpl();            // 将服务绑定命名            registry.rebind(&quot;vince&quot;, server);                        System.out.println(&quot;bind server&quot;);        &#125; catch (RemoteException e) &#123;                    &#125;    &#125;&#125;\n服务注册管理器写在了Server里，当然也可以抽出来单独作为一个服务，\n在其他一些框架中，往往用Zookeeper充当注册管理角色。\n2.Hessian（基于HTTP的远程方法调用）\n基于HTTP协议传输，在性能方面还不够完美，负载均衡和失效转移依赖于应用的负载均衡器，\n\nHessian的使用则与RMI类似，区别在于淡化了Registry的角色，通过显示的地址调用，\n利用HessianProxyFactory根据配置的地址create一个代理对象，另外还要引入Hessian的Jar包。\n3、Dubbo（淘宝开源的基于TCP的RPC框架）\n\n基于Netty的高性能RPC框架，是阿里巴巴开源的，总体原理如下：\n在了解Dubbo之前，要先对Zookeeper有深入的理解，当理解了zookeeper后，Dubbo也就了无秘密了。\nDubbo的详细说明在淘宝开源里说的非常详细，在工作中很多生产项目都用了Dubbo，过程中也发现了很多需要注意的地方.\n","categories":["java"],"tags":["java"]},{"title":"JMH使用案例-日期格式化工具性能对比","url":"/20210511-JMH-use-cases-date-format-performance/","content":"一、背景最近在看代码，发现一个 Date 格式化为 String 的方法。\npublic String dateFormatString() &#123;    return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).format(date);&#125;\n看到这个方法想到\n\n每次都 new 一个 format 会快么(非线程安全，得每次都 new)？\nSimpleDateFormat 格式化快么？\n“yyyy-MM-dd HH:mm:ss.SSS” 改成静态常量会不会快点？\n\n带着以上三个疑问，就想着做个对比测试。恰巧最近在 perfma 社区看 jvm 相关内容时，刷到了『性能调优必备利器之 JMH』\n优点：不用自己写相关统计代码，而且统计方式有多种\n二、结论性能从低到高\n\njava.text.SimpleDateFormat\norg.apache.commons.lang.time.DateFormatUtils\norg.joda.time.DateTime\n\n\n字符串静态常量影响\n\n是否静态常量几乎没有影响\n使用常量反而性能有所下降(???为何)\n\nBenchmark                                             Mode  Cnt        Score        Error  UnitsDateConvertTest.dateFormatString                     thrpt   10   867333.631 ±   9510.553  ops/sDateConvertTest.dateFormatStringApache               thrpt   10  2158217.955 ±  89012.866  ops/sDateConvertTest.dateFormatStringApacheStaticPattern  thrpt   10  2141167.550 ±  93715.889  ops/sDateConvertTest.dateFormatStringJoda                 thrpt   10  2802803.925 ± 121600.833  ops/sDateConvertTest.dateFormatStringJodaStaticPattern    thrpt   10  2744918.391 ± 131925.235  ops/s\n说明：Error 列是空的，看 Score 和 Units 即可ops&#x2F;s:一秒钟执行多少次操作\n三、代码3.1 引入相关 jar&lt;dependency&gt;    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;    &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;    &lt;version&gt;1.23&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;    &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;    &lt;version&gt;1.23&lt;/version&gt;&lt;/dependency&gt;\n3.2 IDEA 安装 JMH 插件插件中心搜索：JMH安装量最高的那个就是\n3.3 编写代码import org.apache.commons.lang.time.DateFormatUtils;import org.joda.time.DateTime;import org.openjdk.jmh.annotations.Benchmark;import org.openjdk.jmh.annotations.Fork;import org.openjdk.jmh.annotations.Measurement;import org.openjdk.jmh.annotations.Scope;import org.openjdk.jmh.annotations.State;import org.openjdk.jmh.annotations.Warmup;import java.text.SimpleDateFormat;import java.util.Date;/** * @author hisenyuan * @date 2021/5/10 18:39 */// 默认的 State，每个测试线程分配一个实例@State(Scope.Thread)// 如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。@Fork(1)// 预热的次数 3 次基准测试(不是执行三次方法)@Warmup(iterations = 3)// 基准执行次数 10 次(参数含义同上)@Measurement(iterations = 10)public class DateConvertTest &#123;    private final static Date date = new Date();    private final static String PATTERN = &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;;    @Benchmark    public String dateFormatString() &#123;        return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).format(date);    &#125;    @Benchmark    public String dateFormatStringJoda() &#123;        return new DateTime(date).toString(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);    &#125;    @Benchmark    public String dateFormatStringJodaStaticPattern() &#123;        return new DateTime(date).toString(PATTERN);    &#125;    @Benchmark    public String dateFormatStringApache() &#123;        return DateFormatUtils.format(date, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);    &#125;    @Benchmark    public String dateFormatStringApacheStaticPattern() &#123;        return DateFormatUtils.format(date, PATTERN);    &#125;&#125;\n\n3.4 执行安装了 JMH 插件之后，直接对着类名右键，选择运行即可。JMH 会默认执行当前类下面的所有的基准测试。\n四、执行结果ETA 00:10:50 代表整个测试需要近11分钟\n# JMH version: 1.23# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/bin/java# VM options: -Dfile.encoding=UTF-8# Warmup: 3 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Throughput, ops/time# Benchmark: com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatString# Run progress: 0.00% complete, ETA 00:10:50# Fork: 1 of 1# Warmup Iteration   1: 698627.190 ops/s# Warmup Iteration   2: 873835.360 ops/s# Warmup Iteration   3: 870972.646 ops/sIteration   1: 875650.632 ops/sIteration   2: 872407.599 ops/sIteration   3: 864390.061 ops/sIteration   4: 872456.756 ops/sIteration   5: 870538.248 ops/sIteration   6: 861600.599 ops/sIteration   7: 868469.312 ops/sIteration   8: 868930.572 ops/sIteration   9: 864686.616 ops/sIteration  10: 854205.911 ops/sResult &quot;com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatString&quot;:  867333.631 ±(99.9%) 9510.553 ops/s [Average]  (min, avg, max) = (854205.911, 867333.631, 875650.632), stdev = 6290.642  CI (99.9%): [857823.077, 876844.184] (assumes normal distribution)# JMH version: 1.23# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/bin/java# VM options: -Dfile.encoding=UTF-8# Warmup: 3 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Throughput, ops/time# Benchmark: com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringApache# Run progress: 20.00% complete, ETA 00:08:42# Fork: 1 of 1# Warmup Iteration   1: 1922497.366 ops/s# Warmup Iteration   2: 2121425.254 ops/s# Warmup Iteration   3: 2142439.041 ops/sIteration   1: 2174791.808 ops/sIteration   2: 2101868.007 ops/sIteration   3: 2174003.026 ops/sIteration   4: 2202522.277 ops/sIteration   5: 2039234.570 ops/sIteration   6: 2105338.449 ops/sIteration   7: 2205933.974 ops/sIteration   8: 2175865.041 ops/sIteration   9: 2167544.736 ops/sIteration  10: 2235077.658 ops/sResult &quot;com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringApache&quot;:  2158217.955 ±(99.9%) 89012.866 ops/s [Average]  (min, avg, max) = (2039234.570, 2158217.955, 2235077.658), stdev = 58876.499  CI (99.9%): [2069205.089, 2247230.821] (assumes normal distribution)# JMH version: 1.23# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/bin/java# VM options: -Dfile.encoding=UTF-8# Warmup: 3 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Throughput, ops/time# Benchmark: com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringApacheStaticPattern# Run progress: 40.00% complete, ETA 00:06:31# Fork: 1 of 1# Warmup Iteration   1: 1964208.975 ops/s# Warmup Iteration   2: 2138997.654 ops/s# Warmup Iteration   3: 2164194.409 ops/sIteration   1: 2221565.433 ops/sIteration   2: 2231776.725 ops/sIteration   3: 2210494.794 ops/sIteration   4: 2057487.199 ops/sIteration   5: 2111366.133 ops/sIteration   6: 2150355.985 ops/sIteration   7: 2116673.562 ops/sIteration   8: 2140376.847 ops/sIteration   9: 2099801.246 ops/sIteration  10: 2071777.579 ops/sResult &quot;com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringApacheStaticPattern&quot;:  2141167.550 ±(99.9%) 93715.889 ops/s [Average]  (min, avg, max) = (2057487.199, 2141167.550, 2231776.725), stdev = 61987.258  CI (99.9%): [2047451.661, 2234883.440] (assumes normal distribution)# JMH version: 1.23# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/bin/java# VM options: -Dfile.encoding=UTF-8# Warmup: 3 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Throughput, ops/time# Benchmark: com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringJoda# Run progress: 60.00% complete, ETA 00:04:21# Fork: 1 of 1# Warmup Iteration   1: 2767967.530 ops/s# Warmup Iteration   2: 2839342.269 ops/s# Warmup Iteration   3: 2824726.959 ops/sIteration   1: 2859527.645 ops/sIteration   2: 2799624.402 ops/sIteration   3: 2876558.678 ops/sIteration   4: 2862478.579 ops/sIteration   5: 2882872.177 ops/sIteration   6: 2860788.081 ops/sIteration   7: 2742885.180 ops/sIteration   8: 2779727.212 ops/sIteration   9: 2719266.181 ops/sIteration  10: 2644311.112 ops/sResult &quot;com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringJoda&quot;:  2802803.925 ±(99.9%) 121600.833 ops/s [Average]  (min, avg, max) = (2644311.112, 2802803.925, 2882872.177), stdev = 80431.422  CI (99.9%): [2681203.092, 2924404.757] (assumes normal distribution)# JMH version: 1.23# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_171.jdk/Contents/Home/jre/bin/java# VM options: -Dfile.encoding=UTF-8# Warmup: 3 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Throughput, ops/time# Benchmark: com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringJodaStaticPattern# Run progress: 80.00% complete, ETA 00:02:10# Fork: 1 of 1# Warmup Iteration   1: 2711358.480 ops/s# Warmup Iteration   2: 2823432.725 ops/s# Warmup Iteration   3: 2745545.759 ops/sIteration   1: 2752446.099 ops/sIteration   2: 2792047.450 ops/sIteration   3: 2828389.094 ops/sIteration   4: 2799921.909 ops/sIteration   5: 2670924.332 ops/sIteration   6: 2533779.871 ops/sIteration   7: 2733321.639 ops/sIteration   8: 2738839.592 ops/sIteration   9: 2802775.869 ops/sIteration  10: 2796738.055 ops/sResult &quot;com.jd.finance.jrpaypassword.performance.DateConvertTest.dateFormatStringJodaStaticPattern&quot;:  2744918.391 ±(99.9%) 131925.235 ops/s [Average]  (min, avg, max) = (2533779.871, 2744918.391, 2828389.094), stdev = 87260.375  CI (99.9%): [2612993.156, 2876843.626] (assumes normal distribution)# Run complete. Total time: 00:10:52REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up onwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorialexperiments, perform baseline and negative tests that provide experimental control, make surethe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.Do not assume the numbers tell you what you want them to tell.Benchmark                                             Mode  Cnt        Score        Error  UnitsDateConvertTest.dateFormatString                     thrpt   10   867333.631 ±   9510.553  ops/sDateConvertTest.dateFormatStringApache               thrpt   10  2158217.955 ±  89012.866  ops/sDateConvertTest.dateFormatStringApacheStaticPattern  thrpt   10  2141167.550 ±  93715.889  ops/sDateConvertTest.dateFormatStringJoda                 thrpt   10  2802803.925 ± 121600.833  ops/sDateConvertTest.dateFormatStringJodaStaticPattern    thrpt   10  2744918.391 ± 131925.235  ops/s\n\n五、JMH 介绍\n性能调优必备利器之 JMH\n\n","categories":["java"],"tags":["java"]},{"title":"JWT 丨 JSON Web Tokens 丨 java-jwt","url":"/20170817-JWT%20%E4%B8%A8%20JSON%20Web%20Tokens%20%E4%B8%A8%20java-jwt/","content":"JWT简介JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。\nJWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。\nJWT生成的token欲加密的字符：hisen加密后的字符：(分三段)\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjoiXCJoaXNlblwiIiwiZXhwIjoxNTAyOTY0Mjk2fQ.gzg4JEm8Z-GoU9eNaNll9I1wQQ0cEAbZC9OBUjAAQqI\nJWT的构成\nheader完整的头部，json格式：\n\n声明类型，这里是jwt\n声明加密的算法 通常直接使用 HMAC SHA256\n\n&#123;  &#x27;typ&#x27;: &#x27;JWT&#x27;,  &#x27;alg&#x27;: &#x27;HS256&#x27;&#125;\n然后对头部进行base64加密，构成第一段：\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\nplayload载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分\n\n标准中注册的声明\n公共的声明\n私有的声明\n\n标准中注册的声明 (建议但不强制使用)\niss: jwt签发者\nsub: jwt所面向的用户\naud: 接收jwt的一方\nexp: jwt的过期时间，这个过期时间必须要大于签发时间\nnbf: 定义在什么时间之前，该jwt都是不可用的.\niat: jwt的签发时间\njti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\n\n公共的声明公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.\n私有的声明私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n定义一个payload&#123;  &quot;payload&quot;: &quot;hisen&quot;&#125;\n然后对头部进行base64加密，构成第二段：\neyJwYXlsb2FkIjoiXCJoaXNlblwiIiwiZXhwIjoxNTAyOTY0Mjk2fQ\nsignaturejwt的第三部分是一个签证信息，这个签证信息由三部分组成\n\nheader (base64后的)\npayload (base64后的)\nsecret这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三段：\n\ngzg4JEm8Z-GoU9eNaNll9I1wQQ0cEAbZC9OBUjAAQqI\n密钥secret是保存在服务端的，服务端会根据这个密钥进行生成token和验证，所以需要保护好。\njava实现方式maven依赖&lt;dependency&gt;      &lt;groupId&gt;com.auth0&lt;/groupId&gt;      &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;      &lt;version&gt;3.2.0&lt;/version&gt;&lt;/dependency&gt;\n生成token代码(加密)// 加密，传入一个对象和有效期public static &lt;T&gt; String sign(T object, long maxAge)    throws UnsupportedEncodingException &#123;  Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();  String jsonString = JSON.toJSONString(object);  map.put(&quot;alg&quot;, &quot;HS256&quot;);  map.put(&quot;typ&quot;, &quot;JWT&quot;);  long exp = System.currentTimeMillis() + maxAge;  String token = JWT.create()      .withHeader(map)//header      .withClaim(PAYLOAD, jsonString)//存放的内容 json      .withClaim(EXP, new DateTime(exp).toDate())//超时时间      .sign(Algorithm.HMAC256(SECRET));//密钥  return token;&#125;\n解析token(解密)// 解密，传入一个加密后的token字符串和解密后的类型public static &lt;T&gt; T unsign(String token, Class&lt;T&gt; classT) throws UnsupportedEncodingException &#123;  JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();  DecodedJWT jwt = verifier.verify(token);  Map&lt;String, Claim&gt; claims = jwt.getClaims();  if (claims.containsKey(EXP) &amp;&amp; claims.containsKey(PAYLOAD)) &#123;    long tokenTime = claims.get(EXP).asDate().getTime();    long now = new Date().getTime();    // 判断令牌是否已经超时    if (tokenTime &gt; now) &#123;      String json = claims.get(PAYLOAD).asString();      // 把json转回对象，返回      return JSON.parseObject(json, classT);    &#125;  &#125;  return null;&#125;\n完整代码 &amp; 测试代码基于JWT token认证 | JSON Web Tokens | java-jwt 3.2.0 | demo\nJWT总结\n因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。\npayload部分，JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。\n便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。它不需要在服务端保存会话信息, 所以它易于应用的扩展\n点击登陆，如果帐号密码校验通过，给用户生成一个token返回，然后用户每次登陆都带上这个token即可(放在header？)\n\nJWT官方网站：https://jwt.io/\n","categories":["java"],"tags":["java","jwt"]},{"title":"Java - 利用apache POI读取Excel（xls,xlsx,2003,2007)","url":"/20180113-Java%20-%20%E5%88%A9%E7%94%A8apache%20POI%E8%AF%BB%E5%8F%96Excel%EF%BC%88xls,xlsx,2003,2007)/","content":"一个简单的工具类，更多java小练习：https://github.com/hisenyuan/IDEAPractice\n一、添加依赖&lt;!-- POI start --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;  &lt;artifactId&gt;poi&lt;/artifactId&gt;  &lt;version&gt;3.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;  &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;  &lt;version&gt;3.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;commons-collections&lt;/groupId&gt;  &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  &lt;version&gt;3.2.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- POI end --&gt;\n二、测试类package com.hisen.jars.poi;import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.List;/** * @author hisenyuan * @time 2018/1/12 17:43 * @description 测试读取 */public class TestPoiExcelUtil &#123;  public static void main(String[] args) &#123;    File file = new File(&quot;C:\\\\work\\\\document\\\\银行信息.xlsx&quot;);    try &#123;      // 每一个excelData为一行数据（存放在数组）      List&lt;String[]&gt; excelData = POIExcelUtil.readExcel(file);      for (String[] data:excelData) &#123;        System.out.println(Arrays.toString(data));      &#125;    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125;  &#125;&#125;\n三、工具类代码完整类：POIExcelUtil.java\npackage com.hisen.jars.poi;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.apache.log4j.Logger;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;/** * @author hisenyuan * @time 2018/1/12 16:35 * @description 利用POI读取excel表格 */public class POIExcelUtil &#123;  private static Logger logger = Logger.getLogger(POIExcelUtil.class);  private final static String XLS = &quot;xls&quot;;  private final static String XLSX = &quot;xlsx&quot;;  public static List&lt;String[]&gt; readExcel(File file) throws IOException &#123;    // 检查文件    checkFile(file);    Workbook workBook = getWorkBook(file);    // 返回对象,每行作为一个数组，放在集合返回    ArrayList&lt;String[]&gt; rowList = new ArrayList&lt;&gt;();    if (null != workBook) &#123;      for (int sheetNum = 0; sheetNum &lt; workBook.getNumberOfSheets(); sheetNum++) &#123;        // 获得当前sheet工作表        Sheet sheet = workBook.getSheetAt(sheetNum);        if (sheet == null) &#123;          continue;        &#125;        // 获得当前sheet的开始行        int firstRowNum = sheet.getFirstRowNum();        // 获得当前sheet的结束行        int lastRowNum = sheet.getLastRowNum();        // 循环所有行(第一行为标题)        for (int rowNum = firstRowNum; rowNum &lt; lastRowNum; rowNum++) &#123;          // 获得当前行          Row row = sheet.getRow(rowNum);          if (row == null) &#123;            continue;          &#125;          // 获得当前行开始的列          short firstCellNum = row.getFirstCellNum();          // 获得当前行的列数          int lastCellNum = row.getPhysicalNumberOfCells();          String[] cells = new String[row.getPhysicalNumberOfCells()];          // 循环当前行          for (int cellNum = firstCellNum; cellNum &lt; lastCellNum; cellNum++) &#123;            Cell cell = row.getCell(cellNum);            cells[cellNum] = getCellValue(cell);          &#125;          rowList.add(cells);        &#125;      &#125;    &#125;    return rowList;  &#125;&#125;","categories":["java"],"tags":["poi"]},{"title":"Java GC - 理论与实践 - 附优化案例","url":"/20190429-Java%20GC%20-%20%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%20-%20%E9%99%84%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/","content":"一、理论知识常见参数：\n\n-Xms 堆初始化    例如：-Xms256m\n-Xmx 堆最大值    例如：-Xmx512m\n-Xmn 堆新生代    例如：-Xmn100m\n-XX:NewRatio   新生代与老年代的比例\n-XX:SurvivorRatio 新生代区域比例，默认8,代表Eden:From Survivor:To Survivor &#x3D; 8:1:1\n\n垃圾回收器：\n\nSerial&#x2F;Serial Old 新生代&#x2F;老年代，古老，单线程，暂停所有用户线程，复制算法&#x2F;标记整理算法\nParNew 1的多线程版本\nParallel Scavenge 新生代，多线程，不需要暂停用户线程，复制算法\nParallel Old 老年代，多线程，不需要暂停用户线程，标记整理算法\nCMS（Current Mark Sweep，详情）老年代，与ParNew配合使用，牺牲吞吐量获得最短停顿，标记整理算法\nG1 并行与并发收集器，可预测的停顿时间\n\n二、实践案例\nFull GC 之前进行 Minor GC 避免扫描过多的对象， 配置：CMSScavengeBeforeRemark\nXms和Xmx设置为相同，这样可以减少内存自动扩容和收缩带来的性能损失\nJVM调优是最后的稻草，进行JVM调优之前应该先优化架构和代码\n调优是一个复杂的过程，根据具体的场景结合对垃圾回收器的深入理解进行调优，才可能事半功倍。\n\n各个区大小比例建议\n# 活跃空间大小：Full GC后堆中老年代占用空间的大小空间      倍数总大小    3-4倍活跃空间大小新生代    1-1.5倍活跃空间大小老年代    2-3倍活跃空间大小\n\n三、参考连接1.1 https://www.cnblogs.com/honey01/p/9475726.html1.2 https://www.cnblogs.com/dolphin0520/p/3783345.html2.1 https://tech.meituan.com/2017/12/29/jvm-optimize.html\n","categories":["java"],"tags":["java"]},{"title":"IDEA - Java.Lang.OutOfMemoryError: PermGen Space","url":"/20170222-Java-Lang-OutOfMemoryError-PermGen-Space/","content":"Java.Lang.OutOfMemoryError: PermGen Space\nTomcat只分配了非常小的PermGen内存，这里重新设置一下\n直接在配置tomcat的时候,在VM options填入:\n-XX:PermSize=97m -XX:MaxPermSize=256m","categories":["java"],"tags":["idea","tomcat"]},{"title":"Java三种创建对象的方式","url":"/20170210-Java%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F/","content":"有一个实现了Cloneable接口的Person类输出：\n&lt;使用new关键字创建对象&gt;hisen已成年体重为：50年龄为：23&lt;使用newInstance()方法创建对象&gt;体重为：0年龄为：0&lt;使用clone()方法创建对象&gt;hisen已成年体重为：50年龄为：23\n\n具体实现：\n\npackage com.hisen.javaGaiShu.page73test5;/** * 三种方式创建对象 *  * @author hisenyuan 2017年2月10日 下午10:27:14 */public class Person implements Cloneable &#123;\tprivate String name;\tprivate int weight;\tprivate int age;\tpublic Person() &#123;\t&#125;\tpublic Person(String name, int weight, int age) &#123;\t\tsuper();\t\tthis.name = name;\t\tthis.weight = weight;\t\tthis.age = age;\t&#125;\tpublic void young() &#123;\t\tif (age &gt;= 18 &amp;&amp; age &lt;= 100)\t\t\tSystem.out.println(name + &quot;已成年&quot;);\t\tif (age &gt; 0 &amp;&amp; age &lt; 18)\t\t\tSystem.out.println(name + &quot;未成年&quot;);\t&#125;\t@Override\tpublic String toString() &#123;\t\treturn &quot;体重为：&quot; + weight + &quot;\\n年龄为：&quot; + age;\t&#125;\tpublic static void main(String[] args) throws Exception &#123;\t\tSystem.out.println(&quot;&lt;使用new关键字创建对象&gt;&quot;);\t\tPerson p1 = new Person(&quot;hisen&quot;, 50, 23);\t\tp1.young();\t\tSystem.out.println(p1);\t\tSystem.out.println(&quot;&lt;使用newInstance()方法创建对象&gt;&quot;);\t\tClass c = Class.forName(&quot;com.hisen.javaGaiShu.page73test5.Person&quot;);\t\tPerson p2 = (Person) c.newInstance();\t\tp2.young();\t\tSystem.out.println(p2);\t\tSystem.out.println(&quot;&lt;使用clone()方法创建对象&gt;&quot;);\t\tPerson p3 = (Person) p1.clone();\t\tp3.young();\t\tSystem.out.println(p3);\t&#125;&#125;\n","categories":["java"],"tags":["java","对象"]},{"title":"Java判断全角半角字符以及相互转换","url":"/20170401-Java%E5%88%A4%E6%96%AD%E5%85%A8%E8%A7%92%E5%8D%8A%E8%A7%92%E5%AD%97%E7%AC%A6%E4%BB%A5%E5%8F%8A%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/","content":"在计算机屏幕上，一个汉字要占两个英文字符的位置，人们把一个英文字符所占的位置称为”半角”，\n相对地把一个汉字所占的位置称为”全角”。在汉字输入时，系统提供”半角”和”全角”两种不同的输入状态，\n但是对于英文字母、符号和数字这些通用字符就不同于汉字，在半角状态它们被作为英文字符处理；\n而在全角状态，它们又可作为中文字符处理。\n半角和全角切换方法：单击输入法工具条上的按钮或按键盘上的Shift+Space键来切换。\n1、全角：指一个字符占用两个标准字符位置。\n汉字字符和规定了全角的英文字符及国标GB2312-80中的图形符号和特殊字符都是全角字符。一般的系统命令是不用全角字符的，只是在作文字处理时才会使用全角字符。\n\n2、半角：指一字符占用一个标准的字符位置。\n通常的英文字母、数字键、符号键都是半角的，半角的显示内码都是一个字节。在系统内部，以上三种字符是作为基本代码处理的，所以用户输入命令和参数时一般都使用半角。\n\n3、全角与半角各在什么情况下使用？\n全角占两个字节，半角占一个字节。\n半角全角主要是针对标点符号来说的，全角标点占两个字节，半角占一个字节，而不管是半角还是全角，汉字都还是要占两个字节。\n在编程序的源代码中只能使用半角标点（不包括字符串内部的数据）\n在不支持汉字等语言的计算机上只能使用半角标点（其实这种情况根本就不存在半角全角的概念）\n对于大多数字体来说，全角看起来比半角大，当然这不是本质区别了。\n\n4、全角和半角的区别全角就是字母和数字等与汉字占等宽位置的字。半角就是ASCII方式的字符，\n在没有汉字输入法起做用的时候输入的字母数字和字符都是半角的。\n在汉字输入法出现的时候，输入的字母数字默认为半角，但是标点则是默认为全角，\n可以通过鼠标点击输入法工具条上的相应按钮来改变。\n\n5、关于“全角”和“半角”：\n全角：是指中GB2312-80（《信息交换用汉字编码字符集·基本集》）中的各种符号。\n半角：是指英文件ASCII码中的各种符号。\n全角状态下字母、数字符号等都会占两个字节的位置，也就是一个汉字那么宽，半角状态下，\n字母数字符号一般会占一个字节，也就是半个汉字的位置，全角半角对汉字没有影响。\n有两种方式可以判断:\n1:通过正则表达式来进行判断  [^\\x00-\\xff]\n2: 通过字符编码的范围进行判断.\n通过打印所有的字符发现：\n\n半角字符是从33开始到126结束\n与半角字符对应的全角字符是从65281开始到65374结束\n其中半角的空格是32.对应的全角空格是12288\n半角和全角的关系很明显,除空格外的字符偏移量是65248(65281-33 &#x3D; 65248)\n\n具体的代码如下：\n\npackage com.hisen.String;/** * 半角字符和全角字符的转换 以及 判断 * Created by hisenyuan on 2017/4/1 at 10:37. */public class FullHalf &#123;    /**     * ASCII表中可见字符从!开始，偏移位值为33(Decimal)     */    static final char DBC_CHAR_START = 33; // 半角!    /**     * ASCII表中可见字符到~结束，偏移位值为126(Decimal)     */    static final char DBC_CHAR_END = 126; // 半角~    /**     * 全角对应于ASCII表的可见字符从！开始，偏移值为65281     */    static final char SBC_CHAR_START = 65281; // 全角！    /**     * 全角对应于ASCII表的可见字符到～结束，偏移值为65374     */    static final char SBC_CHAR_END = 65374; // 全角～    /**     * ASCII表中除空格外的可见字符与对应的全角字符的相对偏移     */    static final int CONVERT_STEP = 65248; // 全角半角转换间隔    /**     * 全角空格的值，它没有遵从与ASCII的相对偏移，必须单独处理     */    static final char SBC_SPACE = 12288; // 全角空格 12288    /**     * 半角空格的值，在ASCII中为32(Decimal)     */    static final char DBC_SPACE = &#x27; &#x27;; // 半角空格    public static void main(String[] args) &#123;        String s = &quot;123456&quot;;        //半角转换成全角字符        String s1 = bj2qj(s);        //全角转换成半角        String s2 = qj2bj(s1);        System.out.println(&quot;全角：&quot;+s1 +&quot; -&gt; 半角：&quot;+s2);        System.out.println(&quot;--------------------------&quot;);        String fh = s1+s2;        //判断全角还是半角        fullOrHalf(fh);        //打印ASCII表中所有字符        printAllChar();    &#125;    /**     * &lt;PRE&gt;     * 半角字符-&gt;全角字符转换     * 只处理空格，!到˜之间的字符，忽略其他     * &lt;/PRE&gt;     */    private static String bj2qj(String src) &#123;        if (src == null) &#123;            return src;        &#125;        StringBuilder buf = new StringBuilder(src.length());        char[] ca = src.toCharArray();        for (int i = 0; i &lt; ca.length; i++) &#123;            if (ca[i] == DBC_SPACE) &#123; // 如果是半角空格，直接用全角空格替代                buf.append(SBC_SPACE);            &#125; else if ((ca[i] &gt;= DBC_CHAR_START) &amp;&amp; (ca[i] &lt;= DBC_CHAR_END)) &#123; // 字符是!到~之间的可见字符                buf.append((char) (ca[i] + CONVERT_STEP));            &#125; else &#123; // 不对空格以及ascii表中其他可见字符之外的字符做任何处理                buf.append(ca[i]);            &#125;        &#125;        return buf.toString();    &#125;    /**     * &lt;PRE&gt;     * 全角字符-&gt;半角字符转换     * 只处理全角的空格，全角！到全角～之间的字符，忽略其他     * &lt;/PRE&gt;     */    public static String qj2bj(String src) &#123;        if (src == null) &#123;            return src;        &#125;        StringBuilder buf = new StringBuilder(src.length());        char[] ca = src.toCharArray();        for (int i = 0; i &lt; src.length(); i++) &#123;            if (ca[i] &gt;= SBC_CHAR_START &amp;&amp; ca[i] &lt;= SBC_CHAR_END) &#123; // 如果位于全角！到全角～区间内                buf.append((char) (ca[i] - CONVERT_STEP));            &#125; else if (ca[i] == SBC_SPACE) &#123; // 如果是全角空格                buf.append(DBC_SPACE);            &#125; else &#123; // 不处理全角空格，全角！到全角～区间外的字符                buf.append(ca[i]);            &#125;        &#125;        return buf.toString();    &#125;    /**     * 使用正则表达式判断字符是否为全角     * @param str     */    public static void fullOrHalf(String str)&#123;        char[] chars = str.toCharArray();        for (int i = 0; i &lt; chars.length; i++) &#123;            String temp = String.valueOf(chars[i]);            // 正则判断是全角字符            if (temp.matches(&quot;[^\\\\x00-\\\\xff]&quot;)) &#123;                System.out.println(&quot;全角 -&gt; &quot; + temp);            &#125;            // 判断是半角字符            else &#123;                System.out.println(&quot;半角 -&gt; &quot; + temp);            &#125;        &#125;    &#125;    /**     * 打印所有字符     */    public static void printAllChar()&#123;        for (int i = Character.MIN_VALUE; i &lt;= Character.MAX_VALUE; ++i) &#123;            System.out.println(&quot;ASCII：&quot;+i + &quot; -&gt; &quot; + &quot;字符：&quot;+(char)i);        &#125;    &#125;&#125;","categories":["java"],"tags":["java"]},{"title":"Java原生类库java.util.zip - 文件夹压缩与解压","url":"/20170426-Java%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%BA%93java.util.zip%20-%20%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/","content":"到处搜了一下也没有看到专门做好的jar包\n真实的目录结构如下：\nC:\\1\\hisenyuan\\build.pngC:\\1\\hisenyuan\\DSCN6812.JPGC:\\1\\hisenyuan\\test\\test\\hello.zipC:\\1\\hisenyuan\\test\\hisenyuan.zipC:\\1\\hisenyuan\\test\\test.txtC:\\1\\hisenyuan\\test\\test\\hello\\hello.txtC:\\1\\hisenyuan\\tomcat.png\n压缩包的目录结构如下：\nbuild.pngDSCN6812.JPGtest\\hello.ziptest\\hisenyuan.ziptest\\test.txttest\\hello\\hello.txttomcat.png\n\n全部代码如下：\n\npackage com.hisen.utils;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipInputStream;import java.util.zip.ZipOutputStream;import org.apache.commons.io.IOUtils;import org.junit.Test;/** * 文件夹压缩解压工具 * Created by hisenyuan on 2017/4/20 at 17:27. */public class ZipOrUnZipFileUtil &#123;  private InputStream is;  private ZipOutputStream zos;  private int lastIndexOf;  @Test  public void testZipOrUnZipFile() &#123;    //分隔符，windows linux下有所不同    String separator = File.separator;    //想要压缩的文件所在目录 C:\\1\\hisenyuan    String folderPath = &quot;c:&quot; + separator + &quot;1&quot; + separator + &quot;hisenyuan&quot;;    //压缩文件路径：C:\\1\\hisenyuan\\hisenyuan.zip    String zipFilePath = &quot;c:&quot; + separator + &quot;1&quot; + separator + &quot;hisenyuan&quot; + &quot;.zip&quot;;    //解压文件所在的目录 E:\\file\\hisenyuan    String newPath = &quot;e:&quot; + separator + &quot;file&quot; + separator + &quot;hisenyuan&quot;;    unZipFile(zipFilePath, newPath);    zipFile(folderPath);  &#125;  /**   * 压缩文件   *   * @param filePath 压缩文件夹的路径   */  private void zipFile(String filePath) &#123;    File file = new File(filePath);    File zipFile = new File(filePath + &quot;.zip&quot;);    lastIndexOf = file.getAbsolutePath().length() + 1;    try &#123;      zos = new ZipOutputStream(new FileOutputStream(zipFile));      zos.setComment(&quot;log&quot;);      long start = System.currentTimeMillis();      listAllFile(filePath);      long stop = System.currentTimeMillis();      System.out.println(&quot;zip done，time：&quot; + (stop - start) / 1000 + &quot;s&quot;);    &#125; catch (FileNotFoundException e) &#123;      e.printStackTrace();    &#125; finally &#123;      IOUtils.closeQuietly(zos, is);    &#125;  &#125;  /**   * 循环遍历当前文件夹下的所有文件，使用递归   */  private void listAllFile(String filePath) &#123;    File file = new File(filePath);    if (file.exists()) &#123;      File[] files = file.listFiles();      if (files == null) &#123;        System.out.println(&quot;folder is null&quot;);      &#125; else &#123;        for (File file2 : files) &#123;          if (file2.isDirectory()) &#123;            listAllFile(file2.getAbsolutePath());          &#125; else &#123;            String file3 = file2.getAbsolutePath();            try &#123;              is = new FileInputStream(file3);              //在zip压缩包当中出现的文件名              String name = file3.substring(lastIndexOf, file3.length());              System.out.println(&quot;name:&quot; + name);              zos.putNextEntry(new ZipEntry(name));              int temp;              int bufferSize = 1024 * 5;              byte[] buffer = new byte[bufferSize];              while ((temp = is.read(buffer, 0, bufferSize)) != -1) &#123;                zos.write(buffer, 0, temp);                zos.flush();              &#125;            &#125; catch (IOException e) &#123;              e.printStackTrace();            &#125;          &#125;        &#125;      &#125;    &#125;  &#125;  /**   * 解压文件   *   * @param filePath 压缩文件所在目录   * @param newPath 想解压到那个目录   */  private void unZipFile(String filePath, String newPath) &#123;    //压缩文件所在的父目录    String oldPath = new File(filePath).getParentFile().toString();    File outFile;    ZipInputStream zipInputStream = null;    OutputStream outputStream = null;    InputStream inputStream = null;    ZipEntry zipEntry;    try &#123;      ZipFile zipFile = new ZipFile(filePath);      zipInputStream = new ZipInputStream(new FileInputStream(filePath));      while (null != (zipEntry = zipInputStream.getNextEntry())) &#123;        System.out.println(&quot;解压缩&quot; + zipEntry.getName() + &quot;文件。&quot;);        //newPath为空就代表解压在当前目录        if (&quot;&quot;.equals(newPath) || newPath.isEmpty()) &#123;          outFile = new File(oldPath + zipEntry.getName());        &#125; else &#123;          //防止传入的目录不存在          File file = new File(newPath);          if (!file.exists()) &#123;            file.mkdir();          &#125;          outFile = new File(newPath + File.separator + zipEntry.getName());        &#125;        //判断当前文件路径是否存在，不存在就创建        buildFile(outFile);        inputStream = zipFile.getInputStream(zipEntry);        outputStream = new FileOutputStream(outFile);        int temp;        int bufferSize = 1024 * 5;        byte[] buffer = new byte[bufferSize];        while ((temp = inputStream.read(buffer, 0, bufferSize)) != -1) &#123;          outputStream.write(buffer, 0, temp);        &#125;      &#125;    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125; finally &#123;      IOUtils.closeQuietly(inputStream, outputStream, zipInputStream);    &#125;  &#125;  /**   * 判断文件是否存在，不存在创建   */  private static void buildFile(File file) &#123;    if (!file.exists()) &#123;      File parent = file.getParentFile();      if (parent != null &amp;&amp; !parent.exists()) &#123;        parent.mkdirs();      &#125;      try &#123;        file.createNewFile();      &#125; catch (IOException e) &#123;        e.printStackTrace();      &#125;    &#125;  &#125;&#125;","categories":["java"],"tags":["java","解压"]},{"title":"Java对象的一生 | 从new到被回收","url":"/20190408-Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E7%94%9F/","content":"一、出生过程这里讲述的是第一次出生的过程，即之前class没有被加载。\n1.1 类初始化1.1.1 加载1.1.1.1 通过类的全限定名获取定义此类的二进制字节流(可以从zip包、网络、运行时动态生成);1.1.1.2 将这个字节流所代表的静态存储结构转化为方法去运行时数据结构;1.1.1.3 在内存(方法区)中生成一个代表这个类的java.lang.Class对象，作为方法区这个类各种数据访问的入口;\n1.1.2 验证1.1.2.1 文件格式验证1.1.2.1.1 魔数是否以0xCAFEEBABE开头(咖啡宝贝)1.1.2.1.2 主、次版本号是否在当前虚拟机处理的范围之内(不同的jdk版本编译出来的版本不一致，可向前兼容)1.1.2.1.3 常量池是否有不被支持的类型(检查常量tag标志)1.1.2.1.4 指向常量的各种索引值是否指向不存在或者不符合类型的常量1.1.2.1.5 CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据1.1.2.1.6 Class文件中各个部分以及文件本身是否有被删除或者附加的其它信息…这些操作是为了确保Class文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身安全\n1.1.2.2 元数据验证1.1.2.2.1 是否有父类(Object除外)1.1.2.2.2 是否继续了不允许继承的类(被final修饰的)1.1.2.2.3 如果当前不是抽象类，是否实现了其父类或接口中要求实现的所有方法1.1.2.2.4 类中的字段、方法是否与父类产生矛盾(如覆盖父类final字段、不合法的重载)这些操作是对字节码进行语义分析，确保符合Java语言规范要求\n1.1.2.3 字节码验证1.1.2.3.1 确保操作数栈的数据类型与指令代码序列能完美配合(反例：操作数栈为int，使用的时候按long加载)1.1.2.3.2 确保跳转指令不会跳转到方法体以外的字节码指令上1.1.2.3.3 确保方法体重点类型转换是有效的这些操作主要是通过数据流和控制流分析，确定程序的语义是合法的、符合逻辑的。JDK1.6之后有一个优化，利用StackMapTable来验证是否合法\n1.1.2.4 符号引用验证1.1.2.4.1 符号引用中通过字符串描述的全限定名是否能找到对应的类1.1.2.4.2 符号引用中的类、字段、方法是否可以被当前类访问在将符号引用转化为直接引用的时候触发符号引用验证\n\n1.1.3 准备1.1.3.1 仅为类变量分配内存，并且赋值为初始值，例如int为0(被static修饰的)1.1.3.2 特殊情况，被final修饰的static变量会直接赋值为代码给定的值准备阶段是正式为类变量分配内存并设置类变量初始值，这些变量所使用的内存都将在方法区中进行分配。\n1.1.4 解析虚拟机将常量池中的符号引用替换为直接引用符号引用：一组用来描述所引用目标的符号，所引用的目标不一定在内存中直接引用：直接指向目标的指针、相对偏移量、能间接定位到句柄，直接引用的目标必须在内存中存在\n1.1.5 初始化&lt;client&gt;()方法：由编译器自动收集类中所有变量的赋值动作和静态语句块(static{}块)中的语句合并产生  按顺序收集。父类的此方法先执行，虚拟机会保证线程安全真正开始执行类中定义的Java代码，\n1.2 类实例化(New)1.2.1 分配内存：在类初始化完成之后，能知道所需要的内存大小指针碰撞：内存规整的，中间指针划分已用、空闲，那么分配就是指针向空闲一方移动对象大小相等的距离空闲列表：内存不规整，用列表维护一个可用内存地址，从列表中找出一个合适大小的空间分配给实例\n1.2.2 初始化为0值1.2.3 设置对象头信息1.2.4 执行&lt;init&gt;()方法，按照程序员的意思给对象赋值&lt;init&gt;()方法：实例构造器\n类的初始化是指类加载过程中的初始化阶段对类变量按照程序猿的意图进行赋值的过程；类的实例化是指在类完全加载到内存中后创建对象的过程。\n二、生平事迹听候线程的指令，执行相关方法\n三、驾鹤西去可达性分析算法：从GC Root节点开始向下搜索，搜索所走过的引用链为引用链，当没有任何引用链时说明对象不可达经历过两次不可达标记才会被标记为可回收堆内存回收主要发生在堆上的新生代，为Minor GC，使用的是复制算法新生代分为：Eden、to Survivor、from Survivor，后两者为Survivor，三者的比例为8:1:1\n在Minor GC之前，to Survivor为空，对象存在：Eden、from Survivor在Minor GC执行Eden存活着的对象拷贝到to Survivor，同一时候对象年龄+1\nfrom Survivor区中的幸存对象会考虑对象年龄假设年龄没达到阈值，对象依旧拷贝到to survivor中假设对象达到阈值那么将被移到老年代\n复制阶段完毕后，Eden和from幸存区中仅仅保存死对象，能够视为清空假设在复制过程中to幸存区被填满了，剩余的对象将被放到老年代\n在Minor GC之后from survivor和to survivor会调换一下名字，下次Minor GC时，to survivor变为from Survivor\n四、参考连接\n《深入理解Java虚拟机》\n一个Java Class自述短暂的一生\n一切皆对象：论对象的一生一世\nJava对象的生命周期与垃圾回收以及四种引用\nJava new一个对象的过程中发生了什么\n\n目前写的不是太完善，有机会写的透彻明白一些。\n","categories":["java"],"tags":["java"]},{"title":"Java基本数据类型 - 以及相关内容","url":"/20170210-Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"\n\n\n类型名称\n关键字\n占用内存\n取值范围\n包装类\n\n\n\n字节型\nbyte\n1\n-128~127\nByte\n\n\n短整形\nshort\n2\n-32768~32767\nShort\n\n\n整形\nint\n4\n-2147483648～2147483647\nInteger\n\n\n长整形\nlong\n8\n-9223372036854775808L ~ 9223372036854775807L\nLong\n\n\n单精度浮点\nfloat\n4\n-3.4E38～3.4E38(6~7个有效位)\nFloat\n\n\n双精度浮点\ndouble\n8\n-1.7E308～1.7E308(15个有效值)\nDouble\n\n\n字符型\nchar\n2\nISO单一字符集，其表示范围是0～65535\nCharater\n\n\n布尔型\nboolean\n1\ntrue 或 false\nBoolean\n\n\n\n所有基本数据类型的大小(所占用的字节数)都是明确规定好的，\n在各种平台上都保持不变，这一特性有助于提高Java程序的可移植性。\n\n\n\n引用数据类型包括字符串、数组、类和接口。\n引用数据类型是用户自定义、用来限制其他数据类型。\n引用数据类型的变量在内存中存储的是数据的引用，并不是数据本身，\n引用类型是使用间接方法去获取数据\n\njava中int为什么占用4个字节？\n回答1：\n现在流行的编译器，都是规定的int是四个字节～\n像tc这样老版的编译器，int才是两个字节，\n然后也是一样，由于一个字节占八位，最高为符号位，又人为规定，1000000000000000……这个补码编码为-2^31所以，范围就是-2^31~2^31-1\n回答2：\nJAVA是采用Unicode编码。每一个字节占8位。\n你电脑系统应该是32位系统(工具)，这样每个int就是 4个字节\n其中一个字节由8个二进制位组成\n回答3：\nint常见为4个字节，跟操作系统有关系。\nturbo c（以及Turbo c的一些衍生编译器，他们用的一套编译程序）是dos时代的编译器，\n是上世纪80年代的产物，严重过时，属于老掉牙的产品，\n他们编译出来的程序是16位操作系统dos下的程序，所以长度为16位，即两个字节。\nwindows为了兼容dos，所以turbo c生成的文件也可以在windows中运行。\n其他一般就都是4个字节了。\n操作系统16位的时候，int 2字节，操作系统32位的时候，int 4字节，由于32位系统之前占主流地位，实际现在就算是64位系统，出于兼容性考虑，int也是4字节的\n\n","categories":["java"],"tags":["java"]},{"title":"Java开发的一点思考","url":"/20170226-Java%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/","content":"目前的形式来说java后台市场还是挺大，虽然也有很多python和php的系统。\n要想从事企业级的项目开发，你必须掌握如下要点：\n\n掌握项目开发的基本步骤\n具备极强的面向对象的分析与设计技巧\n掌握用例驱动、以架构为核心的主流开发方法\n\n没有人愿意自己一辈子就满足于掌握了一些代码实现的技巧，\n别人告诉你要实现什么，你就用代码堆砌来实现别人的要求！\n你必须学会从整个项目的角度去思考！\n你必须学会假如你是项目经理，你该如何思考！\n你必须学会假如你是架构师，你该如何思考！\n你必须掌握针对某个特定问题领域的分析方法！\n关于基础知识：\nJavaSE\n基本语法、数据类型、操作符等：int、long、Integer、Long、if、else、for、while\n面向对象：class（类）、Object（对象）、instance（实例）、state（状态）、behavior（行为）、field、method、new、可见性（访问控制）、attribute、property、package、import、static variable、class variable、instance variable、heap、method area、stack、GC（垃圾回收）、override、overload、对象转型(casting)、多态、this、super\n异常处理：理解编译期错误和运行期错误的区别、Exception、RuntimeException、checked exception、unchecked exception、try、catch、finally、throw new XXXException、throws XXXException、异常处理的基本原则\n数组与集合：数组的定义和使用方法、Collection、List、Set、Map、ArrayList、HashSet、HashMap、Iterator、equals、hashCode、Comparable、Comparator\n常用类：String、intern、常量池、StringBuffer、java.util.Date、SimpleDateFormat、Regex（正则表达式）\n反射机制：Class、Method、Field、invoke、newInstance、BeanUtils（apache-commons）、PropertyUtils（apache-commons）\n输入输出流：InputStream、OutputStream、Reader、Writer、Adapter设计模式与原始流类、Decorator设计模式与包装流类、对象序列化和反序列化\n多线程：Thread、Runnable、sleep、wait、notify、synchronized、lock\n\nServlet和JSP\nHttpServlet、doGet、doPost、HttpServletRequest、HttpServletResponse、request.getParameter()、request.setAttribute()、request.getAttribute()、request.getSession()、ServletContext、Filter、web.xml、tomcat、forward与redirect、http协议的无状态性、cookie、JSP Scope Object、&lt;c:out …&#x2F;&gt;、&lt;c:forEach …&gt;\n\nHTML与JavaScript:你需要能够理解常见的网页标签、理解在网页中引入JavaScript的方法、以及JavaScript的基本语法与使用方法\n\n\n以上，就是你进一步学习Java所必备的基本知识。\n特别是一些个专业术语和名词，看到这些名词，如果你像看到亲爹一样亲切，\n那么说明你对Java的基础知识就很熟悉了,记住，仅仅是熟悉了\n接下来是SSH对于初学者来说，这三大框架被赋予了太多神秘的色彩，似乎它们是重中之重的知识！但是对于拥有多年Java开发经验的专业技术人员来说，对于那些Java牛人来说，却对这三大框架不太感冒！难道它们不重要吗？\n现在很多企业都在用这三大框架，所以很多企业也把掌握这三大框架作为招聘的必备条件。不可否认的是，也有很多大型企业没有用这三大框架，这些企业经过多年发展，自身已经有一定的技术积累，也形成了自己独特的技术框架体系。这三大框架既可以说很重要，也可以说不重要。\n说重要的原因在于：这三大框架对JavaEE开发中所存在的普遍的问题，提供了优美的解决方案，它们蕴含了这个行业中最NB的开发人员的努力和想法，所以，学习这三大框架，你就可以窥探到这些处于技术巅峰的牛人们究竟对一个问题是怎么想的，通过一种什么样的设计思路去解决问题的。所以，对于你来说，你没有太多项目开发的经验，经验是什么？经验就是你知道可能会遇到哪些问题，针对哪个问题可以有哪些解决方法，在某个情景下，哪种解决方法是较好的，哪种方法不太好等等！如果你没做过什么项目，你根本就不会去意识到你可能会遇到哪些问题，而这些问题往往又是非常关键的！解决得不好，会影响到你的程序的稳定性、可扩展性等等！三大框架就给初学者提供了了解你以后可能会遇到哪些问题，以及针对这些问题的解决方案！\n当你了解了这三大框架为什么是重要的，那么你也就能理解，为什么这三大框架也可以说是不重要的。如果你曾经开发过很多项目，你碰到了各种各样的问题，凭着你的技术功底，逐个击破了这些问题，在这些人眼里，三大框架（是不是还有N个框架？呵呵）都是浮云！\n你属于哪一种人呢？如果你没有太多项目开发经验，那么三大框架对于你来说就是非常重要的！而且，由此你也知道了该怎么去学这三大框架。对于三大框架的学习而言，着力点在于给你展示问题，并触发你自己主动的思考，我们鼓励你提出自己的想法，也许你的想法很白痴，但那毕竟是你自己的想法，如果你不知道牛人的想法，那你怎么知道自己的想法是很白痴的呢？在这种思想的碰撞过程中，你就会逐渐提高自己！所以，三大框架学完之后，你不应该只是看到一大堆配置文件，你不应该只是看到了一些Action，一些Service，一些映射文件，你不应该只知道session.save&#x2F;update&#x2F;delete，你不应该只是知道struts2中有一堆interceptor，你不应该只是看到一堆jar包……\n如果你只是知道拷贝一堆jar包，定义一系列配置文件之后，SSH三大框架就能够运行起来了，也可以给你干活了，那么，很悲哀的是，**你仍然没有掌握三大框架的精粹！**请你回答以下问题：\n\nStruts2：\n\n为什么每次请求都要创建一个Action对象？\nModelDriven拦截器的配置中refreshModelBeforeResult解决了什么问题？\n为什么在web.xml中配置的StrutsPrepareAndExecuteFilter要过滤所有的请求？\n请你给我谈谈ValueStack？\nStruts2是如何实现MVC设计模式的？\n\n\nSpring：\n\n你为什么要用Spring？\n请你聊一聊IOC&#x2F;DI？\n什么是声明式的事务管理？为什么要使用声明式的事务管理？Spring如何实现声明式的事务管理？\n把spring和hibernate集成，定义事务管理特性的时候，为何要将除了添加、删除、更新操作之外的方法，即主要执行查询任务的方法定义为read-only？\n\n\nHibernate：\n\n请你谈谈你对ORM映射的理解？\n很多人说Hibernate不适合大项目，性能有问题，你是如何理解的？\nHibernate为什么一定要定义一个数据库标识？\n为什么Hibernate建议你的实体类实现hashCode和equals方法？\n谈谈你对Hibernate实体类中的数据库标识与数据库主键之间关系的认识？\n谈谈你对Hibernate关联映射与数据库外键之间关系的认识？\n调用session.save()方法，hibernate一定会发出insert语句吗？谈谈你的理解\n调用session.update()方法，hibernate一定会发出update语句吗？谈谈你的理解\n请你聊一下以下名词、概念或用法：lazy、lazy&#x3D;”extra”、inverse、fetch、fetch&#x3D;”join”、fetch&#x3D;”subselect”、batch-size\n配置了lazy&#x3D;”true”一定会实现懒加载吗？\n请你谈谈Hibernate中的“N+1”问题\n请你谈谈Hibernate有哪些最佳实践？\n\n以上并非SSH中全部重点的问题，但它们能考察你能否灵活运用SSH框架！如果你能深刻理解这些问题，再配以合适的实战项目训练，你也会逐渐成为牛人！\n最后是项目开发能力 ##：不管你是学Java还是别的技术，你的根本目的在于给客户创造价值！否则，你下大力气学习的东西，随着技术的进步和更新，很快就会过时！所以，技术的核心在于用技术创造有价值的成果！也就是说，客户需要什么，你就要用技术把客户需要的东西给他造出来！一个公司之所以要用各种福利条件极力挽留你，是因为你能够给公司带来极高的利益！那么，你有什么可以给公司利用的呢？公司最看重你的哪方面的能力呢？\n做项目需要的能力很多，其中最核心最基础的就是建模能力（现在最主流的就是面向对象建模！）。什么是建模能力呢？\n\n我给大家一个面试题：一个保险公司的保险卡管理模块：销售人员领取保险卡信息（保险卡数量、卡号、领取日期），然后直接销售给客户，销售完毕后，将保险卡信息录入保险公司系统内部（销售人员信息、购买人信息、购买的保险卡数量、卡号等），客户登录保险公司网站激活保险卡，需要填写（保险卡卡号、激活密码、被保险人信息、受益人信息）\n要求就是：如果这个模块交给你来做，你要怎么做？你要解决哪些问题？你可否画个图，给我描述一下你的想法是什么吗？\n这只是一个面试题而已，因为只有简单几句话，所以我把它放到这里，让大家感受一下所谓建模要解决什么问题。而业务领域的问题实在是太多了！也许一个几十上百页的需求文档才能把某个业务领域的问题描述清楚，而你的职责就是要把它们实现出来！\n某个公司要开发一个考勤管理系统，要求与现有的人力资源系统对接，你是主要的技术负责人，那么，你要做哪些工作呢？\n某ERP项目要实现一个排班管理模块，交给你去完成，你如何去完成呢？\n\n不要抱怨项目经理给你的信息太少（只有几句话），不要抱怨客户没有描述清楚他们的需求……你的价值就在于理顺所有的问题，用各种手段获得你想要的信息，按照一定的思路汇总，并在特定的时间里逐个解决它！\n你应该意识到学Java不是一个坦克大战、一个网络飞车、一个CMS、一个DRP、一个OA那么简单，你不要沉迷于那些技术细节（虽然也是有必要的，但不要钻牛角尖），不要满足于实现了CRUD式的项目需求（虽然这是基础中的基础），在你的前方，永远有一个目标在那里，需要你去努力追赶！  \n今后你将面对更加繁杂的需求，你学习项目的唯一目的，就是：学习如何将需求转化为实现，如何对需求进行分析，如何建立概念模型，如何理顺各种概念之间的关系，如何进行设计，如何选择合适的技术来实现你的设计方案，如何对你的实现进行测试，如何解决你所遇到的形形色色的问题（性能、需求变更等）。当你真正到公司里面从事了几年开发之后，你就会同意我的说法！\n\n利用Java找工作，需要的就是项目经验，项目经验就是理解项目开发的基本过程，理解项目的分析方法，理解项目的设计思路，理解项目的实现技巧，理解项目的测试方法，理解项目中各种问题的解决方案。\n\n码农只是复制粘贴，并不注重原理，说不出所以然，所以做了几年还只能是码农。\n加油，共勉！\n","categories":["java"],"tags":["java"]},{"title":"Java获取股票信息 - java获取股票信息接口","url":"/20170427-Java%E8%8E%B7%E5%8F%96%E8%82%A1%E7%A5%A8%E4%BF%A1%E6%81%AF%20-%20java%E8%8E%B7%E5%8F%96%E8%82%A1%E7%A5%A8%E4%BF%A1%E6%81%AF%E6%8E%A5%E5%8F%A3/","content":"用下面的接口获取股票的数据\nsh:代表上海市场\nsz:代表深圳市场\n后面是加上股票代码，这是因为上海和深圳的股票代码有重复的\nhttp://hq.sinajs.cn/list=sh600877\n返回的信息\nvar hq_str_sh600877=&quot;中国嘉陵,6.340,6.400,6.360,6.470,6.210,6.340,6.350,15012913,95227966.000,56500,6.340,12100,6.330,16100,6.320,17500,6.310,47400,6.300,13600,6.350,11300,6.360,32400,6.370,39100,6.380,41200,6.390,2017-04-27,15:00:00,00&quot;;\n有效信息为引号里面的数据\n下面的数字代表分割数组后所在的下标\n下面是数据字段对应的含义\n源代码：GetStockInformation.java\n表格如下：\n\n\n\n\n\n位置\n含义\n测试数据\n\n\n\n0\n股票名字\n中国嘉陵\n\n\n1\n今日开盘价\n6.340\n\n\n2\n昨日收盘价\n6.400\n\n\n3\n当前价格\n6.360\n\n\n4\n今日最高价\n6.470\n\n\n5\n今日最低价\n6.210\n\n\n6\n买一报价\n6.340\n\n\n7\n卖一报价\n6.350\n\n\n8\n成交数量(百股)\n15012913\n\n\n9\n成交金额(元)\n95227966.000\n\n\n10\n买一数量(股)\n56500\n\n\n11\n买一报价\n6.340\n\n\n12\n买二数量(股)\n12100\n\n\n13\n买二报价\n6.330\n\n\n14\n买三数量(股)\n16100\n\n\n15\n买三报价\n6.320\n\n\n16\n买四数量(股)\n17500\n\n\n17\n买四报价\n6.310\n\n\n18\n买五数量(股)\n47400\n\n\n19\n买五报价\n6.300\n\n\n20\n卖一数量(股)\n13600\n\n\n21\n卖一报价\n6.350\n\n\n22\n卖二数量(股)\n11300\n\n\n23\n卖二报价\n6.360\n\n\n24\n卖三数量(股)\n32400\n\n\n25\n卖三报价\n6.370\n\n\n26\n卖四数量(股)\n39100\n\n\n27\n卖四报价\n6.380\n\n\n28\n卖五数量(股)\n41200\n\n\n29\n卖五报价\n6.390\n\n\n30\n当前日期\n2017-04-27\n\n\n31\n当前时间\n15:00:00\n\n\n32\n未知\n00\n\n\n","categories":["java"],"tags":["java"]},{"title":"Java调用有道翻译接口 - 免费翻译API","url":"/20180712-Java%E8%B0%83%E7%94%A8%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%E6%8E%A5%E5%8F%A3-%E5%85%8D%E8%B4%B9%E7%BF%BB%E8%AF%91API/","content":"这个接口为免费的\n一、接口地址等号后面的为需要翻译的英文\nhttp://fanyi.youdao.com/openapi.do?keyfrom=xinlei&amp;key=759115437&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q=hisen\n\n二、代码样例把全世界200+国家和地区的名字翻译为英文，并且入库\n@AutowiredSmsCountryService countryService;@Testpublic void updateZhName()&#123;  // 有道翻译接口  String url = &quot;http://fanyi.youdao.com/openapi.do?keyfrom=xinlei&amp;key=759115437&amp;type=data&amp;doctype=json&amp;version=1.1&amp;q=&quot;;  // 查询出所有的英文国家名字  List&lt;SmsCountry&gt; countries = countryService.queryAllName();  // httpclient  CloseableHttpClient client = HttpClientBuilder.create().build();  // 翻译每个国家的名字，并且更新数据库  for (SmsCountry country:countries) &#123;    HttpGet request = new HttpGet(url + URLEncoder.encode(country.getName()));    try &#123;      CloseableHttpResponse response = client.execute(request);      String str = EntityUtils.toString(response.getEntity(), &quot;utf-8&quot;);      JSONObject jsonObject = JSON.parseObject(str);      // 取出json字符串中数组的值      String s = (String) jsonObject.getJSONArray(&quot;translation&quot;).get(0);      System.out.println(&quot;&gt;&gt;&gt;&gt;&gt; &quot; + s);      if (!StringUtil.isEmpty(s))&#123;      SmsCountry smsCountry = new SmsCountry();      smsCountry.setId(country.getId());      smsCountry.setNameZh(s);      countryService.updateNameById(smsCountry);      &#125;    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125;  &#125;&#125;\n","tags":["java"]},{"title":"Java静态代码块","url":"/20170211-Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/","content":"有时候重新回味一下以前的知识也很美妙\n总能发现以前自己没有怎么在意的细节\n\n静态代码块是在类中独立于类成员的static语句块，可以有多个。\n如果要初始化静态变量，可以声明一个静态块。\n格式如下：\nstatic &#123;\t//块执行代码&#125;\n\n静态块存在单独的内存中，仅在该类被加载时执行，示例如下：\npackage com.hisen.javaGaiShu.page91test20;public class JingTaiDaiMaKuai &#123;\tprivate static String a;\tprivate String b;\tstatic &#123;\t\tJingTaiDaiMaKuai.a = &quot;我学习了很多语言&quot;;\t\tSystem.out.println(a);\t\tJingTaiDaiMaKuai t = new JingTaiDaiMaKuai();\t\tt.fina();\t\tt.b=&quot;Java语言&quot;;\t\tSystem.out.println(t.b);\t&#125;\tstatic &#123;\t\tJingTaiDaiMaKuai.a = &quot;I Love Java&quot;;\t\tSystem.out.println(a);\t&#125;\tpublic static void main(String[] args) &#123;\t&#125;\tstatic &#123;\t\tJingTaiDaiMaKuai.a = &quot;我还将继续学习下去&quot;;\t\tSystem.out.println(a);\t&#125;\tprivate void fina() &#123;\t\tSystem.out.println(&quot;但是我最喜欢的是：&quot;);\t&#125;&#125;\n\n\n输出如下：\n\n我学习了很多语言但是我最喜欢的是：Java语言I Love Java我还将继续学习下去\n\n静态代码块在运行main方法时可以直接调用而不用创建实例。\n静态代码块直接是按顺序执行的。\n","categories":["java"],"tags":["java","练习"]},{"title":"Jedis - Software caused connection abort:recv failed","url":"/20170411-Jedis%20-%20Software%20caused%20connection%20abort%20recv%20failed/","content":"在使用jedis的时候出现这个问题：\nredis.clients.jedis.exceptions.JedisConnectionException:java.net.SocketException:Software caused connection abort: recv failed\n我是windows上java运行，然后redis是在虚拟机的，通过映射访问\n解决办法：编辑redis配置文件：\nsudo vi /etc/redis/redis.conf\n找到\nbind 127.0.0.1\n改成\nbind 0.0.0.0\n改完之后重启redis\nservice redis restart\n即可。这跟mysql一样，允许任何ip连接！\n","categories":["java"],"tags":["jedis","redis"]},{"title":"Linux 日志分析出现次数前10的数据 | awk sort uniq","url":"/20190410-Linux-log-analyze-top-10/","content":"一、命令组合$ more sort.log | awk &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -k1nr | head -3   4 5   3 1   2 2\n\n二、命令详解more：一次读取少量的数据，避免一次性载入大文件，比cat好些awk ‘{print $1}’：以awk默认的分隔符，并且打印第一列sort：把上一步的结果按ASCII排序uniq -c：如果重复那么计数，uniq命令可以组合很多其它参数sort -k1nr：根据第一列的数据进行排序，n是按数值大小排序，r是倒序排序head -3：显示前面三行数据\n三、原始数据\n$ cat sort.log123456112345556\n","categories":["linux"],"tags":["linux"]},{"title":"Linux|mac查找目录下文件内容中包含某字符串的命令","url":"/20180712-Linux-mac%E6%9F%A5%E6%89%BE%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8C%85%E5%90%AB%E6%9F%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%91%BD%E4%BB%A4/","content":"grep -r hisen ./\n上面这条命令。直接查找当前目录下所有内容中包含 hisen 的文件\n"},{"title":"Linux安装tree命令 - apt-get install tree","url":"/20170503-Linux%E5%AE%89%E8%A3%85tree%E5%91%BD%E4%BB%A4%20-%20apt-get%20install%20tree/","content":"目前debian系列的系统都无法使用apt-get install tree来安装tree命令\n以下是安装步骤\n#下载（官网为：http://mama.indstate.edu/users/ice/tree/）wget http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz#解压tar -zxvf tree-1.7.0.tgz#进入目录cd tree-1.7.0#安装sudo make install#完毕\n最简单的使用方法，在目录下输入：tree\n使用效果\nhisen@ubuntu:~/dl$ tree.├── hisen.log├── master└── test_db-master    ├── Changelog    ├── employees_partitioned_5.1.sql    ├── employees_partitioned.sql    ├── employees.sql    ├── images    │   ├── employees.gif    │   ├── employees.jpg    │   └── employees.png    ├── load_departments.dump    ├── load_dept_emp.dump    ├── load_dept_manager.dump    ├── load_employees.dump    ├── load_salaries1.dump    ├── load_salaries2.dump    ├── load_salaries3.dump    ├── load_titles.dump    ├── objects.sql    ├── README.md    ├── sakila    │   ├── README.md    │   ├── sakila-mv-data.sql    │   └── sakila-mv-schema.sql    ├── show_elapsed.sql    ├── sql_test.sh    ├── test_employees_md5.sql    └── test_employees_sha.sql3 directories, 26 files\n使用参数\ntree命令行参数：-a 显示所有文件和目录。-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。-C 在文件和目录清单加上色彩，便于区分各种类型。-d 显示目录名称而非内容。-D 列出文件或目录的更改时间。-f 在每个文件或目录之前，显示完整的相对路径名称。-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot;号。-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。-i 不以阶梯状列出文件或目录名称。-I 不显示符合范本样式的文件或目录名称。-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。-n 不在文件和目录清单加上色彩。-N 直接列出文件和目录名称，包括控制字符。-p 列出权限标示。-P 只显示符合范本样式的文件或目录名称。-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。-s 列出文件或目录大小。-t 用文件和目录的更改时间排序。-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n","categories":["linux"],"tags":["linux"]},{"title":"Linux常用的几个命令","url":"/20170122-Linux%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/","content":"1、查看日志最后几行\ntail -100 /access.log\n2、进入目录相关\n#进入一个目录root@hisenyuan:/# cd /home/wwwlog/#进入当前目录下的www.google.com目录root@hisenyuan:/home/wwwlog# cd ./www.google.com#进入父目录root@hisenyuan:/home/wwwlog/www.google.com# cd ../#进入linux系统根目录root@hisenyuan:/home/wwwlog# cd /#根目录root@hisenyuan:/#\n3、看倒数多少行\n#看倒数10行tail -10 /filepath/filename#看行数外加过滤含有指定字符的行tail -10 access.log | grep -v &quot;yourstring&quot;\n4、过滤特定行，保存结果到新文件\ncat /root/old.text | grep -v &quot;yourstring&quot;&gt; /root/new.text\n","tags":["java","linux"]},{"title":"List<Object> 去重 | List对象去重 by java8 stream & lambda","url":"/20180712-List-Object-%E5%8E%BB%E9%87%8D-List%E5%AF%B9%E8%B1%A1%E5%8E%BB%E9%87%8D-by-java8-stream-lambda/","content":"利用java8的流和lambda表达式能很方便的对list对象进行去重而且不会造成代码入侵\n插播：Java8 对List进行求和、分组、提取对象单个属性：https://www.jianshu.com/p/c71eaeaaf30c\n下面的例子仅供参考github：https://github.com/hisenyuan\npackage com.hisen.collection.list.duplicate;import com.alibaba.rocketmq.shade.com.alibaba.fastjson.JSON;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ConcurrentHashMap;import java.util.function.Function;import java.util.function.Predicate;import java.util.stream.Collectors;/** * @author hisenyuan * @time 2018/4/19 14:06 * @description list对象根据属性去重 lambda + stream */public class ListDuplicateTest &#123;    public static void main(String[] args) &#123;        List&lt;Person&gt; list = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 100; i++) &#123;            Person person = new Person();            person.setAge(10);            person.setName(&quot;hsien&quot;);            person.setWeight(i);            list.add(person);        &#125;        Person bean = new Person();        bean.setName(&quot;hisenyuan&quot;);        bean.setAge(33);        bean.setWeight(65);        list.add(bean);        List&lt;Person&gt; collect = list.stream().filter(distinctByKey(Person::getName))                .collect(Collectors.toList());        System.out.println(JSON.toJSONString(collect));    &#125;    /**     * 函数式接口 T -&gt; bollean     * @param keyExtractor     * @param &lt;T&gt;     * @return     */    public static &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, ?&gt; keyExtractor) &#123;        ConcurrentHashMap&lt;Object, Boolean&gt; map = new ConcurrentHashMap&lt;&gt;(16);        return t -&gt; map.putIfAbsent(keyExtractor.apply(t),Boolean.TRUE) == null;//        这个也可以，不过感觉效率要低一些，线程不是那么安全//        Set&lt;Object&gt; seen = ConcurrentHashMap.newKeySet();//        return t -&gt; seen.add(keyExtractor.apply(t));    &#125;    /**     * 内部类     */    static class Person &#123;        private int age;        private String name;        private int weight;        public int getAge() &#123;            return age;        &#125;        public void setAge(int age) &#123;            this.age = age;        &#125;        public String getName() &#123;            return name;        &#125;        public void setName(String name) &#123;            this.name = name;        &#125;        public int getWeight() &#123;            return weight;        &#125;        public Person() &#123;        &#125;        public void setWeight(int weight) &#123;            this.weight = weight;        &#125;    &#125;&#125;\n"},{"title":"回顾2019，展望2020","url":"/20191229-Looking-back-to-2019-looking-forward-to-2020/","content":"零、摘要20191.【完成】换一份合适的工作2.【完成】信息系统项目管理师3.【完成】坚持阅读，数量质量超过2018\n20201.羽毛球&#x2F;骑行&#x2F;等锻炼项目2.通过一项含金量较高的考试项目3.持续阅读&#x2F;5本华章CS&#x2F;其它不限4.深入了解公司内部组件&#x2F;知其所以然\n2019预料之中夹着惊喜，正反馈激励我前行。2020充实得度过每一天，有所追求有所进步。\n一、成长自己想要什么样的生活？\n\n最近几年一直在思考这两个问题如今已经慢慢勾勒出了自己想要的生活大概就是舒服的活着，向身边人学习，帮助他人成长，体现自己的社会价值(马斯洛需求层次理论的4~5之间)\n想清楚自己想要什么样的生活之后接下来就是给自己设定一系列目标例如：长期目标、5年规划、3年规划\n抛砖引玉：\n\n接触牛人，多和牛人交流取经&#x2F;询问适当的建议，以之为榜样\n保持好奇，对于自己不懂的技术或者其它任何事，各个角度去了解学习\n管理精力，提高单位时间的效率，乐于锻炼，锻炼的人一般都精力充沛\n持续学习，只有持续的投入系统的学习和总结方能保持竞争力\n保持敬畏，认真负责得处理好份内得每一件事，再考虑锦上添花的事情\n\n二、阅读全部书单从17年开始阅读量稍微上来一点到如今已经走过了快3个年头在阅读中观摩了不少他人的经历、接触了各种不同的思维方式、看了很多恍然大悟的见解、领略了技术的魅力有一句话说的不错：书是一面镜子，折射出一个人的方方面面翻越自己的书单，也能看到一个变化的过程，从兴趣开始，逐步转向个人提升以及对精神世界的追求目前发现不少的书籍内容有部分的”重叠”，所以有些书还是看的比较快，有些书值得重复阅读，特别是技术书\n2019 Top8 (非权威排行)《贫穷的本质》《重塑大脑，重塑人生》《领域驱动设计》(系列)《代码简洁之道:程序员的职业素养》《枪炮、病菌与钢铁:人类社会的命运》《可伸缩服务架构:框架与中间件》《Java并发编程的艺术》《深入理解Java虚拟机》\n三、生活关键字：绿植、养鱼、骑行、羽毛球、辣椒\n绿植和养鱼看书累了&#x2F;下班回家浇浇水赏赏鱼放空下自己挺好偶尔还会收获成长的喜悦、以及把控感\n骑行和羽毛球运动方面实际行动比较多的今年是羽毛球技术不咋地，野路子，打算2020培训下骑行看季节看队友，春秋时节郊区遛遛挺好\n辣椒作为一个江西人，应该是无辣不欢的体质，无惧新型社交绝症\n四、习惯2019起床：06:30午休：20分钟入睡：01:00\n2020起床：05:00午休：20分钟入睡：23:30\n起床热身，煮早餐，基本上八点半左右出门步行过程中耳机听互联网广播(目前是：36氪随身听)地铁上耳机切换至音乐模式看书(kindle&#x2F;纸书)2020走养生路线，早睡早起！中午看20分钟的书早上看约13小时晚上看书01小时\n关注周围的事情，了解动态，吸取营养，输出影响力\n五、随说\n每天花点时间冥想放松效果很好(多次)\n写字好处多，整理思绪、调整心情、集中注意力\n多给予正反馈、多微笑\n减少无效的时间开支(短视频&#x2F;垃圾新闻&#x2F;娱乐等性价比低的活动)\n做任何事情始于兴趣&#x2F;好奇&#x2F;压力，持续于正反馈(得到自己想要的&#x2F;有益的)\n把自己所见所学所想进行归纳总结，寻求内在的统一是一个很有趣的过程\n感谢遇到的人和事，做一个高度容错的系统，并且在错误中捞金\n想办法优化自己的思维方式(阅读&#x2F;取经&#x2F;经历)\n写博客&#x2F;发微博是一个自我总结和展示的有效途径(不一定要写多好)\n\n六、推荐\n科技爱好者周刊\n王垠\n彭博商业周刊(刊物)\n中国国家地里(刊物)\n36氪随身听(广播)\n\n","categories":["成长"],"tags":["总结"]},{"title":"回顾 2021，展望 2022","url":"/20220102-Looking-back-to-2021-looking-forward-to-2022/","content":"零、摘要回顾 2021\n【完成】换了一份不错的工作;\n【完成】坚持阅读，追求质量;\n【待办】运动量不够，锻炼偏少;\n\n展望 2022\n体重控制在 65Kg 以内，学会自由泳;\n持续阅读，技术与非技术书籍交替看，5 本基础书;\n深入理解公司内部技术栈、深入了解 2-3 条业务线;\n重新学习 Dubbo，学习设计理念，以及分布式系统架构;\n\n一、成长技术方面今年感觉成长不是太明显有所改变的是会深入洞察需求逐步完善设计之后开始 coding，而不是着急开始。\n对于技术底层也有一定地涉猎，更多地可能是在钻电商业务。\n\n二、阅读本年度阅读图书 38 本由于上半年部分时间在准备换工作以及 6 月份换了工作之后花在工作的时间比较多所以今年的阅读量下降地厉害，但是还是会坚持每天都翻几页\n收获较多的为以下几本：\n\n《置身事内》\n《幕后产品》\n《商业的本质和互联网》\n《曾国藩的正面与侧面》\n《分析与思考：黄奇帆复旦经济课》\n\n全部书单\n三、生活唯一的变化可能是多了 2 只鳄鱼龟。夜深人静之时，回到家，给乌龟喂食互动下也挺有意思。\n四、习惯下半年由于工作原因，晚睡较多，很少早起。需要找准自己的节奏，调节步伐，逐步早起。\n五、随说\n做个正常人，不做圣人;\n力所能及地帮助身边人;\n多关注家乡的教育和经济，有机会可以出一把力;\n\n六、推荐这些年能坚持下来的也就只有下面两个了~其它的可能不太适合长时间跟踪\n\n科技爱好者周刊\nGitHub 月度流行项目\n\n","categories":["成长"],"tags":["总结"]},{"title":"回顾 2023，展望 2024","url":"/20231231-Looking-back-to-2023-looking-forward-to-2024/","content":"零、摘要回顾 2023\n年初领证了~\n折腾了 1 个小型家用服务器\n工作上做了一个和 LLM 相关的项目\n工作上经历过 2 次领导较大的组织变动\nQ4 装修了小房子，目前折腾全屋智障中\n入职 2 年多经历了一次涨薪( 侮辱性普调 &#x3D;-&#x3D; )\n\n展望 2024\n工作上更上一层楼\n还清外债走向小康\n继续锻炼汇报总结能力\n继续运动，体重控制在 60kg\n学习&#x2F;沉淀方法论指导工作和生活\n\n一、成长\n第一次主导重要的项目后端开发工作，在项目管理&#x2F;LLM方面有更多的认识，也第一次正式使用 Golang 进行开发。做的好的地方：\n\n及时攻克了多个项目卡点。\n与多个方向的同学沟通协作比较顺畅。\n积极使用大模型来提升工作效率( 主要是 Golang 不太熟悉 )。\n在高压状态下，依然坚持合理的架构边界，保持较高的 CR 打回率。\n\n做的不足的地方：\n\n团队在磨合初期，得多当面沟通，毕竟文字信息传递的情绪不太好揣摩。\n作为项目负责人，高估了自己的时间，由于有很多需要沟通协调的事情，导致分配给自己的开发工作进度不及预期。\n没能及时把项目全局架构( 前&#x2F;后端、上下游 )，影响过程中沟通的效率，项目再忙也需要输出一个高层级的概念框架。\n\n二、阅读本年度阅读图书 25 本，不及预期。不及预期的主要原因是：\n\n装修准备，各种看功率\n装修之中，和工长斗智斗勇\nLLM 项目，时间紧任务重\n太懒，有很多时间没有利用上\n\n收获较多的为以下几本：\n\n《凤凰项目》小说形式描述一家公司 IT 运维相关的故事\n《小岛经济学》以故事的形式描述各种经济规律以及原理\n《以色列:一个民族的重生》巴以冲突之前看的，主要是想了解一下以色列为什么科技那么发达，但从中未找到答案\n《这才是心理学》心理学也是一门科学，但是很多时候被大众&#x2F;媒体给误解了\n《搞定系统设计》2021 年初版的书，中文版最近才出，设计的思路收益颇丰。推特上关注了作者，alex xu，画图有一手。\n\n全部书单\n三、生活3.1 龟缸两只鳄龟，剩下一只，长的特别巨大，还时刻想着越狱。每天出门之前会喂一点『寸金饲料』(不推荐，用主要是便宜)或者『冻干南极磷虾』\n3.2 鱼缸趴地矮珍珠多次爆缸，目前清理得仅剩一小撮。入了一颗水杨梅，目前生长比较正常。\n把尼特利 AT5 水草灯小黄鱼 268 出了，21年9月 724 入的。印象很深刻的一点就是，刚刚发布，立马就被下单买走了。唯一能解释的是，好东西出二手也方便一些。PS：之前有看到一句话很不错，每年都用最新款的东西，完事淘汰还能回血不少。\n3.3 全屋智能目前入手的有易来的灯、易来的凌动开关。绿米的智能开关(零火版)。小米中枢网关 + 小米多模网关 + 小米人体传感器2S。homeassistant  搭建中，目前仅做了 homekit 桥接。不推荐领普的人体存在传感器，比较拉胯，识别错误率较高。后续有机会开个帖子单独说说全屋智能(智障)\n3.4 HomeLab送走了 9020sff，迎来了 E5 双路服务器(详情：搭建我的第一台服务器 )。在推上看了不少大佬在折腾 HomeLab，而且图画的一个比一个好。最初是由 NAS 入坑的，后续折腾的话主要是那种上网。现在的就想着有空折腾的软硬件，顺便学点有用没用的知识。\n目前我的设备：\n\n群晖 DS918+ * 1\nE5 服务器 * 1\n2.5G 8口交换机 * 1\n玩客云 * 1\n无线宝 * 1\n\n四、习惯4.1 作息全年都是晚睡晚起，早晚的时间基本上浪费了。早上是 8 点左右起床中午一般午休 15min，看书 15min晚上是回家之后刷一会 new feeds\n\n不刷新闻+视频\n一般都是看看中文技术圈大佬们的动态\n\n4.2 运动\n【自行车】全年几乎没怎么骑，主要是没有合适的小伙伴，大家都忙\n【羽毛球】倒是执行的还不错，基本上能保证每周一次的频率，也有一定的进步\n【游泳】2022 年的买的次卡用完之后，几乎没怎么游\n\n五、随说\n参与了一次规模比较大的老乡座谈会，增加了不少看得见摸得着的榜样。\n座谈会上结对子环节，2 个北航的大一新生加了我。希望后续能定期交流。\n践行最小惊讶原则，你好我好大家好。\n及时给予正反馈&#x2F;负反馈(大部分人应该不怎么说负反馈)\n\n六、推荐能够坚持看下来的，目前就剩下科技爱好者周刊\n\n科技爱好者周刊\n\n","categories":["成长"],"tags":["总结"]},{"title":"MarkdownPad2注册码 20170213","url":"/20170213-MarkdownPad2%E6%B3%A8%E5%86%8C%E7%A0%81-20170213/","content":"MarkdownPad2注册码\n亲测有效：2017年2月13日 18:07:25\n\n邮箱：\nSoar360@live.com\n授权密钥：\n\nGBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==\n","categories":["soft"],"tags":["soft"]},{"title":"Maven目录下*.lastupdated命令行批量删除","url":"/20170220-Maven%E7%9B%AE%E5%BD%95%E4%B8%8B-lastupdated%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4/","content":"windows系统\ncd %userprofile%\\.m2\\repositoryfor /r %i in (*.lastUpdated) do del %i\n或者新建一个bat文件，批处理。就不用每次都在cmd敲命令了\n@echo offecho 确认删除maven仓库下*.lastUpdated文件？pause::create by hisenyuan(hisenyuan@gmail.com)::这里写你的仓库路径set REPOSITORY_PATH=C:\\hisenwork\\soft\\mavenecho 正在搜索...for /f &quot;delims=&quot; %%i in (&#x27;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#x27;) do (    del /s /q %%i)echo 完毕pause\nlinux系统\nfind /app/maven/localRepository -name &quot;*.lastUpdated&quot; -exec grep -q &quot;Could not transfer&quot; &#123;&#125; \\; -print -exec rm &#123;&#125; \\;","categories":["java"],"tags":["java","maven"]},{"title":"MongoDB - 简单操作 - CRUD - JAVA","url":"/20170711-MongoDB%20-%20%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%20-%20CRUD%20-%20JAVA/","content":"之前我记得写过简单的测试类，但是忘了，现在重新写一个\n顺便用博客记录下，mongodb系列应该会有几篇记录\n本篇具体代码：SampleMongoTestNo1.java\n1、环境介绍\nmongodb安装教程：点击查看\nDataBase：MongoDB V 3.2Driver　：3.4.1maven：    &lt;dependency&gt;      &lt;groupId&gt;org.mongodb&lt;/groupId&gt;      &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;      &lt;version&gt;3.4.1&lt;/version&gt;    &lt;/dependency&gt;\n２、初始化连接\nprivate Mongo mg = null;private DB db;private DBCollection dbCollection;@Beforepublic void initDB()&#123;  //建立连接  mg = new MongoClient(&quot;127.0.0.1&quot;,27017);  //获取要操作的数据库实例，没有会创建  db = mg.getDB(&quot;hisen&quot;);  //获取要操作的集合实例，没有会创建  dbCollection = db.getCollection(&quot;emp&quot;);&#125;\n3、关闭连接\n@After  public void destoryDB()&#123;    if (mg == null) &#123;      mg.close();      mg=null;      db=null;      dbCollection=null;    &#125;  &#125;\n4、CRUD操作\n\n/**   * 插入数据   */  @Test  public void testCreate()&#123;    DBObject obj = null;    for (int i = 1; i &lt;= 10; i++) &#123;      obj = new BasicDBObject(&quot;_id&quot;,i).append(&quot;name&quot;,&quot;hisen&quot;+i).append(&quot;age&quot;,i*5);      dbCollection.save(obj);    &#125;  &#125;  /**   * 查询所有   */  @Test  public void testReadAll()&#123;    DBCursor dbCursor = dbCollection.find();    while (dbCursor.hasNext())&#123;      System.out.println(dbCursor.next());    &#125;  &#125;  /**   * 修改记录   */  @Test  public void testUpdate()&#123;    BasicDBObject condition = new BasicDBObject(&quot;_id&quot;,10);    BasicDBObject res = new BasicDBObject(&quot;name&quot;, &quot;hisen10_new&quot;);    //若没有此语句，直接调用下面的语句，返回结果&#123; &quot;_id&quot; : 10 , &quot;name&quot; : &quot;hisen10_new&quot;&#125;    BasicDBObject res2 = new BasicDBObject(&quot;$set&quot;, res);    dbCollection.update(condition,res2);    System.out.println(dbCollection.findOne(new BasicDBObject(&quot;_id&quot;,10)));  &#125;  /**   * 删除记录   */  @Test  public void testDelete()&#123;    dbCollection.remove(new BasicDBObject(&quot;_id&quot;,10));    testReadAll();  &#125;  /**   * 根据主键查询   */  @Test  public void testReadOneWithId()&#123;    DBObject object = dbCollection.findOne(new BasicDBObject(&quot;_id&quot;,1));    System.out.println(object);  &#125;  /**   * 模糊查询 - 使用正则   */  @Test  public void testReadPuzzy()&#123;    Pattern pattern = Pattern.compile(&quot;^hisen1&quot;);    BasicDBObject basicDBObject = new BasicDBObject(&quot;name&quot;,pattern);    DBCursor dbCursor = dbCollection.find(basicDBObject);    while (dbCursor.hasNext())&#123;      System.out.println(dbCursor.next());    &#125;  &#125;  /**   * 清空集合   */  @Test  public void testDrop()&#123;    dbCollection.drop();    testReadAll();  &#125;","categories":["sql"],"tags":["mongodb"]},{"title":"Maven镜像库设置 - maven mirrors - maven 镜像 阿里","url":"/20170412-Maven%E9%95%9C%E5%83%8F%E5%BA%93%E8%AE%BE%E7%BD%AE%20-%20maven%20mirrors%20-%20maven%20%E9%95%9C%E5%83%8F%20%E9%98%BF%E9%87%8C/","content":"配置文件：\nyourPath\\maven-3.3.9\\conf\\settings.xml\n找到里面的，添加镜像即可\n&lt;mirrors&gt;&lt;/mirrors&gt;\n\n这里写的是被镜像的ID\n如果写成：* (星号)\n所有的请求都会到这个镜像上，包括各种本地库\n注意：千万不要配成***\n否则内网的仓库或者你配的镜像里面没有一下jar包的时候不会去别的地方搜索\n&lt;!--阿里云：速度挺快--&gt;&lt;mirror&gt;\t&lt;id&gt;nexus-aliyun&lt;/id&gt;\t&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\t&lt;name&gt;Nexus aliyun&lt;/name&gt;\t&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;&lt;!--谷歌：北京速度不错--&gt;&lt;mirror&gt;  &lt;id&gt;google-maven-central&lt;/id&gt;  &lt;name&gt;Google Maven Central&lt;/name&gt;  &lt;url&gt;https://maven-central.storage.googleapis.com&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt;","categories":["maven"],"tags":["maven"]},{"title":"MySQL decode - MySQL中类似oracle的decode实现方法","url":"/20170427-MySQL%20decode%20-%20MySQL%E4%B8%AD%E7%B1%BB%E4%BC%BCoracle%E7%9A%84decode%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/","content":"在oracle中直接有decode函数 decode(cola,null,0)\n表示如果cola为空，赋值为0\n在mysql中的具体实现如下，\nmysql&gt; describe book;+---------+--------------+------+-----+---------+----------------+| Field   | Type         | Null | Key | Default | Extra          |+---------+--------------+------+-----+---------+----------------+| book_id | bigint(20)   | NO   | PRI | NULL    | auto_increment || name    | varchar(100) | NO   |     | NULL    |                || number  | int(11)      | NO   |     | NULL    |                |+---------+--------------+------+-----+---------+----------------+3 rows in set (0.00 sec)mysql&gt; select * from book;+---------+-------------------------+--------+| book_id | name                    | number |+---------+-------------------------+--------+|     123 | 123                     |    122 ||    1000 | Java程序设计             |      5 ||    1001 | 数据结构                 |      9 ||    1002 | 设计模式                 |     10 ||    1003 | 编译原理                 |     10 ||    1004 | MySQL从删库到跑路         |    100 ||    1005 | 活着                     |     10 ||    1232 | 11111                    |    124 ||    2001 | 测试                     |   2001 ||   10064 | 老鼠爱大米               |  10088 ||   10066 | 老鼠爱大米               |   1008 ||   10088 | 测试宝典                |   1008 ||   10096 | maven实战               |  10096 ||   11111 | 111111                  |  11111 ||   12311 | 都懂得                  |   1222 ||  123222 | 222                     |   1111 |+---------+-------------------------+--------+16 rows in set (0.00 sec)mysql&gt; select if(count(b.book_id)=16,&quot;十六&quot;,&quot;不是十六&quot;) &#x27;结果&#x27; from book b;+--------+| 结果   |+--------+| 十六   |+--------+1 row in set (0.00 sec)mysql&gt; select case count(b.book_id) when 16 then &#x27;十六&#x27; else &#x27;其他&#x27; end as &#x27;结果&#x27; from book b;+--------+| 结果   |+--------+| 十六   |+--------+1 row in set (0.00 sec)","categories":["mysql"],"tags":["mysql","sql"]},{"title":"MySQL update语句","url":"/20170801-MySQL%20update%E8%AF%AD%E5%8F%A5/","content":"刚在一个群里，有人有这么一个需求。\n表A：id,name\n表B：id,其他,name(新增字段)\nA，B表通过id关联，要把A的name给对应的B的name\n以前也没有写过这种update语句\nupdate 表名 set 字段名=字段值 where 条件如 update A set name=&#x27;xiaoming&#x27; where id=&#x27;&#x27;;如果是多表查询update 表1 a inner join 表2 b on  ab表的关联 set a.字段=b.字段如 update A a inner join B b on a.id=b.id set a.name=b.name就是在table1表和table2表id相同时 把table2的name值赋给table1的name","categories":["sql"],"tags":["mysql"]},{"title":"MySQL - Data truncation:Incorrect datetime value","url":"/20190201-MySQL%20-%20Data%20truncation%20Incorrect%20datetime%20value/","content":"一、问题com.mysql.jdbc.MysqlDataTruncation: Data truncation: Incorrect datetime value: &#x27;2039-01-07 12:58:20.625&#x27; for column\n二、原因由于程序没有控制好，计算下一次更新时间失误，造成数值过大。\nupdate table_aSET UPDATE_TIME = &#x27;2039-01-07 12:58:20.625&#x27;WHERE ID = 6241\n以下是MySQL官方的说法，就是时间超过了范围。\nThe TIMESTAMP data type is used for values that contain both date and time parts.TIMESTAMP has a range of &#x27;1970-01-01 00:00:01&#x27; UTC to &#x27;2038-01-19 03:14:07&#x27; UTC.\n","categories":["sql"],"tags":["mysql","sql"]},{"title":"MySQL一个group by查询出最大值和非group by所在字段的值","url":"/20170418-MySQL%E4%B8%80%E4%B8%AAgroup%20by%E6%9F%A5%E8%AF%A2%E5%87%BA%E6%9C%80%E5%A4%A7%E5%80%BC%E5%92%8C%E9%9D%9Egroup%20by%E6%89%80%E5%9C%A8%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC/","content":"表结构，数据内容如下。\n需求是：查找出每个年级，年纪最大的人的名字。\n个人的思维只停留在\nmysql&gt; select name, max(age),grade from  stu group by grade;ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;hisen.stu.name&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_bymysql&gt; SELECT A.* FROM stu A INNER JOIN (SELECT MAX(AGE) AS MAX_AGE,GRADE FROM stu GROUP BY GRADE ) B ON A.GRADE = B.GRADE AND A.AGE= B.MAX_AGE;+----+------+------+-------+| id | name | age  | grade |+----+------+------+-------+|  3 | c    |   13 |     1 ||  6 | f    |   13 |     2 |+----+------+------+-------+2 rows in set (0.00 sec)\n\n折腾了一会自己不知道怎么解决，后来倒是解决了。\n具体过程如下：\nmysql&gt; describe stu;+-------+---------+------+-----+---------+----------------+| Field | Type    | Null | Key | Default | Extra          |+-------+---------+------+-----+---------+----------------+| id    | int(11) | NO   | PRI | NULL    | auto_increment || name  | char(1) | YES  |     | NULL    |                || age   | int(11) | YES  |     | NULL    |                || grade | int(11) | YES  |     | NULL    |                |+-------+---------+------+-----+---------+----------------+4 rows in set (0.00 sec)mysql&gt; select * from stu;+----+------+------+-------+| id | name | age  | grade |+----+------+------+-------+|  1 | a    |   11 |     1 ||  2 | b    |   12 |     1 ||  3 | c    |   13 |     1 ||  4 | d    |   11 |     2 ||  5 | e    |   12 |     2 ||  6 | f    |   13 |     2 |+----+------+------+-------+6 rows in set (0.00 sec)mysql&gt; select max(name), max(age),grade from  stu group by grade;+-----------+----------+-------+| max(name) | max(age) | grade |+-----------+----------+-------+| c         |       13 |     1 || f         |       13 |     2 |+-----------+----------+-------+2 rows in set (0.01 sec)","categories":["mysql"],"tags":["mysql"]},{"title":"MySQL 常用操作 - 命令行","url":"/20170815-MySQL%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%20-%20%E5%91%BD%E4%BB%A4%E8%A1%8C/","content":"命令行常用操作，备忘\n#开启远程登录grant all privileges on *.* to &#x27;user&#x27;@&#x27;%&#x27; identified by &#x27;passwd&#x27; with grant option;#创建数据库create database DB;#创建用户insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;user&quot;,password(&quot;passwd&quot;));#删除用户DELETE FROM user WHERE user=&quot;username&quot; and HOST=&quot;localhost&quot;;#修改指定用户密码update mysql.user set password=password(&#x27;new passwd&#x27;) where user=&quot;username&quot; and host=&quot;localhost&quot;;#用户授权grant all privileges on DB.* to &#x27;user&#x27;@&#x27;localhost&#x27; identified by &#x27;passwd&#x27;;grant select,update on DB.* to &#x27;user&#x27;@&#x27;localhost&#x27; identified by &#x27;passwd&#x27;;#刷新权限flush privileges;#数据库导出mysqldump -uUSRENAME -pPASSWD DATABASE &gt; DATABASE.sql#数据库导出(只导出表结构 -d)mysqldump -uUSRENAME -pPASSWD -d DATABASE &gt; DATABASE.sql#数据库导入#1.切换数据库use DATABASE;#2.设置编码set names utf8;#3.执行导入操作source /home/abc/abc.sql;#直接导入mysql -uUSERNAME -p DATABASE &lt; DATABASE.sql\n","categories":["sql"],"tags":["mysql"]},{"title":"MySQL一些简单的语句","url":"/20170120-MySQL%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%AD%E5%8F%A5/","content":"emlog_ad字段idstatuspositiontitleweightcontent\n--找出重复SELECT a.*FROM emlog_ad aWHERE a.id IN    (SELECT b.id id     FROM emlog_ad b     GROUP BY b.title     HAVING count(b.id)&gt;1);--删除重复留下id最小的SELECT a.*FROM emlog_ad aWHERE a.id IN    (SELECT b.id     FROM emlog_ad b     GROUP BY b.title     HAVING count(b.id)&gt;1)  AND a.id NOT IN    (SELECT min(c.id)     FROM emlog_ad c     GROUP BY c.title     HAVING count(c.id)&gt;1);--一句sql把所有AA改为BB，CC改为DDUPDATE emlog_ad aSET a.`status`=(CASE\tWHEN a.`status` = &#x27;1&#x27; THEN &#x27;11&#x27;\tWHEN a.`status`=&#x27;2&#x27; THEN &#x27;22&#x27;\tEND);","tags":["mysql"]},{"title":"MySQL下A库的a表导入到B库的b表","url":"/20170516-MySQL%E4%B8%8BA%E5%BA%93%E7%9A%84a%E8%A1%A8%E5%AF%BC%E5%85%A5%E5%88%B0B%E5%BA%93%E7%9A%84b%E8%A1%A8/","content":"\n\n\n数据库名称\n表名\n\n\n\nemployees\nemployees\n\n\nhisen\nemployee\n\n\n现在想把第一行的数据导入到第二行，具体如下\nmysql&gt; describe employees;+------------+---------------+------+-----+---------+-------+| Field      | Type          | Null | Key | Default | Extra |+------------+---------------+------+-----+---------+-------+| emp_no     | int(11)       | NO   | PRI | NULL    |       || birth_date | date          | NO   |     | NULL    |       || first_name | varchar(14)   | NO   |     | NULL    |       || last_name  | varchar(16)   | NO   |     | NULL    |       || gender     | enum(&#x27;M&#x27;,&#x27;F&#x27;) | NO   |     | NULL    |       || hire_date  | date          | NO   |     | NULL    |       |+------------+---------------+------+-----+---------+-------+6 rows in setmysql&gt; select count(*) from employees;+----------+| count(*) |+----------+|   300024 |+----------+1 row in set\nemployees数据库中的employees表有30万数据\n我想把这个数据导出到另外一个数据库hisen中的employee表中\n具体操作如下\n\nmysql&gt; create table hisen.employee as(    -&gt; select * from employees.employees    -&gt; );Query OK, 300024 rows affectedRecords: 300024  Duplicates: 0  Warnings: 0mysql&gt; use hisen;Database changedmysql&gt; select count(*) from employee;+----------+| count(*) |+----------+|   300024 |+----------+1 row in set\n这种操作是针对所有字段都导出的情形，创建表跟插入数据合二为一\n如果导出部分字段或者有其他限制条件写sql即可\n这应该是最简单的方法~\n","categories":["mysql"],"tags":["mysql"]},{"title":"MySQL使用like查找汉字乱码","url":"/20170208-MySQL%E4%BD%BF%E7%94%A8like%E6%9F%A5%E6%89%BE%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81/","content":"第一种解决办法：BINARY在关键字之前加上：BINARY，会使关键字强制转换为二进制字符串\nselect id form t where chinese like **BINARY** %汉字%\n第二种解决办法：改关键字类型把关键字的类型改成：BINARY\n这两种办法都可以解决乱码问题","tags":["mysql","like"]},{"title":"MySQL 数据库安装官方自带employees测试库","url":"/20170401-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%AE%98%E6%96%B9%E8%87%AA%E5%B8%A6employees%E6%B5%8B%E8%AF%95%E8%A1%A8/","content":"MySQL 官方是有一个自带的数据库，名为：Employees Sample Database\n官网介绍：Employees Sample Database\n\n\n\n表名\n中文\n\n\n\ndepartment\n部门表\n\n\ndept_emp\n部门员工任职期表(按部门&amp;时期)\n\n\ndept_manager\n部门经理任职期表(按时期)\n\n\nemployees\n员工详情表\n\n\nsalaries\n员工薪资表(按时期)\n\n\ntitle\n员工职称表(按时期)\n\n\n\n导入的操作过程，在ubuntu上进行操作\n\n\n一、导入数据库操作过程\n#ubuntu apt-get 安装的mysql默认的配置文件#添加一行：default-storage-engine=InnoDBhisen@ubuntu:/$ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf#获取root权限hisen@ubuntu:/var/lib$ suPassword:#进数据库目录root@ubuntu:# cd /var/lib/mysql#删除两个文件root@ubuntu:/var/lib/mysql# rm ib_logfile0root@ubuntu:/var/lib/mysql# rm ib_logfile1#重启数据库root@ubuntu:/# service mysql restart#下载Employees databasehisen@ubuntu:~/dl$ wget https://codeload.github.com/datacharmer/test_db/zip/master#解压hisen@ubuntu:~/dl$ unzip master#查看hisen@ubuntu:~/dl$ lltotal 35840drwxrwxr-x  3 hisen hisen     4096 Apr  1 16:50 ./drwxr-xr-x 10 hisen hisen     4096 Apr  1 16:40 ../-rw-rw-r--  1 hisen hisen 36687570 Apr  1 16:30 masterdrwxrwxr-x  4 hisen hisen     4096 Oct 14  2015 test_db-master/#进目录hisen@ubuntu:~/dl$ cd test_db-master/#导入数据库hisen@ubuntu:~/dl/test_db-master$ mysql -u root -p &lt; employees.sqlEnter password:INFOCREATING DATABASE STRUCTUREINFOstorage engine: InnoDBINFOLOADING departmentsINFOLOADING employeesINFOLOADING dept_empINFOLOADING dept_managerINFOLOADING titlesINFOLOADING salariesdata_load_time_diff00:01:11#导入成功#验证是否导入成功hisen@ubuntu:~/dl/test_db-master$ mysql -u root -p &lt; test_employees_md5.sqlEnter password:INFOTESTING INSTALLATIONtable_name\texpected_records\texpected_crcemployees\t300024\t4ec56ab5ba37218d187cf6ab09ce1aa1departments\t9\td1af5e170d2d1591d776d5638d71fc5fdept_manager\t24\t8720e2f0853ac9096b689c14664f847edept_emp\t331603\tccf6fe516f990bdaa49713fc478701b7titles\t443308\tbfa016c472df68e70a03facafa1bc0a8salaries\t2844047\tfd220654e95aea1b169624ffe3fca934table_name\tfound_records   \tfound_crcemployees\t300024\t4ec56ab5ba37218d187cf6ab09ce1aa1departments\t9\td1af5e170d2d1591d776d5638d71fc5fdept_manager\t24\t8720e2f0853ac9096b689c14664f847edept_emp\t331603\tccf6fe516f990bdaa49713fc478701b7titles\t443308\tbfa016c472df68e70a03facafa1bc0a8salaries\t2844047\tfd220654e95aea1b169624ffe3fca934table_name\trecords_match\tcrc_matchemployees\tOK\tokdepartments\tOK\tokdept_manager\tOK\tokdept_emp\tOK\toktitles\tOK\toksalaries\tOK\tokcomputation_time00:00:22summary\tresultCRC\tOKcount\tOK\n\n二、数据库练习练习题：点击查看练习题\n","categories":["mysql"],"tags":["mysql"]},{"title":"MySQL批量删除重复数据,保留id最小的一条","url":"/20181016-MySQL%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE,%E4%BF%9D%E7%95%99id%E6%9C%80%E5%B0%8F%E7%9A%84%E4%B8%80%E6%9D%A1/","content":"stu数据如下：\n\n\n\nid\nname\n\n\n\n1\nhisen\n\n\n2\nhisen\n\n\n3\nhisen\n\n\n4\nhisenyuan\n\n\n5\nhisenyuan\n\n\n删除重复的name，保留id最小的。\n思路就是先找出重复数据，然后再找出需要保留的数据(重复中id最小的)\n然后删除id不在需要保留的id中的所有数据\ndeletefrom stuwhere id not in (select t.minId                 from (select min(id) minId from stu group by name having count(name) &gt; 1) t)\n","categories":["sql"],"tags":["mysql批量删除重复数据"]},{"title":"MySQL索引相关知识和应用","url":"/20170518-MySQL%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E5%92%8C%E5%BA%94%E7%94%A8/","content":"hisen库中有一个post表，数据20w，非重复数据20条；\n结构如下mysql&gt; describe post;+---------+---------------+------+-----+---------+----------------+| Field   | Type          | Null | Key | Default | Extra          |+---------+---------------+------+-----+---------+----------------+| id      | int(11)       | NO   | PRI | NULL    | auto_increment || title   | varchar(255)  | YES  | MUL | NULL    |                || content | varchar(2550) | YES  |     | NULL    |                |+---------+---------------+------+-----+---------+----------------+3 rows in set (0.00 sec)\n添加普通索引mysql&gt; alter table post add index index_post_title (title);Query OK, 0 rows affected (1.22 sec)Records: 0  Duplicates: 0  Warnings: 0\n删除索引mysql&gt; drop index index_post_title on post;Query OK, 0 rows affected (0.02 sec)Records: 0  Duplicates: 0  Warnings: 0\n添加索引之后查询速度明显加快mysql&gt; select count(title) from post group by title;20 rows in set (0.25 sec)#加了索引之后20 rows in set (0.08 sec)\n使用索引的情况\n表的主关键字:自动建立唯一索引\n表的字段唯一约束:ORACLE利用索引来保证数据的完整性\n直接条件查询的字段\n在SQL中用于条件约束的字段\n查询中与其它表关联的字段\n查询中排序的字段\n查询中统计或分组统计的字段\n\n不使用索引的情况\n表记录太少\n经常插入、删除、修改的表\n数据重复且分布平均的表字段：假如10万数据只有A、B状态，且A、B各50%，这样建立索引就不会提速\n经常和主字段一块查询但主字段索引值比较多的表字段\n\nMySql在建立索引优化时需要注意的问题\n\n创建索引：对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。\n复合索引：比如有一条语句是这样的：select * from users where area&#x3D;’beijing’ and age&#x3D;22;如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age,salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。\n索引不会包含有NULL值的列：只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。\n使用短索引：对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I&#x2F;O操作。\n排序的索引问题：mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。\nlike语句操作：一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。\n不要在列上进行运算：select * from users where YEAR(adddate);\n不使用NOT IN和操作：NOT IN和操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id3则可使用id&gt;3 or id\n\n","categories":["mysql"],"tags":["mysql","索引"]},{"title":"MySQL统计成功率等 - 利用case when","url":"/20190218-MySQL%E7%BB%9F%E8%AE%A1%E6%88%90%E5%8A%9F%E7%8E%87%E7%AD%89%20-%20%E5%88%A9%E7%94%A8case%20when/","content":"CONCAT:连接字符串,CONCAT(55.00,’%’)-&gt;55.00%truncate:处理小数点位数,truncate(10.1111,2)-&gt;10.11\n统计sqlselect res.*, CONCAT(truncate((res.succ / res.`all`) * 100, 2), &#x27;%&#x27;) as &#x27;success rate&#x27;from (select tpc.USER_NO,             tpc.TYPE,             count(*)                                                            as &#x27;all&#x27;,             sum(case when tpc.STATUS = 0 then 1 else 0 end)                     as &#x27;succ&#x27;,             sum(case when tpc.STATUS = 1 then 1 else 0 end)                     as &#x27;fail&#x27;,             sum(case when tpc.STATUS != 1 &amp;&amp; tpc.STATUS != 0 then 1 else 0 end) as &#x27;other&#x27;      from t_hisen tpc      where tpc.DATE between &#x27;20190216&#x27; and &#x27;20190217&#x27;      group by tpc.USER_NO, tpc.TYPE      order by tpc.USER_NO) res\n统计结果\n\n\nUSER_NO\nTYPE\nall\nsucc\nfail\nother\nsuccess rate\n\n\n\n456\n10\n1\n0\n0\n1\n0.00%\n\n\n123\n10\n29\n23\n0\n6\n79.31%\n\n\n","categories":["sql"],"tags":["mysql","sql"]},{"title":"MySql的执行计划","url":"/20171123-MySql%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/","content":"###命令介绍MySQL的EXPLAIN命令用于SQL语句的查询执行计划(QEP)。\n这条命令的输出结果能够让我们了解MySQL 优化器是如何执行\n执行下面的SQL\nexplain select * FROM book where name like &#x27;活%&#x27;\n得到下面的数据\n\n\n\nid\nselect_type\ntable\npartitions\ntype\npossible_keys\nkey\nkey_len\nref\nrows\nfilered\nExtra\n\n\n\n编号\n查询方式\n表名\n分区\n连接方式\n索引(可能)\n索引\n索引长度\n作用列\n行数\n百分比\n额外\n\n\n1\nSIMPLE\nbook\nnull\nALL\nnull\nnull\nnull\nnull\n114\n11.11\nUsing where\n\n\n###建表语句\n\n#创建个人信息表CREATE TABLE hisen_test_explain_people(  id bigint auto_increment primary key,  zipcode char(32) not null default &#x27;&#x27;,  address varchar(128) not null default &#x27;&#x27;,  lastname char(64) not null default &#x27;&#x27;,  firstname char(64) not null default &#x27;&#x27;,  birthdate char(10) not null default &#x27;&#x27;);#创建索引alter table hisen_test_explain_people add key(zipcode,firstname,lastname);#插入个人信息数据insert into hisen_test_explain_people(zipcode,address,lastname,firstname,birthdate)values  (&#x27;230031&#x27;,&#x27;anhui&#x27;,&#x27;zhan&#x27;,&#x27;jindong&#x27;,&#x27;1989-09-15&#x27;),  (&#x27;100000&#x27;,&#x27;beijing&#x27;,&#x27;zhang&#x27;,&#x27;san&#x27;,&#x27;1987-03-11&#x27;),  (&#x27;200000&#x27;,&#x27;shanghai&#x27;,&#x27;wang&#x27;,&#x27;wu&#x27;,&#x27;1988-08-25&#x27;);#创建汽车信息表CREATE TABLE hisen_test_explain_people_car(  people_id bigint,  plate_number varchar(16) not null default &#x27;&#x27;,  engine_number varchar(16) not null default &#x27;&#x27;,  lasttime timestamp);#插入汽车信息insert into hisen_test_explain_people_car(people_id,plate_number,engine_number,lasttime)values  (1,&#x27;A121311&#x27;,&#x27;12121313&#x27;,&#x27;2017-11-23 :21:12:21&#x27;),  (2,&#x27;B121311&#x27;,&#x27;1S121313&#x27;,&#x27;2016-11-23 :21:12:21&#x27;),  (3,&#x27;C121311&#x27;,&#x27;1211SAS1&#x27;,&#x27;2015-11-23 :21:12:21&#x27;);\n###执行计划样例\nexplain select zipcode,firstname,lastname from hisen_test_explain_people;+----+-------------+---------------------------+------------+-------+---------------+---------+---------+------+------+----------+-------------+| id | select_type | table                     | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |+----+-------------+---------------------------+------------+-------+---------------+---------+---------+------+------+----------+-------------+|  1 | SIMPLE      | hisen_test_explain_people | NULL       | index | NULL          | zipcode | 160     | NULL |    3 |   100.00 | Using index |+----+-------------+---------------------------+------------+-------+---------------+---------+---------+------+------+----------+-------------+explain select zipcode from (select * from hisen_test_explain_people a) b;+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+|  1 | SIMPLE      | a     | NULL       | index | NULL          | zipcode | 160     | NULL |    3 |   100.00 | Using index |+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+id是用来顺序标识整个查询中SELELCT 语句的，通过上面这个简单的嵌套查询可以看到id越大的语句越先执行。该值可能为NULL，如果这一行用来说明的是其他行的联合结果，比如UNION语句：explain select * from hisen_test_explain_people where zipcode = 100000 union select * from hisen_test_explain_people where zipcode = 200000;+----+--------------+---------------------------+------------+------+---------------+------+---------+------+------+----------+-----------------+| id | select_type  | table                     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |+----+--------------+---------------------------+------------+------+---------------+------+---------+------+------+----------+-----------------+|  1 | PRIMARY      | hisen_test_explain_people | NULL       | ALL  | zipcode       | NULL | NULL    | NULL |    3 |    33.33 | Using where     ||  2 | UNION        | hisen_test_explain_people | NULL       | ALL  | zipcode       | NULL | NULL    | NULL |    3 |    33.33 | Using where     ||NULL| UNION RESULT | &lt;union1,2&gt;                | NULL       | ALL  | NULL          | NULL | NULL    | NULL | NULL |     NULL | Using temporary |+----+--------------+---------------------------+------------+------+---------------+------+---------+------+------+----------+-----------------+\n###参考\n\n参数解释\n实战演练\n\n","categories":["sql"],"tags":["mysql","sql","explain"]},{"title":"Mybatis-Generator自动生成dao、model、mapper","url":"/20170802-Mybatis-Generator%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90dao%E3%80%81model%E3%80%81mapper/","content":"一、配置插件在resources文件夹下新建：generatorConfig.xml\n内容如下：注意修改包名等信息\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;!--详细说明请看：http://blog.csdn.net/tiantangpw/article/details/51690534--&gt;&lt;generatorConfiguration&gt;  &lt;context id=&quot;mysqlgenerator&quot; targetRuntime=&quot;MyBatis3&quot;&gt;    &lt;!--数据库配置--&gt;    &lt;jdbcConnection connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/booksystem&quot;      driverClass=&quot;com.mysql.jdbc.Driver&quot;      password=&quot;hisen&quot;      userId=&quot;root&quot;/&gt;          &lt;!--生成Model(实体类，与数据库字段对应的bean)类存放位置--&gt;    &lt;javaModelGenerator targetPackage=&quot;com.hisen.entity&quot; targetProject=&quot;src/main/java&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;      &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;    &lt;/javaModelGenerator&gt;    &lt;!--生成映射(xxxmapper.xml)文件存放位置--&gt;    &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;    &lt;/sqlMapGenerator&gt;    &lt;!--生成Dao类存放位置--&gt;    &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.hisen.dao&quot;      targetProject=&quot;src/main/java&quot;&gt;      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;    &lt;/javaClientGenerator&gt;        &lt;!--要生成的表--&gt;    &lt;table tableName=&quot;appointment&quot;/&gt;    &lt;table tableName=&quot;user&quot;/&gt;  &lt;/context&gt;&lt;/generatorConfiguration&gt;\n二、添加maven插件\n在pom.xml中添加如下内容：plugins节点内\n&lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;1.3.2&lt;/version&gt;        &lt;dependencies&gt;          &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.5&lt;/version&gt;          &lt;/dependency&gt;        &lt;/dependencies&gt;        &lt;configuration&gt;          &lt;overwrite&gt;true&lt;/overwrite&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;\n三、使用在idea调出mavenProject界面，选择plugins，找到mybatis-generator，双击即可\n","categories":["java"],"tags":["sql","mybatis"]},{"title":"Mysql Employees Database练习题&答案","url":"/20170410-Mysql%20Employees%20%20Database%E7%BB%83%E4%B9%A0%E9%A2%98&%E7%AD%94%E6%A1%88/","content":"Employees数据库是mysql官方提供的一个测试用数据库\n里面含有几十万条数据。\n找了好久也没有找到比较匹配的题目\n就找了个匹配度比较高的题来练习，如果你还没有导入Employees Sample Database\n请参考：点击导入Employees\n本次操作在Xshell中完成，也就是mysql命令行。\n简单的操作#登陆数据库hisen@ubuntu:/$ mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 8Server version: 5.7.17-0ubuntu0.16.04.2 (Ubuntu)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || employees          || log4j              || mysql              || performance_schema || ssm                || sys                |+--------------------+7 rows in set (0.00 sec)mysql&gt; use employeesReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+----------------------+| Tables_in_employees  |+----------------------+| current_dept_emp     || departments          || dept_emp             || dept_emp_latest_date || dept_manager         || employees            || salaries             || titles               |+----------------------+8 rows in set (0.00 sec)mysql&gt; select * from employees limit 10;+--------+------------+------------+-----------+--------+------------+| emp_no | birth_date | first_name | last_name | gender | hire_date  |+--------+------------+------------+-----------+--------+------------+|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 ||  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 ||  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 ||  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 ||  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 ||  10006 | 1953-04-20 | Anneke     | Preusig   | F      | 1989-06-02 ||  10007 | 1957-05-23 | Tzvetan    | Zielinski | F      | 1989-02-10 ||  10008 | 1958-02-19 | Saniya     | Kalloufi  | M      | 1994-09-15 ||  10009 | 1952-04-19 | Sumant     | Peac      | F      | 1985-02-18 ||  10010 | 1963-06-01 | Duangkaew  | Piveteau  | F      | 1989-08-24 |+--------+------------+------------+-----------+--------+------------+10 rows in set (0.00 sec)#统计各部门曾经拥有的员工数量mysql&gt; select dept_no,count(*) emp_sum    -&gt; from dept_emp    -&gt; group by dept_no    -&gt; order by emp_sum desc;+---------+---------+| dept_no | emp_sum |+---------+---------+| d005    |   85707 || d004    |   73485 || d007    |   52245 || d009    |   23580 || d008    |   21126 || d001    |   20211 || d006    |   20117 || d003    |   17786 || d002    |   17346 |+---------+---------+9 rows in set (0.63 sec)#创建视图mysql&gt; CREATE VIEW test AS    -&gt; SELECT dept_no, COUNT(*) AS emp_sum    -&gt; FROM dept_emp    -&gt; GROUP BY dept_no    -&gt; ORDER BY emp_sum DESC    -&gt; ;Query OK, 0 rows affected (0.16 sec)mysql&gt; select * from test;+---------+---------+| dept_no | emp_sum |+---------+---------+| d005    |   85707 || d004    |   73485 || d007    |   52245 || d009    |   23580 || d008    |   21126 || d001    |   20211 || d006    |   20117 || d003    |   17786 || d002    |   17346 |+---------+---------+9 rows in set (0.11 sec)#联合查询，加上部门名称mysql&gt; select test.dept_no,emp_sum,dept_name    -&gt; from test,departments    -&gt; where test.dept_no = departments.dept_no;+---------+---------+--------------------+| dept_no | emp_sum | dept_name          |+---------+---------+--------------------+| d009    |   23580 | Customer Service   || d005    |   85707 | Development        || d002    |   17346 | Finance            || d003    |   17786 | Human Resources    || d001    |   20211 | Marketing          || d004    |   73485 | Production         || d006    |   20117 | Quality Management || d008    |   21126 | Research           || d007    |   52245 | Sales              |+---------+---------+--------------------+9 rows in set (0.16 sec)\n\n练习题目和答案：建议看看输出的结果自己写下sql，不要单纯的复制粘贴。\n因为数据量比较大， 很多时候我都加了5条数据的限制。\n\n#1.查找整个职员表的所有内容。mysql&gt; select * from employees limit 5;+--------+------------+------------+-----------+--------+------------+| emp_no | birth_date | first_name | last_name | gender | hire_date  |+--------+------------+------------+-----------+--------+------------+|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 ||  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 ||  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 ||  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 ||  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |+--------+------------+------------+-----------+--------+------------+5 rows in set (0.00 sec)#2.查看雇员名字(last_name)。mysql&gt; select last_name from employees limit 5;+-----------+| last_name |+-----------+| Facello   || Simmel    || Bamford   || Koblick   || Maliniak  |+-----------+5 rows in set (0.00 sec)#3.查看雇员编号、名字和部门mysql&gt; select e.last_name,e.emp_no,d.dept_name from employees e,departments d,dept_emp de where e.emp_no = de.emp_no and de.dept_no = d.dept_no limit 5;+-------------+--------+------------------+| last_name   | emp_no | dept_name        |+-------------+--------+------------------+| Sluis       |  10011 | Customer Service || Lortz       |  10038 | Customer Service || Tramer      |  10049 | Customer Service || Billingsley |  10060 | Customer Service || Syrzycki    |  10088 | Customer Service |+-------------+--------+------------------+5 rows in set (0.00 sec)#4.显示所有雇员的工号、姓名、工资mysql&gt; select e.emp_no,concat(e.last_name,&#x27; &#x27;,e.first_name) name,s.salary from employees e,salaries s where e.emp_no=s.emp_no limit 5;+--------+----------------+--------+| emp_no | name           | salary |+--------+----------------+--------+|  10001 | Facello Georgi |  60117 ||  10001 | Facello Georgi |  62102 ||  10001 | Facello Georgi |  66074 ||  10001 | Facello Georgi |  66596 ||  10001 | Facello Georgi |  66961 |+--------+----------------+--------+5 rows in set (0.00 sec)#5.查找在d005号部门工作的雇员mysql&gt; select e.emp_no,concat(e.last_name,&#x27; &#x27;,e.first_name) name,d.dept_no,d.dept_name from employees e,dept_emp de,departments d where e.emp_no = de.emp_no and de.dept_no = d.dept_no and d.dept_no = &#x27;d005&#x27; limit 5;+--------+--------------------+---------+-------------+| emp_no | name               | dept_no | dept_name   |+--------+--------------------+---------+-------------+|  10001 | Facello Georgi     | d005    | Development ||  10006 | Preusig Anneke     | d005    | Development ||  10008 | Kalloufi Saniya    | d005    | Development ||  10012 | Bridgland Patricio | d005    | Development ||  10014 | Genin Berni        | d005    | Development |+--------+--------------------+---------+-------------+5 rows in set (0.05 sec)#6.要求查找职位为Engineer和Senior Engineer的雇员姓名(last_name)mysql&gt; select e.last_name from employees e,titles t where t.emp_no=e.emp_no and t.title in(&#x27;Engineer&#x27;,&#x27;Senior Engineer&#x27;) limit  5;+-----------+| last_name |+-----------+| Facello   || Bamford   || Koblick   || Koblick   || Preusig   |+-----------+5 rows in set (0.00 sec)#7.查找职位不是Engineer和Senior Engineer的部门编号，雇员部门及姓名。将姓名显示为(first_name+last_name命名为”Name”)mysql&gt; select d.dept_no,d.dept_name,concat(e.first_name,&#x27; &#x27;,e.last_name) name from employees e,titles t,dept_emp de,departmentss d where e.emp_no=de.emp_no and de.dept_no = d.dept_no and t.emp_no = e.emp_no and t.title not in(&#x27;Engineer&#x27;,&#x27;Senior Engineer&#x27;&#x27;) limit 5;+---------+------------------+--------------+| dept_no | dept_name        | name         |+---------+------------------+--------------+| d009    | Customer Service | Mary Sluis   || d009    | Customer Service | Huan Lortz   || d009    | Customer Service | Huan Lortz   || d009    | Customer Service | Basil Tramer || d009    | Customer Service | Basil Tramer |+---------+------------------+--------------+5 rows in set (0.00 sec)#8.查找哪些雇员的工资在60000到90000之间mysql&gt; select concat(e.first_name,&#x27; &#x27;,e.last_name) name,s.salary from employees e,salaries s where s.salary between 60000 and 90000 and e.emp_no = s.emp_no limit 5;+----------------+--------+| name           | salary |+----------------+--------+| Georgi Facello |  60117 || Georgi Facello |  62102 || Georgi Facello |  66074 || Georgi Facello |  66596 || Georgi Facello |  66961 |+----------------+--------+5 rows in set (0.00 sec)#9.查找哪些雇员的工资不在60000到90000之间mysql&gt; select concat(e.first_name,&#x27; &#x27;,e.last_name) name,s.salary from employees e,salaries s where s.salary not between 60000 and 90000 and e.emp_no = s.emp_no limit 10;+-------------------+--------+| name              | salary |+-------------------+--------+| Parto Bamford     |  40006 || Parto Bamford     |  43616 || Parto Bamford     |  43466 || Parto Bamford     |  43636 || Parto Bamford     |  43478 || Parto Bamford     |  43699 || Parto Bamford     |  43311 || Chirstian Koblick |  40054 || Chirstian Koblick |  42283 || Chirstian Koblick |  42542 |+-------------------+--------+10 rows in set (0.00 sec)#10.查找first_name以P开头，后面仅有四个字母的雇员信息mysql&gt; select e.emp_no,concat(e.first_name,&#x27; &#x27;,e.last_name) name from employees e where e.first_name like &#x27;P____&#x27; and e.first_name not like &#x27;p__&#x27; limit 5;+--------+---------------------+| emp_no | name                |+--------+---------------------+|  10003 | Parto Bamford       ||  10101 | Perla Heyers        ||  10138 | Perry Shimshoni     ||  10353 | Phule Hammerschmidt ||  10387 | Parto Wrigley       |+--------+---------------------+5 rows in set (0.00 sec)#11.查找last_name以K开头的雇员信息mysql&gt; select e.emp_no,concat(e.first_name,&#x27; &#x27;,e.last_name) name from employees e where e.first_name like &#x27;K%&#x27; limit 5; +--------+----------------------+| emp_no | name                 |+--------+----------------------+|  10005 | Kyoichi Maliniak     ||  10016 | Kazuhito Cappelletti ||  10018 | Kazuhide Peha        ||  10031 | Karsten Joslin       ||  10066 | Kwee Schusler        |+--------+----------------------+5 rows in set (0.00 sec)#12.查找名字以字母K开头，以i结尾，并且第三个字母为o的雇员名字(First_name)、职位和所在部门号mysql&gt; select concat(e.first_name,&#x27; &#x27;,e.last_name) name,t.title,de.dept_no from employees e,dept_emp de,titles t where e.first_name like &#x27;K_o%i&#x27; and e.emp_no = t.emp_no and e.emp_no = de.emp_no limit 5;+------------------+--------------+---------+| name             | title        | dept_no |+------------------+--------------+---------+| Kyoichi Maliniak | Senior Staff | d003    || Kyoichi Maliniak | Staff        | d003    || Kyoichi Wossner  | Staff        | d007    || Kyoichi Flexer   | Senior Staff | d007    || Kyoichi Flexer   | Staff        | d007    |+------------------+--------------+---------+5 rows in set (0.00 sec)#13.查找哪些雇员的职位名不以Se开头mysql&gt; select concat(e.first_name,&#x27; &#x27;,last_name) name,t.title from employees e,titles t where e.emp_no = t.emp_no and t.title not like &#x27;Se%&#x27; limit 5;+-------------------+--------------------+| name              | title              |+-------------------+--------------------+| Bezalel Simmel    | Staff              || Chirstian Koblick | Engineer           || Kyoichi Maliniak  | Staff              || Tzvetan Zielinski | Staff              || Saniya Kalloufi   | Assistant Engineer |+-------------------+--------------------+5 rows in set (0.00 sec)#14.查找d005号部门里不是Staff的雇员信息mysql&gt; select concat(e.first_name,&#x27; &#x27;,last_name) name,t.title from employees e,dept_emp de,titles t where e.emp_no = de.emp_no  and e.emp_no = t.emp_no and t.title != &#x27;Staff&#x27; limit 5;+-------------------+-----------------+| name              | title           |+-------------------+-----------------+| Georgi Facello    | Senior Engineer || Parto Bamford     | Senior Engineer || Chirstian Koblick | Engineer        || Chirstian Koblick | Senior Engineer || Kyoichi Maliniak  | Senior Staff    |+-------------------+-----------------+5 rows in set (0.00 sec)#15.查找d005号部门工资大于100000的员工的信息mysql&gt; select concat(e.first_name,&#x27; &#x27;,last_name) name,t.title,s.salary from employees e,dept_emp de,titles t,salaries s where e.emp_no = de.emp_no and e.emp_no = t.emp_no and e.emp_no = s.emp_no and de.dept_no = &#x27;d005&#x27; and s.salary &gt; 100000 limit 5;+---------------+--------------------+--------+| name          | title              | salary |+---------------+--------------------+--------+| Kwee Schusler | Assistant Engineer | 102425 || Kwee Schusler | Assistant Engineer | 102674 || Kwee Schusler | Assistant Engineer | 103672 || Kwee Schusler | Engineer           | 102425 || Kwee Schusler | Engineer           | 102674 |+---------------+--------------------+--------+5 rows in set (0.00 sec)#16.按字母顺序显示雇员的名字(last_name)mysql&gt; select concat(e.first_name,&#x27; &#x27;,last_name) name from employees e order by e.last_name limit 5;+------------------+| name             |+------------------+| Aluzio Aamodt    || Sachem Aamodt    || Sreenivas Aamodt || Mokhtar Aamodt   || Bartek Aamodt    |+------------------+5 rows in set (0.24 sec)#17.按部门编号降序显示雇员信息mysql&gt; select concat(e.first_name,&#x27; &#x27;,last_name) name,de.dept_no from employees e,dept_emp de where e.emp_no = de.emp_no order by de.dept_no desc limit 5;+-------------------+---------+| name              | dept_no |+-------------------+---------+| Pohua Sichman     | d009    || Uri Juneja        | d009    || Mohammed Pleszkun | d009    || Chiranjit Kuzuoka | d009    || Ronghao Morrow    | d009    |+-------------------+---------+5 rows in set (0.00 sec)#18.计算每个部门的平均工资和工资总和mysql&gt; select de.dept_no,sum(s.salary),avg(s.salary) from employees e,dept_emp de,salaries s where e.emp_no = de.emp_no and e.emp_no = s.emp_no group by de.dept_no;+---------+---------------+---------------+| dept_no | sum(s.salary) | avg(s.salary) |+---------+---------------+---------------+| d001    |   13725425266 |    71913.2000 || d002    |   11650834677 |    70489.3649 || d003    |    9363811425 |    55574.8794 || d004    |   41554438942 |    59605.4825 || d005    |   48179456393 |    59478.9012 || d006    |   10865203635 |    57251.2719 || d007    |   40030089342 |    80667.6058 || d008    |   11969730427 |    59665.1817 || d009    |   13143639841 |    58770.3665 |+---------+---------------+---------------+9 rows in set (7.14 sec)#19.查询每个部门的每个职位的雇员数mysql&gt; select de.dept_no,t.title,sum(e.emp_no) from employees e,dept_emp de,titles t where e.emp_no = de.emp_no and e.emp_no = t.emp_no group by de.dept_no,t.title limit 5;+---------+--------------+---------------+| dept_no | title        | sum(e.emp_no) |+---------+--------------+---------------+| d001    | Manager      |        220061 || d001    | Senior Staff |    3561178455 || d001    | Staff        |    4142508539 || d002    | Manager      |        220199 || d002    | Senior Staff |    3090249864 |+---------+--------------+---------------+5 rows in set (3.13 sec)#20.请算出employees表中所有雇员的平均工资mysql&gt; select avg(s.salary) from employees e,salaries s where e.emp_no = s.emp_no;+---------------+| avg(s.salary) |+---------------+|    63810.7448 |+---------------+1 row in set (4.48 sec)#21.请查询出employees表中的最低工资的员工信息mysql&gt; select concat(first_name,&#x27; &#x27;,last_name) name from employees e,salaries s where e.emp_no = s.emp_no and s.salary = (selecct min(s.salary) salary from salaries s);+--------------+| name         |+--------------+| Olivera Baek |+--------------+1 row in set (1.99 sec)#22.请计算出每个部门的平均工资、最高工资和最低工资mysql&gt; select de.dept_no,avg(s.salary),max(s.salary),min(s.salary) from employees e,dept_emp de,salaries s where e.emp_no = de.emp_no and e.emp_no = s.emp_no group by de.dept_no;+---------+---------------+---------------+---------------+| dept_no | avg(s.salary) | max(s.salary) | min(s.salary) |+---------+---------------+---------------+---------------+| d001    |    71913.2000 |        145128 |         39127 || d002    |    70489.3649 |        142395 |         38812 || d003    |    55574.8794 |        141953 |         38735 || d004    |    59605.4825 |        138273 |         38623 || d005    |    59478.9012 |        144434 |         38849 || d006    |    57251.2719 |        132103 |         38786 || d007    |    80667.6058 |        158220 |         39169 || d008    |    59665.1817 |        130211 |         38851 || d009    |    58770.3665 |        144866 |         38836 |+---------+---------------+---------------+---------------+9 rows in set (7.06 sec)#23.查询薪水发放时间在1986-06-26 ~ 1987-06-25薪水高于46145号雇员并且工种与他相同的雇员情况。select e.*  from employees e,titles t,salaries s  where e.emp_no = t.emp_no  and e.emp_no = t.emp_no  and t.title = (select title from titles where emp_no = 46135)  and s.salary &gt; (select s.salary from salaries s where s.from_date &gt; str_to_date(&#x27;1986-06-26&#x27;,&#x27;%Y-%m-%d&#x27;) and s.to_date &lt; str_to_date(&#x27;1987-06-2 25&#x27;,&#x27;%Y-%m-%d&#x27;) and s.emp_no = &#x27;46135&#x27;)  and s.from_date &gt; str_to_date(&#x27;1986-06-26&#x27;,&#x27;%Y-%m-%d&#x27;) and s.to_date &lt; str_to_date(&#x27;1987-06-2 25&#x27;,&#x27;%Y-%m-%d&#x27;) limit 10;+--------+------------+------------+------------+--------+------------+| emp_no | birth_date | first_name | last_name  | gender | hire_date  |+--------+------------+------------+------------+--------+------------+|  10004 | 1954-05-01 | Chirstian  | Koblick    | M      | 1986-12-01 ||  10009 | 1952-04-19 | Sumant     | Peac       | F      | 1985-02-18 ||  10010 | 1963-06-01 | Duangkaew  | Piveteau   | F      | 1989-08-24 ||  10012 | 1960-10-04 | Patricio   | Bridgland  | M      | 1992-12-18 ||  10014 | 1956-02-12 | Berni      | Genin      | M      | 1987-03-11 ||  10018 | 1954-06-19 | Kazuhide   | Peha       | F      | 1987-04-03 ||  10020 | 1952-12-24 | Mayuko     | Warwick    | M      | 1991-01-26 ||  10022 | 1952-07-08 | Shahaf     | Famili     | M      | 1995-08-22 ||  10023 | 1953-09-29 | Bojan      | Montemayor | F      | 1989-12-17 ||  10026 | 1953-04-03 | Yongqiao   | Berztiss   | M      | 1995-03-20 |+--------+------------+------------+------------+--------+------------+10 rows in set, 2 warnings (0.05 sec)#24.查询工资在10000到50000之间的雇员所在部门的所有人员的信息。mysql&gt; select e.*,d.dept_no,d.dept_name from employees e,dept_emp de,departments d where e.emp_no = de.emp_no and de.dept_no =d.dept_no and e.emp_no in (select distinct s.emp_no from salaries s where s.salary between 10000 and 50000) limit 10;+--------+------------+-------------+-----------+--------+------------+---------+------------------+| emp_no | birth_date | first_name  | last_name | gender | hire_date  | dept_no | dept_name        |+--------+------------+-------------+-----------+--------+------------+---------+------------------+|  10011 | 1953-11-07 | Mary        | Sluis     | F      | 1990-01-22 | d009    | Customer Service ||  10038 | 1960-07-20 | Huan        | Lortz     | M      | 1989-09-20 | d009    | Customer Service ||  10049 | 1961-04-24 | Basil       | Tramer    | F      | 1992-05-04 | d009    | Customer Service ||  10098 | 1961-09-23 | Sreekrishna | Servieres | F      | 1985-05-13 | d009    | Customer Service ||  10112 | 1963-08-13 | Yuichiro    | Swick     | F      | 1985-10-08 | d009    | Customer Service ||  10115 | 1964-12-25 | Chikara     | Rissland  | M      | 1986-01-23 | d009    | Customer Service ||  10126 | 1954-08-07 | Kayoko      | Valtorta  | M      | 1985-09-08 | d009    | Customer Service ||  10128 | 1958-02-15 | Babette     | Lamba     | F      | 1988-06-06 | d009    | Customer Service ||  10137 | 1959-07-30 | Maren       | Hutton    | M      | 1985-02-18 | d009    | Customer Service ||  10154 | 1957-01-17 | Abdulah     | Thibadeau | F      | 1990-12-12 | d009    | Customer Service |+--------+------------+-------------+-----------+--------+------------+---------+------------------+10 rows in set (1.28 sec)#25.查询出在薪水发放时间在1986-06-26 ~ 1987-06-25的员工信息###（工号，姓名，性别，薪水，职位）mysql&gt; select e.emp_no,concat(e.first_name,&quot; &quot;,e.last_name) name,e.gender,s.salary,t.title from employees e,salaries s,titles t where e.emp_no = s.emp_no and e.emp_no = t.emp_no and s.from_date &gt; str_to_date(&#x27;1986-06-26&#x27;,&#x27;%Y-%m-%d&#x27;) and s.to_date &lt; str_to_date(&#x27;1987-06-2 25&#x27;,&#x27;%Y-%m-%d&#x27;) limit 10;+--------+-------------------+--------+--------+-----------------+| emp_no | name              | gender | salary | title           |+--------+-------------------+--------+--------+-----------------+|  13543 | Tua Garigliano    | F      |  78646 | Staff           ||  13589 | Arfst Munck       | F      |  44306 | Staff           ||  14085 | Jiafu Constantine | F      |  43575 | Staff           ||  14613 | Kien Herath       | M      |  54124 | Staff           ||  19083 | Nobuyoshi Asmuth  | M      |  40000 | Engineer        ||  19135 | Leaf Soicher      | M      |  40000 | Senior Engineer ||  19761 | Vasiliy Niizuma   | M      |  65098 | Staff           ||  19769 | Bezalel Holburn   | M      |  53118 | Engineer        ||  22892 | Giao Monkewich    | M      |  79554 | Senior Staff    ||  24101 | Yakichi Manderick | F      |  45092 | Engineer        |+--------+-------------------+--------+--------+-----------------+10 rows in set, 1 warning (0.07 sec)","categories":["sql"],"tags":["mysql"]},{"title":"No MyBatis mapper was found in 'com.xxx.dao' package","url":"/20170801-No%20MyBatis%20mapper%20was%20found%20in%20'%5Bcom.xxx.dao%5D'%20package%20/","content":"出错maven项目，启动tomcat的时候报错：\nNo MyBatis mapper was found in &#x27;[com.hisen.dao]&#x27; package \n这是由于把mybatis的mapper配置文件放在了java代码的目录下\n目录结构├── java│   └── com│       └── hisen│           ├── dao│           │   └── BookDao.java│           │   └── BookMapper.xml│           ├── entity│           │   └── Book.java│           ├── service│           │   ├── BookService.java│           │   └── impl│           │       └── BookServiceImpl.java│           └── web│               └── BookController.java├── resources│   ├── jdbc.properties│   ├── logback.xml│   ├── mybatis-config.xml│   └── spring│       ├── spring-dao.xml│       ├── spring-service.xml│       └── spring-web.xml└── webapp    ├── index.jsp    └── WEB-INF        ├── jsp        │   ├── detail.jsp        │   └── list.jsp        └── web.xml\n\n出错原因\n这是因为mapper文件的路径问题：maven在打包的时候默认是认为src&#x2F;main&#x2F;java目录下只有java源代码，不会管xml文件。\nJava 项目分为两个部分，一个是源码，一个是资源，在使用maven等构建工具时，\n默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。\n有时为了方便，我们会在src&#x2F;main&#x2F;java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。\n这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。\n解决办法在项目的pom文件里面配置，让maven也从src&#x2F;main&#x2F;java目录下读取xml配置文件\n&lt;build&gt;       &lt;!--注意,如果将静态资源放在src/main/java中,那么编译时将被maven忽略,       在target目录下将没有这些资源,所以需要将该目录添加为资源目录.       --&gt;       &lt;resources&gt;         &lt;resource&gt;           &lt;directory&gt;$&#123;basedir&#125;/src/main/java&lt;/directory&gt;           &lt;includes&gt;             &lt;include&gt;**/*.xml&lt;/include&gt;           &lt;/includes&gt;         &lt;/resource&gt;       &lt;/resources&gt;&lt;/build&gt;\n扩展如果是把mapper文件什么的放在resources目录下\n但是为了分类建了不同的文件夹，也需要修改配置文件，不然会读取不到\n&lt;build&gt;  &lt;!--包含下面所有的配置文件（包括子目录）--&gt;  &lt;resources&gt;    &lt;resource&gt;      &lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt;      &lt;includes&gt;        &lt;include&gt;**/*.properties&lt;/include&gt;        &lt;include&gt;**/*.xml&lt;/include&gt;      &lt;/includes&gt;    &lt;/resource&gt;  &lt;/resources&gt;&lt;/build&gt;","categories":["java"],"tags":["java","xml"]},{"title":"OpenWrt 新版本安装 passwall","url":"/20221030-OpenWrt_22.03_install_passwall/","content":"一、背景最近看了不少软路由的东西于是折腾了一波 OpenWrt奈何网件 R8000 配置一般，跑起来体验不好。后续估计是会上 x86 主机了，虽然可能会性能过剩。\n二、问题在官方原版的 OpenWrt 22.03 版本中如果直接在 software 中安装 luci_app_passwall那么安装后会提示没法实现透明代理，还需要安装一些额外的软件才行\n三、解决问题opkg install ipset ipt2socks iptables iptables-mod-conntrack-extra iptables-mod-iprange iptables-mod-socket iptables-mod-tproxy kmod-ipt-nat\n安装完成之后，再按教程操作即可.原因就是新版本的系统中默认不包含上述模块。问题解决参考自 GitHub issue.\n四、参考\nGiitHub - [Bug]: 系统未安装iptables或ipset，无法透明代理！\n\n","categories":["homelab"],"tags":["OpenWrt"]},{"title":"网件 R8000 利用U盘扩展 OpenWrt overlay 空间","url":"/20221030-OpenWrt_NETGEAR_R8000_use_USB_flash_disk_to_expand_overlay/","content":"一、问题OpenWrt 官方关于 netgear r8000 的信息https://openwrt.org/toh/netgear/r8000“Second data partition (79 MiB) not available in OpenWrt”\n128M 的空间，安装 OpenWrt 之后就剩下 21M 的空间可以安装插件那自然是不够用的了，于是乎就找了些扩大空间的办法，最靠谱的就是利用U盘挂载\n二、解决2.1 获取U盘信息插上 U盘 至 USB3 插口登录 OpenWrt 控制台，查看 USB 在 OpenWrt 中的名称也就是 &#x2F;dev&#x2F;sda\nroot@OpenWrt:~# cat /proc/scsi/usb-storage/0   Host scsi0: usb-storage       Vendor: SanDisk      Product: ExtremeSerial Number: AA010316152154386775     Protocol: Transparent SCSI    Transport: Bulk       Quirks: SANE_SENSEroot@OpenWrt:~# ls /dev/sda*/dev/sda\n\n2.2 安装所需软件安装相关软件因为需要格式化 U盘 至 ext4 的格式以及挂载U盘空间至 overlay\nroot@OpenWrt:~# opkg update &amp;&amp; opkg install block-mount e2fsprogs kmod-fs-ext4 kmod-usb-storage kmod-usb2 kmod-usb3\n\n2.3 格式化U盘格式化 U盘 至 ext4\nroot@OpenWrt:~# mkfs.ext4 /dev/sdamke2fs 1.46.5 (30-Dec-2021)/dev/sda contains a ext4 file system\tcreated on Sat Oct 29 08:03:58 2022Proceed anyway? (y,N) y\n2.3 挂载 U盘挂载 U盘 至 overlay重启之后，就大功告成放心地去安装各种插件吧\nroot@OpenWrt:~# mount /dev/sda /mntroot@OpenWrt:~# mkdir /tmp/rootroot@OpenWrt:~# mount -o bind / /tmp/rootroot@OpenWrt:~# cp /tmp/root/* /mnt -aroot@OpenWrt:~# umount /tmp/rootroot@OpenWrt:~# umount /mntroot@OpenWrt:~# block detect &gt; /etc/config/fstabroot@OpenWrt:~# uci set fstab.@mount[0].target=&#x27;/overlay&#x27;root@OpenWrt:~# uci set fstab.@mount[0].enabled=&#x27;1&#x27;root@OpenWrt:~# uci commit fstabroot@OpenWrt:~# reboot\n三、参考OpenWrt挂载U盘或SD卡作为根文件系统\n","categories":["homelab"],"tags":["OpenWrt"]},{"title":"Oracle - MySQL - 数据库事务隔离级别介绍","url":"/20171114-Oracle%20-%20MySQL%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%BB%8B%E7%BB%8D/","content":"名词解释\n脏读: 对于两个事物 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段. 之后, 若 T2 回滚, T1读取的内容就是临时且无效的.  \n不可重复读: 对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段. 之后, T1再次读取同一个字段, 值就不同了.  \n幻读: 对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插入了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行.\n\n数据库的4个事物隔离级别√：可能会出现×：为不会出现\n\n\n\nname\n名称\n级别\n脏读\n不可重复读\n幻读\n\n\n\nRead uncommitted\n读未提交\n1\n√\n√\n√\n\n\nRead committed\n读提交\n2\n×\n√\n√\n\n\nRepeatable read\n重复读\n3\n×\n×\n√\n\n\nSerializable\n序列化\n4\n×\n×\n×\n\n\noracleOracle 支持的 2 种事务隔离级别：READ COMMITED, SERIALIZABLE.\nOracle 默认的事务隔离级别为: READ COMMITED\nmysqlMysql 支持 4 中事务隔离级别.\nMysql 默认的事务隔离级别为: REPEATABLE READ\n延伸参考：https://www.cnblogs.com/andy6/p/6045679.html\n","categories":["sql"],"tags":["java","sql"]},{"title":"Oracle SQL语句优化 - 写出高效SQL","url":"/20170120-Oracle-SQL%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96-%E5%86%99%E5%87%BA%E9%AB%98%E6%95%88SQL/","content":"[1]选择最有效率的表名顺序只在基于规则的优化器中有效,ORACLE的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 driving table)将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表.\n[2]WHERE子句中的连接顺序ORACLE采用自下而上(从后往前)的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾\n[3]SELECT子句中避免使用’*’ORACLE在解析的过程中, 会将’*’ 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间.需要什么字段就查询什么字段，永远不要查询出不需要的字段来\n[4]减少访问数据库的次数ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等；尽量使用缓存技术；\n[5]设置单次访问合适的检索数据量在SQLPlus , SQLForms和Pro*C中重新设置ARRAYSIZE参数, 可以增加每次数据库访问的检索数据量 ,建议值为200\n\n[6]使用DECODE函数来减少处理时间使用DECODE函数可以避免重复扫描相同记录或重复连接相同的表,因为decode函数有短路效应，类似java中短路与，有合适的就会返回而不继续扫描后面的内容\n[7]整合简单,无关联的数据库访问如果你有几个简单的数据库查询语句,你可以把它们整合到一个查询中(即使它们之间没有关系),原因见**[4]**\n[8]删除重复记录，最高效的方法因为这里使用的是rowid\nDELETEFROM EMP EWHERE E.ROWID &gt;    (SELECT MIN(X.ROWID)     FROM EMP X     WHERE X.EMP_NO = E.EMP_NO);\n[9]用TRUNCATE替代DELETE当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. (注: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML)\n[10]尽量多使用COMMIT只要有可能,在程序中尽量多使用COMMIT, 这样程序的性能得到提高,需求也会因为COMMIT所释放的资源而减少:COMMIT所释放的资源: \n\n回滚段上用于恢复数据的信息\n被程序语句获得的锁\nredo log buffer 中的空间\nORACLE为管理上述3种资源中的内部花费\n\n[11]用Where子句替换HAVING子句避免使用HAVING子句, HAVING在检索出所有记录后对结果集进行过滤。这个处理需要排序,总计等操作。 如果能通过WHERE子句限制记录的数目,那就能减少这方面的开销. (非oracle中)on、where、having这三个都可以加条件的子句中，on是最先执行，where次之，having最后，因为on是先把不符合条件的记录过滤后才进行统计，它就可以减少中间运算要处理的数据，按理说应该速度是最快的，where也应该比having快点的，因为它过滤数据后才进行sum，在两个表联接时才用on的，所以在一个表的时候，就剩下where跟having比较了。在这单表查询统计的情况下，如果要过滤的条件没有涉及到要计算字段，那它们的结果是一样的，只是where可以使用rushmore技术，而having就不能，在速度上后者要慢如果要涉及到计算的字段，就表示在没计算之前，这个字段的值是不确定的，根据上篇写的工作流程，where的作用时间是在计算之前就完成的，而having就是在计算后才起作用的，所以在这种情况下，两者的结果会不同。在多表联接查询时，on比where更早起作用。系统首先根据各个表之间的联接条件，把多个表合成一个临时表后，再由where进行过滤，然后再计算，计算完后再由having进行过滤。由此可见，要想过滤条件起到正确的作用，首先要明白这个条件应该在什么时候起作用，然后再决定放在那里\n[12]减少对表的查询在含有子查询的SQL语句中,要特别注意减少对表的查询。例子：\nSELECT TAB_NAMEFROM TABLESWHERE (TAB_NAME,       DB_VER) =    (SELECT TAB_NAME,            DB_VER     FROM TAB_COLUMNS     WHERE VERSION = 604)\n[13]通过内部函数提高SQL效率复杂的SQL往往牺牲了执行效率。能够掌握上面的运用函数解决问题的方法在实际工作中是非常有意义的。一般把复杂的sql分解再拼起来。\n[14]使用表的别名(Alias)当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。\n[15]用EXISTS替代IN、用NOT EXISTS替代NOT IN在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接。在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率。在子查询中,NOT IN子句将执行一个内部的排序和合并。无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历).。为了避免使用NOT IN ,我们可以把它改写成外连接(Outer Joins)或NOT EXISTS.\n高效：\nSELECT *FROM EMP (基础表)WHERE EMPNO &gt; 0  AND EXISTS    (SELECT &#x27;X&#x27;  FROM DEPT  WHERE  DEPT.DEPTNO = EMP.DEPTNO  AND  LOC = &#x27;MELB&#x27;)\n低效：\nSELECT *FROM EMP (基础表)WHERE EMPNO &gt; 0  AND DEPTNO IN    (SELECT DEPTNO     FROM DEPT     WHERE LOC = &#x27;MELB&#x27;)\n[16]识别’低效执行’的SQL语句虽然目前各种关于SQL优化的图形化工具层出不穷\n但是写出自己的SQL工具来解决问题始终是一个最好的方法:\nSELECT EXECUTIONS,       DISK_READS,       BUFFER_GETS,       ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio,       ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run,       SQL_TEXTFROM V$SQLAREAWHERE EXECUTIONS&gt;0  AND BUFFER_GETS &gt; 0  AND (BUFFER_GETS-DISK_READS)/BUFFER_GETS &lt; 0.8ORDER BY 4 DESC;\n[17]用索引提高效率索引是表的一个概念部分，用来提高检索数据的效率，ORACLE使用了一个复杂的自平衡B-tree结构。通常，通过索引查询数据比全表扫描要快。 当ORACLE找出执行查询和Update语句的最佳路径时， ORACLE优化器将使用索引。同样在联结多个表时使用索引也可以提高效率。另一个使用索引的好处是，它提供了主键(primary key)的唯一性验证。那些LONG或LONG RAW数据类型，你可以索引几乎所有的列。 通常，在大型表中使用索引特别有效。当然，你也会发现，在扫描小表时，使用索引同样能提高效率。虽然使用索引能得到查询效率的提高，但是我们也必须注意到它的代价. 索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时, 索引本身也会被修改。这意味着每条记录的INSERT , DELETE , UPDATE将为此多付出4 , 5 次的磁盘I&#x2F;O 。 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。定期的重构索引是有必要的。\nALTER  INDEX &lt;INDEXNAME&gt; REBUILD &lt;TABLESPACENAME&gt;\n[18]用EXISTS替换DISTINCT当提交一个包含一对多表信息(比如部门表和雇员表)的查询时，避免在SELECT子句中使用DISTINCT。一般可以考虑用EXIST替换，EXISTS 使查询更为迅速，因为RDBMS核心模块将在子查询的条件一旦满足后，立刻返回结果。\n低效：\nSELECT DISTINCT DEPT_NO,                DEPT_NAMEFROM DEPT D,     EMP EWHERE D.DEPT_NO = E.DEPT_NO\n高效:\nSELECT DEPT_NO,       DEPT_NAMEFROM DEPT DWHERE EXISTS    (SELECT &#x27;X&#x27;     FROM EMP E     WHERE E.DEPT_NO = D.DEPT_NO);\n[19]sql语句用大写因为oracle总是先解析sql语句，把小写的字母转换成大写的再执行\n[20]在java代码中尽量少用连接符“＋”连接字符串一般来说StringBuilder(非线程安全)是一个不错的选择\n[21]通常避免在索引列上使用NOT我们要避免在索引列上使用NOT，NOT会产生在和在索引列上使用函数相同的影响。当ORACLE”遇到”NOT，他就会停止使用索引转而执行全表扫描。\n[22]避免在索引列上使用计算WHERE子句中，如果索引列是函数的一部分。优化器将不使用索引而使用全表扫描。\n举例: \n低效： \nSELECT … FROM  DEPT  WHERE SAL * 12 &gt; 25000; \n高效: \nSELECT … FROM DEPT WHERE SAL &gt; 25000/12;\n[23]用&gt;&#x3D;替代&gt;高效: \nSELECT * FROM  EMP  WHERE  DEPTNO &gt;=4 \n低效: \nSELECT * FROM EMP WHERE DEPTNO &gt;3 \n两者的区别在于，前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO&#x3D;3的记录并且向前扫描到第一个DEPT大于3的记录。\n[24]用UNION替换OR (适用于索引列)通常情况下，用UNION替换WHERE子句中的OR将会起到较好的效果。对索引列使用OR将造成全表扫描。注意，以上规则只针对多个索引列有效。如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低。在下面的例子中， LOC_ID 和REGION上都建有索引。\n高效: \nSELECT LOC_ID,       LOC_DESC,       REGIONFROM LOCATIONWHERE LOC_ID = 10UNIONSELECT LOC_ID,       LOC_DESC,       REGIONFROM LOCATIONWHERE REGION = &#x27;&#x27;MELBOURNE&#x27;&#x27;\n低效: \nSELECT LOC_ID,       LOC_DESC,       REGIONFROM LOCATIONWHERE LOC_ID = 10  OR REGION = &#x27;&#x27;MELBOURNE&#x27;&#x27;\n如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面\n[25]用IN来替换OR这是一条简单易记的规则，但是实际的执行效果还须检验，在ORACLE8i下，两者的执行路径似乎是相同的。\n低效: \nSELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30 \n高效：\nSELECT… FROM LOCATION WHERE LOC_IN  IN (10,20,30);\n[26]避免在索引列上使用IS NULL和IS NOT NULL避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引。对于单列索引，如果列包含空值，索引中将不存在此记录。对于复合索引，如果每个列都为空，索引中同样不存在此记录。如果至少有一个列不为空，则记录存在于索引中。\n举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , ORACLE将不接受下一条具有相同A,B值（123,null）的记录(插入)。然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空。 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中，所以WHERE子句中对索引列进行空值比较将使ORACLE停用该索引。\n低效: (索引失效) \nSELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE IS NOT NULL; \n高效: (索引有效)\nSELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE &gt;=0;\n[27]总是使用索引的第一个列如果索引是建立在多个列上, 只有在它的第一个列(leading column)被where子句引用时,优化器才会选择使用该索引。这也是一条简单而重要的规则，当仅引用索引的第二个列时，优化器使用了全表扫描而忽略了索引\n[28]用UNION-ALL替换UNION当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序。如果用UNION ALL替代UNION, 这样排序就不是必要了。效率就会因此得到提高。需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录。因此各位还是要从业务需求分析使用UNION ALL的可行性。 UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存。对于这块内存的优化也是相当重要的。下面的SQL可以用来查询排序的消耗量。\n低效： \nSELECT ACCT_NUM,       BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &#x27;31-DEC-95&#x27;UNIONSELECT ACCT_NUM,       BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &#x27;31-DEC-95&#x27;\n高效: \nSELECT ACCT_NUM,       BALANCE_AMTFROM DEBIT_TRANSACTIONSWHERE TRAN_DATE = &#x27;31-DEC-95&#x27;  UNION ALL  SELECT ACCT_NUM,         BALANCE_AMT  FROM DEBIT_TRANSACTIONS WHERE TRAN_DATE = &#x27;31-DEC-95&#x27;\n[29]用WHERE替代ORDER BYORDER BY 子句只在两种严格的条件下使用索引\nORDER BY中所有的列必须包含在相同的索引中并保持在索引中的排列顺序\nORDER BY中所有的列必须定义为非空\nWHERE子句使用的索引和ORDER BY子句中所使用的索引不能并列\n例如: \n表DEPT包含以下列: \nDEPT_CODE PK NOT NULL \nDEPT_DESC NOT NULL \nDEPT_TYPE NULL\n低效: (索引不被使用) \nSELECT DEPT_CODE FROM  DEPT  ORDER BY  DEPT_TYPE \n高效: (使用索引) \nSELECT DEPT_CODE  FROM  DEPT  WHERE  DEPT_TYPE &gt; 0\n[30]避免改变索引列的类型当比较不同数据类型的数据时, ORACLE自动对列进行简单的类型转换\n假设 EMPNO是一个数值类型的索引列.\nSELECT …  FROM EMP  WHERE  EMPNO = &#x27;123&#x27; \n实际上,经过ORACLE类型转换, 语句转化为: \nSELECT …  FROM EMP  WHERE  EMPNO = TO_NUMBER(&#x27;123&#x27;) \n幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变\n现在,假设EMP_TYPE是一个字符类型的索引列\nSELECT …  FROM EMP  WHERE EMP_TYPE = 123 \n这个语句被ORACLE转换为: \nSELECT …  FROM EMP  WHERETO_NUMBER(EMP_TYPE)=123 \n因为内部发生的类型转换, 这个索引将不会被用到! \n为了避免ORACLE对你的SQL进行隐式的类型转换, 最好把类型转换用显式表现出来。 注意当字符和数值比较时, ORACLE会优先转换数值类型到字符类型\n[31]需要当心的WHERE子句某些SELECT 语句中的WHERE子句不使用索引这里有一些例子\n在下面的例子里, \n\n‘!&#x3D;’ 将不使用索引。记住, 索引只能告诉你什么存在于表中, 而不能告诉你什么不存在于表中\n‘||’是字符连接函数. 就象其他函数那样, 停用了索引\n‘+’是数学函数. 就象其他数学函数那样, 停用了索引\n相同的索引列不能互相比较,这将会启用全表扫描\n\n[32]检索数据量超过表中30%,索引失效\n如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高\n在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别。 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!\n\n[33]避免使用耗费资源的操作带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎执行耗费资源的排序(SORT)功能。\nDISTINCT需要一次排序操作, 而其他的至少需要执行两次排序。通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用其他方式重写。\n如果你的数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强。\n[34]优化GROUP BY提高GROUP BY 语句的效率，可以通过将不需要的记录在GROUP BY 之前过滤掉。\n下面两个查询返回相同结果但第二个明显就快了许多。\n低效: \nSELECT JOB,       AVG(SAL)FROM EMPGROUP JOBHAVING JOB = &#x27;PRESIDENT&#x27;OR JOB = &#x27;MANAGER&#x27;\n高效: \nSELECT JOB,       AVG(SAL)FROM EMPWHERE JOB = &#x27;PRESIDENT&#x27; OR JOB = &#x27;MANAGER&#x27;GROUP JOB\n\n本文参考其他文章整理而来\n出处：http://www.cnblogs.com/rootq/archive/2008/11/17/1334727.html\n不过互联网上这篇文章很多，都没有版权注明。我也不知道原创是谁！\n","tags":["sql","oracle","oarcle优化"]},{"title":"Oracle VM VirtualBox命令行打开虚拟机并且后台运行","url":"/20170219-Oracle-VM-VirtualBox%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/","content":"这几天在折腾Ubuntu虚拟机，想着也就让他做一台服务器罢了\n没想到安装之后发现一直没法让VirtualBox隐藏到托盘\n按正常程序走，打开一个虚拟机会出现两个GUI界面：\n\nVirtualBox界面\n虚拟机界面\n\n第一个可以在打开虚拟机之后关闭，第二个不能关闭也不能隐藏到托盘\n痛苦！！！\n这里给出解决方案：通过cmd命令行启动并且后台运行一、进入VirtualBox安装目录，我这里是C:\\tool\\Oracle\\VirtualBox&gt;\n二、列出所有安装的虚拟机C:\\tool\\Oracle\\VirtualBox&gt;VBoxManage list vms&quot;centos&quot; &#123;162f777f-e3c4-4717-8b5b-4a4e43a8b552&#125;&quot;debian&quot; &#123;48ebecba-77ec-483d-ab73-bf9ee777e2f6&#125;&quot;ubuntu&quot; &#123;d8050b3a-b04b-4fe9-8a90-16086dac0ae9&#125;\n前面是NAME，后面是UUID，之后的name用这连个代替都可以三、命令行启动虚拟机\nC:\\tool\\Oracle\\VirtualBox&gt;VBoxManage startvm &quot;ubuntu&quot; --type headlessWaiting for VM &quot;ubuntu&quot; to power on...VM &quot;ubuntu&quot; has been successfully started.\nheadless是在后台运行，并且默认开启vrdp服务，可以通过远程桌面工具来访问\n下面是打开ubuntu之后用Xshell链接的\nConnecting to 127.0.0.1:2222...Connection established.To escape to local shell, press &#x27;Ctrl+Alt+]&#x27;.Welcome to Ubuntu 16.04 LTS (GNU/Linux 4.4.0-62-generic x86_64) * Documentation:  https://help.ubuntu.com/362 个可升级软件包。0 个安全更新。Last login: Sat Feb 18 16:25:58 2017 from 10.0.2.2hisen@hisen-VirtualBox:~$ lsdownload  公共的  模板  视频  图片  文档  下载  音乐  桌面\n\n四、所有相关的命令下面所有的NAME都可以用二中的name和UUID代替\n# 列出所有安装的虚拟机VBoxManage list vms# 后台打开，无界面VBoxManage startvm &quot;NAME&quot; --type headless # gui方式启动，跟桌面点击没有区别VBoxManage startvm NAME --type gui# 列出运行中的虚拟机VBoxManage list runningvms# 关闭虚拟机，等价于点击系统关闭按钮，正常关机VBoxManage controlvm NAME acpipowerbutton# 关闭虚拟机，等价于直接关闭电源，非正常关机VBoxManage controlvm NAME poweroff# 暂停虚拟机的运行VBoxManage controlvm NAME pause# 恢复暂停的虚拟机VBoxManage controlvm NAME resume# 保存当前虚拟机的运行状态VBoxManage controlvm NAME savestate ","categories":["linux"],"tags":["linux","ubuntu"]},{"title":"Oracle 取微秒 - 记录点滴","url":"/20170923-Oracle-%E5%8F%96%E5%BE%AE%E7%A7%92-%E8%AE%B0%E5%BD%95%E7%82%B9%E6%BB%B4/","content":"昨天在群里看到有人问怎么通过sql在oracle中取微秒\n以前没有遇到过，就搜索了一下，找了一会给找到了\nselect to_char(systimestamp, &#x27;yyyy-mm-dd hh24:mi:ss ff&#x27;) from dual;\n输出:年-月-日 时:分:秒 微秒\n2017-9-24 10:38:27 129368\n很少问题是搜索引擎找不到的，学会如何描述问题才是关键\n","categories":["java"],"tags":["sql","oracle"]},{"title":"Oracle中exists在update中无法限制住条件，在select中可以","url":"/20170323-Oracle%E4%B8%ADexists%E5%9C%A8update%E4%B8%AD%E6%97%A0%E6%B3%95%E9%99%90%E5%88%B6%E4%BD%8F%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%9C%A8select%E4%B8%AD%E5%8F%AF%E4%BB%A5/","content":"这个问题是自己写的一个bug，标示不知道原因是什么\n现在暂时使用 in 代替解决了\n下面的查询是能限制住acct_type\nSELECT ew.customer_id,cf.acct_typeFROM ew_quota_info ew,     cf_customer cfWHERE cf.acct_type in(2,3)  AND ew.customer_id = cf.id\n但是在update的时候,会把acct_type&#x3D;1的也更新了\nupdate ew_quota_info ewset ew.all_amt = 100000where exists(SELECT ew.customer_idFROM ew_quota_info ew,     cf_customer cfWHERE cf.acct_type in(2,3)  AND ew.customer_id = cf.id)","categories":["sql"],"tags":["mysql","oracle"]},{"title":"oracle全局查找某字段所在的表","url":"/20170612-Oracle%E5%85%A8%E5%B1%80%E6%9F%A5%E6%89%BE%E6%9F%90%E5%AD%97%E6%AE%B5%E6%89%80%E5%9C%A8%E7%9A%84%E8%A1%A8/","content":"下面这个存储过程是查找数据库中某个字段值为：hisen 的表\ndeclarel_cnt    varchar2(20);v_sql  varchar2(4000);v_tablename varchar(200);  cursor cursor_jsdx is select &#x27;select count(*) from &#x27; || table_name || &#x27; where NAME=&#x27;&#x27;hisen&#x27;&#x27;&#x27;,table_name from user_tab_columns where column_name=&#x27;NAME&#x27;;  --注：这里的字段名要大写begin     open cursor_jsdx;     Loop            fetch cursor_jsdx into v_sql,v_tablename;            exit when cursor_jsdx%notfound;            execute immediate v_sql       into l_cnt;                    if l_cnt &gt;0 then            ---如果该表有那内容的就打印那个表的名字。            dbms_output.put_line(v_tablename);         end if;     end loop;    Close cursor_jsdx;end;\n","categories":["sql"],"tags":["oracle"]},{"title":"Oracle 分页的三种方式","url":"/20170411-Oracle%E5%88%86%E9%A1%B5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/","content":"第一种：\nselect *  from (select t.*, rownum rn          from (select * from EW_AUTH_FLOW) t         where rownum &lt;= 5) where rn &gt; 2;\n第二种：\nselect *  from (select t.*, rownum rn from ew_auth_flow t where rownum &lt;= 5) where rn &gt; 2;\n第三种：\nselect *  from (select t.*, rownum rn from ew_auth_flow t) where rn between 2 and 5;\n","categories":["database"],"tags":["sql"]},{"title":"Oracle性能优化常用的SQL","url":"/20170329-Oracle%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B8%B8%E7%94%A8%E7%9A%84SQL/","content":"使用如下sql能查出相应的信息，oracle博大精深要掌握得花时间\n太长了，来个阅读全文吧\n\n--显示数据库当前连接数select count(*) from v$process;--显示数据库最大连接数select value from v$parameter where name =&#x27;processes&#x27;;--修改最大Oracle最大连接数:alter system set processes = 300 scope = spfile;--显示当前session连接数select count(*) from v$session;--查看当前有哪些用户正在使用数据SELECT osuser, a.username,cpu_time/executions/1000000||&#x27;s&#x27;, sql_fulltext,machine from v$session a, v$sqlarea b where a.sql_address =b.address order by cpu_time/executions desc;--查看连接oracle的所有机器的连接数select machine,count(*) from v$session group by machine;--查看连接oracle的所有机器的连接数和状态select machine,status,count(*) from v$session group by machine,status order by status;--查看消耗磁盘读取最多的SQL Top 5：select disk_reads,sql_text,SQL_FULLTEXTfrom (select sql_text,disk_reads,SQL_FULLTEXT,   dense_rank() over     (order by disk_reads desc) disk_reads_rank   from v$sql)where disk_reads_rank &lt;=5;--开始--通过linux中消耗资源高的进程号获取oracle消耗资源的sql语句：--1.linux中使用top命名查看oracle进程中消耗资源最高的进程号；--2.oracle中使用命令：select c.spid,a.p1,a.p1raw,a.p2,a.event,b.sql_text,b.SQL_FULLTEXT,b.SQL_IDfrom v$session a,v$sql b,v$process cwhere a.wait_class&lt;&gt;&#x27;Idle&#x27; and a.sql_id=b.sql_id and a.PADDR=c.addrorder by event;--3.查询结果显示出各个sql语句对应的进程号，从中找出top命令中对应消耗资源高的进程号即可找到相应的sql语句。--结束--判断回滚段竞争的SQL语句：（当Ratio大于2时存在回滚段竞争，需要增加更多的回滚段）select rn.name, rs.GETS, rs.WAITS, (rs.WAITS / rs.GETS) * 100 ratiofrom v$rollstat rs, v$rollname rnwhere rs.USN = rn.usn;---判断恢复日志竞争的SQL语句：（immediate_contention或wait_contention的值大于1时存在竞争）select name,(t.IMMEDIATE_MISSES / decode((t.IMMEDIATE_GETS + t.IMMEDIATE_MISSES),0,-1,(t.IMMEDIATE_GETS + t.IMMEDIATE_MISSES))) * 100 immediate_contention,(t.MISSES / decode((t.GETS + t.MISSES), 0, -1, (t.GETS + t.MISSES))) * 100 wait_contentionfrom v$latch twhere name in (&#x27;redo copy&#x27;, &#x27;redo allocation&#x27;);--判断表空间碎片：（如果最大空闲空间占总空间很大比例则可能不存在碎片，如果比例较小，且有许多空闲空间，则可能碎片很多）select t.tablespace_name,sum(t.bytes),max(t.bytes),count(*),max(t.bytes) / sum(t.bytes) radiofrom dba_free_space tgroup by t.tablespace_nameorder by t.tablespace_name;--确定命中排序域的次数：select t.NAME, t.VALUE from v$sysstat t where t.NAME like &#x27;sort%&#x27;--查看当前SGA值：SGA(System Global Area)系统全局区。这是一个非常庞大的内存区间select * from v$sga;--确定高速缓冲区命中率：（如果命中率低于70％，则应该加大init.ora参数中的DB_BLOCK_BUFFER的值）select 1 - sum(decode(name, &#x27;physical reads&#x27;, value, 0)) /(sum(decode(name, &#x27;db block gets&#x27;, value, 0)) +sum(decode(name, &#x27;consistent gets&#x27;, value, 0))) hit_ratiofrom v$sysstat twhere name in (&#x27;physical reads&#x27;, &#x27;db block gets&#x27;, &#x27;consistent gets&#x27;);--确定共享池中的命中率：（如果ratio1大于1时，需要加大共享池，如果ratio2大于10％时，需要加大共享池SHARED_POOL_SIZE）select * from(  select sum(pins) pins,  sum(reloads) reloads,  (sum(reloads) / sum(pins)) * 100 ratio1  from v$librarycache),(  select sum(gets) gets,  sum(getmisses) getmisses,  (sum(getmisses) / sum(gets)) * 100 ratio2  from v$rowcache)--查询INIT.ORA参数：select * from v$parameter;--求当前会话的SID，SERIAL#SELECT Sid, Serial# FROM V$sessionWHERE Audsid = Sys_Context(&#x27;USERENV&#x27;, &#x27;SESSIONID&#x27;);--查询session的OS进程ID(有输入)SELECT p.Spid &quot;OS Thread&quot;, b.NAME &quot;Name-User&quot;, s.Program, s.Sid, s.Serial#,s.Osuser, s.MachineFROM V$process p, V$session s, V$bgprocess bWHERE p.Addr = s.PaddrAND p.Addr = b.Paddr And (s.sid=&amp;1 or p.spid=&amp;1)UNION ALLSELECT p.Spid &quot;OS Thread&quot;, s.Username &quot;Name-User&quot;, s.Program, s.Sid,s.Serial#, s.Osuser, s.MachineFROM V$process p, V$session sWHERE p.Addr = s.PaddrAnd (s.sid=&amp;1 or p.spid=&amp;1)AND s.Username IS NOT NULL;--查看锁（lock）情况SELECT /*+ RULE */ Ls.Osuser Os_User_Name, Ls.Username User_Name,Decode(Ls.TYPE,&#x27;RW&#x27;, &#x27;Row wait enqueue lock&#x27;, &#x27;TM&#x27;, &#x27;DML enqueue lock&#x27;,&#x27;TX&#x27;, &#x27;Transaction enqueue lock&#x27;, &#x27;UL&#x27;, &#x27;User supplied lock&#x27;) Lock_Type,o.Object_Name OBJECT,Decode(Ls.Lmode,1, NULL, 2, &#x27;Row Share&#x27;, 3, &#x27;Row Exclusive&#x27;,4, &#x27;Share&#x27;, 5, &#x27;Share Row Exclusive&#x27;, 6, &#x27;Exclusive&#x27;,NULL) Lock_Mode,o.Owner, Ls.Sid, Ls.Serial# Serial_Num, Ls.Id1, Ls.Id2 FROM Sys.Dba_Objects o,(SELECT s.Osuser, s.Username, l.TYPE, l.Lmode, s.Sid, s.Serial#, l.Id1,l.Id2 FROM V$session s, V$lock lWHERE s.Sid = l.Sid) LsWHERE o.Object_Id = Ls.Id1AND o.Owner &lt;&gt; &#x27;SYS&#x27;ORDER BY o.Owner, o.Object_Name;--查看等待（wait）情况SELECT Ws.CLASS, Ws.COUNT COUNT, SUM(Ss.VALUE) Sum_ValueFROM V$waitstat Ws, V$sysstat SsWHERE Ss.NAME IN (&#x27;db block gets&#x27;, &#x27;consistent gets&#x27;)GROUP BY Ws.CLASS, Ws.COUNT;--求process/session的状态SELECT p.Pid, p.Spid, s.Program, s.Sid, s.Serial#FROM V$process p, V$session sWHERE s.Paddr = p.Addr;--查看表空间的名称及大小select t.tablespace_name, round(sum(bytes/(1024*1024)),0) ts_sizefrom dba_tablespaces t, dba_data_files dwhere t.tablespace_name = d.tablespace_namegroup by t.tablespace_name;--查看表空间物理文件的名称及大小select tablespace_name, file_id, file_name,round(bytes/(1024*1024),0) total_spacefrom dba_data_filesorder by tablespace_name;--查看回滚段名称及大小select segment_name, tablespace_name, r.status,(initial_extent/1024) InitialExtent,(next_extent/1024) NextExtent,--查看控制文件select name from v$controlfile;--查看日志文件select member from v$logfile;--查看表空间的使用情况select sum(bytes)/(1024*1024) as free_space,tablespace_namefrom dba_free_spacegroup by tablespace_name;SELECT A.TABLESPACE_NAME,A.BYTES TOTAL,B.BYTES USED, C.BYTES FREE,(B.BYTES*100)/A.BYTES &quot;% USED&quot;,(C.BYTES*100)/A.BYTES &quot;% FREE&quot;FROM SYS.SM$TS_AVAIL A,SYS.SM$TS_USED B,SYS.SM$TS_FREE CWHERE A.TABLESPACE_NAME=B.TABLESPACE_NAME AND A.TABLESPACE_NAME=C.TABLESPACE_NAME;--捕捉运行很久的SQLselect username,sid,opname,round(sofar*100 / totalwork,0) || &#x27;%&#x27; as progress,time_remaining,sql_textfrom v$session_longops , v$sqlwhere time_remaining &lt;&gt; 0and sql_address = addressand sql_hash_value = hash_value--耗资源的进程（top session）select s.schemaname schema_name, decode(sign(48 - command), 1,to_char(command), &#x27;Action Code #&#x27; || to_char(command) ) action, statussession_status, s.osuser os_user_name, s.sid, p.spid , s.serial# serial_num,nvl(s.username, &#x27;[Oracle process]&#x27;) user_name, s.terminal terminal,s.program program, st.value criteria_value from v$sesstat st, v$session s , v$process pwhere st.sid = s.sid and st.statistic# = to_number(&#x27;38&#x27;) and (&#x27;ALL&#x27; = &#x27;ALL&#x27;or s.status = &#x27;ALL&#x27;) and p.addr = s.paddr order by st.value desc, p.spid asc, s.username asc, s.osuser asc--查看有哪些实例在运行：select * from v$active_instances;\n","categories":["DB"],"tags":["oracle"]},{"title":"PLSQL注册码 - 9999/12/31","url":"/20170214-PLSQL%E6%B3%A8%E5%86%8C%E7%A0%81-9999-12-31/","content":"PLSQL注册码过期时间为：9999&#x2F;12&#x2F;31\nRegistration successful01.601769 - unlimited user licenceservice contract：9999/12/31\n\nProduct Code：\n4t46t6vydkvsxekkvf3fjnpzy5wbuhphqz\nserial Number：\n601769\npassword：\nxs374ca","categories":["软件"],"tags":["java","PLSQL"]},{"title":"介绍 | RASP","url":"/20211105-RASP-introduce/","content":"一、背景翻看书签的时候偶然发现 RASP 两个收藏脑子里毫无相关内容，细看之下，收获不小ps：是不是看看收藏夹，能有意外收获\n安全无小事，从点滴做起。要有安全意识。安全投入的比例，可以根据公司所处的行业公司规模进行相应调整。安全投入包括：软件安全设计、招人、买设备、买服务、做评估。\n二、介绍2.1 RASP 是什么RASP( Runtime Application Self-Protection )是一种在运行时检测攻击并且进行自我保护的一种技术。\n\n\n2.2 RASP 优缺点化繁为简，抓住事情的本质，这就是优势。\n\n做一件事，方式方法有很多，最终的目的都一样。对于安全来说，攻击方式千变万化，但是”攻击动作”万变不离其宗。RASP 通过监控”攻击动作”进行自我保护，而不是对攻击方式的识别与防御。\n2.2.1 优势\n通过 hook，深度监控应用执行。\n运行时自动识别处理用户输入威胁。\n以 Agent 方式运行，不侵入应用程序。\n\n攻击动作\n\n文件上传\n文件读取\n文件写入\n文件重命名\n文件遍历\n命令执行\n反序列化\n…更多请看\n\n2.2.2 劣势\n性能有一定影响，单次请求影响 1~7 ms\n\n2.3 RASP 与 WAF、IDS当发生 SQL 注入攻击时，WAF 和 IDS 只能看到 HTTP 请求。而 RASP 不但能看到完整 SQL 语句，还可以和 HTTP 请求关联，并结合语义引擎、用户输入识别等能力，实现对 SQL 注入的检测。ps：WAF 可以理解为安全网关，门卫。IDS 入侵检测系统。\n三、参考\nOpenRASP - 架构说明\nOpenRASP - Hook 函数列表\nJava RASP浅析——以百度OpenRASP为例\n【软件安全设计】安全开发生命周期（SDL）\nTencent - Java安全指南\n\n","categories":["安全"],"tags":["java","soft"]},{"title":"Redis counter demo -  redis并发计数器","url":"/20180111-Redis%20counter%20demo%20-%20%20redis%E5%B9%B6%E5%8F%91%E8%AE%A1%E6%95%B0%E5%99%A8/","content":"一、说明利用redis操作的原子性，实现java 多线程并发的情况下实现计数器。\n我本机测试多个线程操作之后，结果会出现一定的延迟，但是最终数字是ok的\n应该是redis内部做了一个类似于队列的功能。\n需要注意的是，得使用redis连接的线程池，不然会出现异常\n这里有一个：JedisUtil 下面用到了\n二、 代码实现2.1 redis操作类package com.hisen.thread.count_click_by_redis;import com.hisen.utils.JedisUtil;import redis.clients.jedis.JedisPool;/** * @author hisenyuan * @description 操作redis的线程类 */public class ClickRedis &#123;  /**   * 必须使用线程池，而且线程池要大于并发数，否则会出现redis超时   */  private static JedisPool jedis = JedisUtil.getPool();  public static void click() &#123;    jedis.getResource().incrBy(&quot;hisen&quot;, 1);  &#125;  public static int getCount() &#123;    return Integer.parseInt(jedis.getResource().get(&quot;hisen&quot;));  &#125;  public static void declare() &#123;    jedis.getResource().del(&quot;hisen&quot;);    jedis.close();  &#125;&#125;\n2.2 线程类,模拟点击package com.hisen.thread.count_click_by_redis;/** * @author hisenyuan * @description 执行点击的线程类 */public class CountClickByRedisThread extends Thread&#123;  private int id;  public CountClickByRedisThread(int id) &#123;    this.id = id;  &#125;  @Override  public void run() &#123;    super.run();    ClickRedis.click();    int count = ClickRedis.getCount();    System.out.println(&quot;task:&quot; + id + &quot;\\t 执行完毕\\t线程编号：&quot; + this.getId() + &quot;\\t当前值：&quot; + count);  &#125;&#125;\n2.3 主线程 - 启动类\npackage com.hisen.thread.count_click_by_redis;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;public class Main &#123;  public static void main(String[] args) throws InterruptedException &#123;    /**     * 5 - corePoolSize：核心池的大小     * 10 - maximumPoolSize：线程池最大线程数，它表示在线程池中最多能创建多少个线程     * 200 - keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。     * unit - unit：参数keepAliveTime的时间单位，有7种取值     * workQueue：一个阻塞队列，用来存储等待执行的任务     */    ThreadPoolExecutor executor = new ThreadPoolExecutor(        50,        100,        200,        TimeUnit.MICROSECONDS,        new ArrayBlockingQueue&lt;Runnable&gt;(50));    // 开启50个线程    for (int i = 0; i &lt; 50; i++) &#123;      executor.execute(new CountClickByRedisThread(i));    &#125;    System.out.println(&quot;已经开启所有的子线程&quot;);    // 启动一次顺序关闭，执行以前提交的任务，但不接受新任务。    executor.shutdown();    // 判断所有线程是否已经执行完毕    while (true) &#123;      if (executor.isTerminated()) &#123;        System.out.println(&quot;所有的子线程都结束了！&quot;);        // 清除redis数据        ClickRedis.declare();        break;      &#125;      Thread.sleep(100);    &#125;  &#125;&#125;\n","categories":["sql"],"tags":["redis"]},{"title":"计算机科学与技术反思录【转】","url":"/20240509-Reflection-on-Computer-Science-and-Technology/","content":"0. 背景本文来自一朋友给转发的 txt 文件。\n朋友说：\n\n对我产生深远影响的一篇帖子，改变了我的命运。2008 年毕业后，就再也没有见过这篇文章，今天在网盘偶然翻到了，分享给大家。还是大一的时候，一位计算机专业的老师转给了我这篇文章，后来我基本上都按里面的教材来学习的。作为本科生，应届加入菊花厂(最核心的预研部门)，这篇文章对我的启发起到了至关重要的作用。没有这篇文章的引导，我的大学很可能是懵懵懂懂中度过的。这篇文章清晰的说明了计算机系的学生：应该学什么，为什么要学这些，怎么学。\n\n我说：\n\n虽然这篇文章有争议( 因抄袭了另外一位大师的文章而被人喷了 )但是确实把计算机科学与技术来龙去脉讲清楚了，而且给出了清晰的学习路径，值得学习&#x2F;分享。\n\n1. 正文发信人: bolshevist (猛士), 信区: CS标 题: 计算机科学与技术反思录【转】发信站: 瀚海星云 (Fri Dec 26 13:42:49 2003)\n作者：曾毅\n计算机科学与技术这一门科学深深的吸引着我们这些同学们，上计算机系已经有近三年了，自己也做了一些思考,我一直认为计算机科学与技术这门专业，在本科阶段是不可能切分成计算机科学和计算机技术的，因为计算机科学需要相当多的实践，而实践需要技术；每一个人(包括非计算机专业)，掌握简单的计算机技术都很容易（包括程序设计），但计算机专业的优势就在于，我们掌握许多其他专业并不“深究”的东西，例如，算法，体系结构，等等。非计算机专业的人可以很容易地做一个芯片，写一段程序，但他们做不出计算机专业能够做出来的大型系统。今天我想专门谈一谈计算机科学，并将重点放在计算理论上。\n\n\n计算机理论的一个核心问题——从数学谈起：记得当年大一入学，每周六课时高等数学，天天作业不断(那时是六日工作制)。颇有些同学惊呼走错了门:咱们这到底念的是什么系？不错，你没走错门，这就是计算机科学与技术系。我国计算机科学系里的传统是培养做学术研究，尤其是理论研究的人（方向不见得有问题，但是做得不是那么尽如人意）。而计算机的理论研究，说到底了，如网络安全，图形图像学，视频音频处理，哪个方向都与数学有着很大的关系，虽然也许是正统数学家眼里非主流的数学。这里我还想阐明我的一个观点：我们都知道，数学是从实际生活当中抽象出来的理论，人们之所以要将实际抽象成理论，目的就在于想用抽象出来的理论去更好的指导实践，有些数学研究工作者喜欢用一些现存的理论知识去推导若干条推论，殊不知其一：问题考虑不全很可能是个错误的推论，其二：他的推论在现实生活中找不到原型，不能指导实践。严格的说，我并不是一个理想主义者，政治课上学的理论联系实际一直是指导我学习科学文化知识的航标（至少我认为搞计算机科学与技术的应当本着这个方向）。其实我们计算机系学数学光学高等数学是不够的（典型的工科院校一般都开的是高等数学），我们应该像数学系一样学一下数学分析（清华计算机系开的好像就是数学分析），数学分析这门科学，咱们学计算机的人对它有很复杂的感情。在于它是偏向于证明型的数学课程，这对我们培养良好的分析能力极有帮助。我的软件工程学导师北工大数理学院的王仪华先生就曾经教导过我们，数学系的学生到软件企业中大多作软件设计与分析工作，而计算机系的学生做程序员的居多，原因就在于数学系的学生分析推理能力，从所受训练的角度上要远远在我们之上。\n当年出现的怪现象是：计算机系学生的高中数学基础在全校数一数二(希望没有冒犯其它系的同学)，教学课时数也仅次于数学系，但学完之后的效果却不尽如人意。难道都是学生不努力吗，我看未见得，方向错了也说不一定，其中原因何在，发人深思。我个人的浅见是：计算机系的学生，对数学的要求固然跟数学系不同，跟物理类差别则更大。通常非数学专业的所谓“高等数学”，无非是把数学分析中较困难的理论部分删去，强调套用公式计算而已。而对计算机系来说，数学分析里用处最大的恰恰是被删去的理论部分。说得难听一点，对计算机系学生而言，追求算来算去的所谓“工程数学”已经彻底地走进了误区。记上一堆曲面积分的公式，难道就能算懂了数学？那倒不如现用现查，何必费事记呢？再不然直接用 Mathematics 或是 Matalab 好了。\n我在系里最爱做的事情就是给学弟学妹们推荐参考书。中文的数学分析书，一般都认为以北大张筑生老师的“数学分析新讲”为最好。万一你的数学实在太好，那就去看菲赫金哥尔茨的“微积分学教程”好了–但我认为没什么必要，毕竟你不想转到数学系去。吉米多维奇的“数学分析习题集”也基本上是计算型的东东。书的名气很大，倒不见得适合我们，还是那句话，重要的是数学思想的建立，生活在信息社会里我们求的是高效，计算这玩意还是留给计算机吧。不过现在多用的似乎是复旦大学的《数学分析》也是很好的教材。中国的所谓高等代数，就等于线性代数加上一点多项式理论。我以为这有好的一面，因为可以让学生较早感觉到代数是一种结构，而非一堆矩阵翻来覆去。这里不得不提南京大学林成森，盛松柏两位老师编的“高等代数”，感觉相当舒服。此书相当全面地包含了关于多项式和线性代数的基本初等结果，同时还提供了一些有用的又比较深刻的内容，如 Sturm 序列，Shermon-Morrison 公式，广义逆矩阵等等。可以说，作为本科生如能吃透此书，就可以算高手。国内较好的高等代数教材还有清华计算机系用的那本，清华出版社出版，书店里多多，一看就知道。从抽象代的观点来看，高等代数里的结果不过是代数系统性质的一些例子而已。莫宗坚先生的《代数学》里，对此进行了深刻的讨论。然而莫先生的书实在深得很，作为本科生恐怕难以接受，不妨等到自己以后成熟了一些再读。正如上面所论述的，计算机系的学生学习高等数学：知其然更要知其所以然。你学习的目的应该是：将抽象的理论再应用于实践，不但要掌握题目的解题方法，更要掌握解题思想，对于定理的学习：不是简单的应用，而是掌握证明过程即掌握定理的由来，训练自己的推理能力。只有这样才达到了学习这门科学的目的，同时也缩小了我们与数学系的同学之间思维上的差距。\n概率论与数理统计这门课很重要，可惜大多数院校讲授这门课都会少些东西。少了的东西现在看至少有随机过程。到毕业还没有听说过 Markov 过程，此乃计算机系学生的耻辱。没有随机过程，你怎么分析网络和分布式系统？怎么设计随机化算法和协议？据说清华计算机系开有“随机数学”，早就是必修课。另外，离散概率论对计算机系学生来说有特殊的重要性。而我们国家工程数学讲的都是连续概率。现在，美国已经有些学校开设了单纯的“离散概率论”课程，干脆把连续概率删去，把离散概率讲深些。我们不一定要这么做，但应该更加强调离散概率是没有疑问的。这个工作我看还是尽早的做为好。\n计算方法学（有些学校也称为数学分析学）是最后一门由数理学院给我们开的课。一般学生对这门课的重视程度有限，以为没什么用。不就是照套公式嘛！其实，做图形图像可离不开它，密码学搞深了也离不开它。而且，在很多科学工程中的应用计算，都以数值的为主。这门课有两个极端的讲法：一个是古典的“数值分析”，完全讲数学原理和算法；另一个是现在日趋流行的“科学与工程计算”，干脆教学生用软件包编程。我个人认为，计算机系的学生一定要认识清楚我们计算机系的学生为什么要学这门课，我是很偏向于学好理论后用计算机实现的，最好使用 C 语言或 C++ 编程实现。向这个方向努力的书籍还是挺多的，这里推荐大家高等教育出版社（CHEP）和施普林格出版社(Springer)联合出版的**《计算方法（Computational Methods）》**,华中理工大学数学系写的（现华中科技大学），这方面华科大做的工作在国内应算是比较多的，而个人认为以这本最好，至少程序设计方面涉及了：任意数学函数的求值，方程求根，线性方程组求解，插值方法，数值积分，场微分方程数值求解。李庆扬的那本则理论性过强，与实际应用结合得不太紧。每个学校本系里都会开一门离散数学，涉及集合论，图论，和抽象代数，数理逻辑。不过，这么多内容挤在离散数学一门课里，是否时间太紧了点？另外，计算机系学生不懂组合和数论，也是巨大的缺陷。要做理论，不懂组合或者数论吃亏可就太大了。从理想的状态来看，最好分开六门课：集合，逻辑,图论，组合，代数，数论。这个当然不现实，因为没那么多课时。也许将来可以开三门课：集合与逻辑，图论与组合，代数与数论。（这方面我们学校已经着手开始做了）不管课怎么开，学生总一样要学。下面分别谈谈上面的三组内容。古典集合论，北师大出过一本《基础集合论》不错。 数理逻辑，中科院软件所陆钟万教授的《面向计算机科学的数理逻辑》就不错。现在可以找到陆钟万教授的讲课录像，http://www.cas.ac.cn/html/Dir/2001/11/06/3391.htm 自己去看看吧。\n总的来说，学集合&#x2F;逻辑起手不难，普通高中生都能看懂。但越往后越感觉深不可测。学完以上各书之后，如果你还有精力兴趣进一步深究，那么可以试一下GTM系列中的《Introduction to Axiomatic Set Theory》和《A Course of Mathematical Logic》。这两本都有世界图书出版社的引进版。你如果能搞定这两本，可以说在逻辑方面真正入了门，也就不用再浪费时间听我瞎侃了。\n据说全中国最多只有三十个人懂图论。此言不虚。图论这东东，技巧性太强，几乎每个问题都有一个独特的方法，让人头痛。不过这也正是它魅力所在：只要你有创造性，它就能给你成就感。我的导师说，图论里面随便揪一块东西就可以写篇论文。大家可以体会里面内容之深广了吧！国内的图论书中，王树禾老师的“图论及其算法”非常成功。一方面，其内容在国内教材里算非常全面的。另一方面，其对算法的强调非常适合计算机系(本来就是科大计算机系教材)。有了这本书为主，再参考几本翻译的，如Bondy &amp; Murty的《图论及其应用》，人民邮电出版社翻译的《图论和电路网络》等等，就马马虎虎，对本科生足够了。再进一步，世界图书引进有GTM系列的”Modern Graph Theory”。此书确实经典！国内好象还有一家出版了个翻译版。不过，学到这个层次，还是读原版好。搞定这本书，也标志着图论入了门。\n离散数学方面我们北京工业大学实验学院有个世界级的专家，叫邵学才，复旦大学概率论毕业的，教过高等数学，线性代数，概率论，最后转向离散数学，出版著作无数，论文集新加坡有一本，堪称经典，大家想学离散数学的真谛不妨找来看看。这老师的课我专门去听过，极为经典。不过你要从他的不经意的话中去挖掘精髓。在同他的交谈当中我又深刻地发现一个问题，虽说邵先生写书无数，但依他自己的说法每本都差不多，我实在觉得诧异，他说主要是有大纲的限制，不便多写。这就难怪了，很少听说国外写书还要依据个什么大纲（就算有，内容也宽泛的多），不敢越雷池半步，这样不是看谁的都一样了。外版的书好就好在这里，最新的科技成果里面都有论述，别的先不说，至少是“紧跟时代的理论知识”。\n组合感觉没有太适合的国产书。还是读 Graham 和 Knuth 等人合著的经典“具体数学”吧，西安电子科技大学出版社有翻译版。\n抽象代数，国内经典为莫宗坚先生的“代数学”。此书是北大数学系教材，深得好评。然而对本科生来说，此书未免太深。可以先学习一些其它的教材，然后再回头来看“代数学”。国际上的经典可就多了，GTM系列里就有一大堆。推荐一本谈不上经典，但却最简单的，最容易学的：http://www.math.miami.edu/~ec/book/ 这本“Introduction to Linear and Abstract Algebra”非常通俗易懂，而且把抽象代数和线性代数结合起来，对初学者来说非常理想，我校比较牛的同学都有收藏。\n数论方面，国内有经典而且以困难著称的”初等数论“(潘氏兄弟著，北大版)。再追溯一点，还有更加经典(可以算世界级)并且更加困难的”数论导引“(华罗庚先生的名著，科学版，九章书店重印，繁体的看起来可能比较困难)。把基础的几章搞定一个大概，对本科生来讲足够了。但这只是初等数论。本科毕业后要学计算数论，你必须看英文的书，如Bach的”Introduction to Algorithmic Number Theory”。\n计算机科学理论的根本，在于算法。现在很多系里给本科生开设算法设计与分析，确实非常正确。环顾西方世界，大约没有一个三流以上计算机系不把算法作为必修的。算法教材目前公认以Corman等著的”Introduction to Algorithms”为最优。对入门而言，这一本已经足够，不需要再参考其它书。\n再说说形式语言与自动机。我看过北邮的教材，应该说写的还清楚。但是，有一点要强调：形式语言和自动机的作用主要在作为计算模型，而不是用来做编译。事实上，编译前端已经是死领域，没有任何open problems，北科大的班晓娟博士也曾经说过，编译的技术已相当成熟。如果为了这个，我们完全没必要去学形式语言–用用yacc什么的就完了。北邮的那本在国内还算比较好，但是在深度上，在跟可计算性的联系上都有较大的局限，现代感也不足。所以建议有兴趣的同学去读英文书，不过国内似乎没引进这方面的教材。可以去互动出版网上看一看。入门以后，把形式语言与自动机中定义的模型，和数理逻辑中用递归函数定义的模型比较一番，可以说非常有趣。现在才知道，什么叫“宫室之美，百官之富”！\n计算机科学和数学的关系有点奇怪。二三十年以前，计算机科学基本上还是数学的一个分支。而现在，计算机科学拥有广泛的研究领域和众多的研究人员，在很多方面反过来推动数学发展，从某种意义上可以说是孩子长得比妈妈还高了。但不管怎么样，这个孩子身上始终流着母亲的血液。这血液是the mathematical underpinning of computer science(计算机科学的数学基础)，也就是理论计算机科学。原来在东方大学城图书馆中曾经看过一本七十年代的译本（书皮都没了，可我就爱关注这种书），大概就叫《计算机数学》。那本书若是放在当时来讲决是一本好书，但现在看来，涵盖的范围还算广，深度则差了许多，不过推荐大一的学生倒可以看一看，至少可以使你的计算数学入入门。\n最常和理论计算机科学放在一起的一个词是什么？答：离散数学。这两者的关系是如此密切，以至于它们在不少场合下成为同义词。（这一点在前面的那本书中也有体现）传统上，数学是以分析为中心的。数学系的同学要学习三四个学期的数学分析，然后是复变函数，实变函数，泛函数等等。实变和泛函被很多人认为是现代数学的入门。在物理，化学，工程上应用的，也以分析为主。随着计算机科学的出现，一些以前不太受到重视的数学分支突然重要起来。人们发现，这些分支处理的数学对象与传统的分析有明显的区别：分析研究的问题解决方案是连续的，因而微分，积分成为基本的运算；而这些分支研究的对象是离散的，因而很少有机会进行此类的计算。人们从而称这些分支为“离散数学”。“离散数学”的名字越来越响亮，最后导致以分析为中心的传统数学分支被相对称为“连续数学”。离散数学经过几十年发展，基本上稳定下来。一般认为，离散数学包含以下学科：\n\n集合论，数理逻辑与元数学。这是整个数学的基础，也是计算机科学的基础。\n图论，算法图论；组合数学，组合算法。计算机科学，尤其是理论计算机科学的核心是算法，而大量的算法建立在图和组合的基础上。\n抽象代数。代数是无所不在的，本来在数学中就非常重要。在计算机科学中，人们惊讶地发现代数竟然有如此之多的应用。\n\n但是，理论计算机科学仅仅就是在数学的上面加上“离散”的帽子这么简单吗？一直到大约十几年前，终于有一位大师告诉我们：不是。D.E.Knuth(他有多伟大，我想不用我废话了)在Stanford开设了一门全新的课程Concrete Mathematics。 Concrete这个词在这里有两层含义：\n首先：对abstract而言。Knuth认为，传统数学研究的对象过于抽象，导致对具体的问题关心不够。他抱怨说，在研究中他需要的数学往往并不存在，所以他只能自己去创造一些数学。为了直接面向应用的需要，他要提倡“具体”的数学。在这里我做一点简单的解释。例如在集合论中，数学家关心的都是最根本的问题–公理系统的各种性质之类。而一些具体集合的性质，各种常见集合，关系，映射都是什么样的，数学家觉得并不重要。然而，在计算机科学中应用的，恰恰就是这些具体的东西 Knuth能够首先看到这一点，不愧为当世计算机第一人。\n其次，Concrete是Continuous(连续)加上discrete(离散)。不管连续数学还是离散数学，都是有用的数学！\n理论与实际的结合——计算机科学研究的范畴前面主要是从数学角度来看的。从计算机角度来看，理论计算机科学目前主要的研究领域包括：可计算性理论，算法设计与复杂性分析，密码学与信息安全，分布式计算理论，并行计算理论，网络理论，生物信息计算，计算几何学，程序语言理论等等。这些领域互相交叉，而且新的课题在不断提出，所以很难理出一个头绪来。想搞搞这方面的工作，推荐看中国计算机学会的一系列书籍，至少代表了我国的权威。下面随便举一些例子。由于应用需求的推动，密码学现在成为研究的热点。密码学建立在数论(尤其是计算数论)，代数，信息论，概率论和随机过程的基础上，有时也用到图论和组合学等。很多人以为密码学就是加密解密，而加密就是用一个函数把数据打乱。这样的理解太浅显了。现代密码学至少包含以下层次的内容：第一，密码学的基础。例如，分解一个大数真的很困难吗？能否有一般的工具证明协议正确？第二，密码学的基本课题。例如，比以前更好的单向函数，签名协议等。第三，密码学的高级问题。例如，零知识证明的长度，秘密分享的方法。第四，密码学的新应用。例如，数字现金，叛徒追踪等。\n在分布式系统中，也有很多重要的理论问题。例如，进程之间的同步，互斥协议。一个经典的结果是：在通信信道不可靠时，没有确定型算法能实现进程间协同。所以，改进 TCP 三次握手几乎没有意义。例如时序问题。常用的一种序是因果序，但因果序直到不久前才有一个理论上的结果….例如，死锁没有实用的方法能完美地对付。例如,……操作系统研究过就自己去举吧！如果计算机只有理论，那么它不过是数学的一个分支，而不成为一门独立的科学。事实上，在理论之外，计算机科学还有更广阔的天空。\n我一直认为，4年根本不够学习计算机的基础知识，因为面太宽了……这方面我想先说说我们系在各校普遍开设的《计算机基础》。在高等学校开设《计算机基础课程》是我国高教司明文规定的各专业必修课程要求。主要内容是使学生初步掌握计算机的发展历史，学会简单的使用操作系统，文字处理，表格处理功能和初步的网络应用功能。但是在计算机科学系教授此门课程的目标决不能与此一致。在计算机系课程中目标应是：让学生较为全面的了解计算机学科的发展，清晰的把握计算机学科研究的方向，发展的前沿即每一个课程在整个学科体系中所处的地位。搞清各学科的学习目的，学习内容，应用领域。使学生在学科学习初期就对整个学科有一个整体的认识，以做到在今后的学习中清楚要学什么，怎么学。计算机基本应用技能的位置应当放在第二位或更靠后，因为这一点对于本系的学生应当有这个摸索能力。这一点很重要。推荐给大家一本书：机械工业出版社的《计算机文化》（New Perspective of Computer Science），看了这本书我才深刻的体会到自己还是个计算机科学初学者，才比较透彻的了解了什么是计算机科学。另外在厦门大学赵致琢老师的著作《计算科学导论》当中的很多经典理论都是在同类书籍中很难找到的。**看看他也许你才会明白一个最基本的问题：为什么计算机科学叫计算科学更为准确。**这本书在世界上也可成为精品级的著作。\n一个一流计算机系的优秀学生决不该仅仅是一个编程高手，但他一定首先是一个编程高手。我上大学的时候，第一门专业课是C语言程序设计，念计算机的人从某种角度讲相当一部分人是靠写程序吃饭的。在我们北京工业大学实验学院计算机系里一直有这样的争论（时至今日CSDN上也有），关于第一程序设计语言该用哪一种。**我个人认为，用哪种语言属于末节，关键在养成良好的编程习惯。**当年老师对我们说，打好基础后学一门新语言只要一个星期。现在我觉得根本不用一个星期，前提是先把基础打好。不要再犹豫了，学了再说，等你抉择好了，别人已经会了几门语言了。\n汇编语言和微机原理是两门特烦人的课。你的数学&#x2F;理论基础再好，也占不到什么便宜。这两门课之间的次序也好比先有鸡还是先有蛋，无论你先学哪门，都会牵扯另一门课里的东西。所以，只能静下来慢慢琢磨。这就是典型的工程课，不需要太多的聪明和顿悟，却需要水滴石穿的渐悟。有关这两门课的书，计算机书店里不难找到。弄几本最新的，对照着看吧。组成原理推荐《计算机组成与结构》清华大学王爱英教授写的。汇编语言大家拿8086&#x2F;8088入个门，之后一定要学80x86汇编语言。实用价值大，不落后，结构又好，写写高效病毒，高级语言里嵌一点汇编，进行底层开发，总也离不开他，推荐清华大学沈美明的《IBM—PC汇编语言程序设计》。有些人说不想了解计算机体系结构，也不想制造计算机，所以诸如计算机原理，汇编语言，接口之类的课觉得没必要学，这样合理吗？显然不合理，这些东西迟早得掌握，肯定得接触，而且，这是计算机专业与其他专业学生相比的少有的几项优势。做项目的时候，了解这些是非常重要的，不可能说，仅仅为了技术而技术，只懂技术的人最多做一个编码工人，而永远不可能全面地了解整个系统的设计，而编码工人是越老越不值钱。\n关于组成原理还有个讲授的问题，在我学这门课程时老师讲授时把CPU工作原理誉微程序设计这一块略掉了，理由是我们国家搞CPU技术不如别的国家，搞了这么长时间好不容易出了个龙芯比Intel的还差个十万八千里，所以建议我们不要学了。我看这在各校也未见得不是个问题吧！若真是如他所说，那中国的计算机科学哪个方向都可以停了，软硬件，应用，有几项搞得过美国，搞不过别人就不搞了，那我们坐在这里干什么？教学的观念需要转变的。\n模拟电路这东东，如今不仅计算机系学生搞不定，电子系学生也多半害怕。如果你真想软硬件通吃，那么建议你先看看邱关源的“电路原理”，也许此后再看模拟电路底气会足些。教材：康华光的“电子技术基础”（高等教育出版社）还是不错的（我校电子系在用）。有兴趣也可以参考童诗白的书。数字电路比模拟电路要好懂得多。推荐大家看一看我们北工大刘英娴教授写的《数字逻辑》业绩人士都说这本书很有参考价值（机械工业出版社的）。原因很明了，实用价值高，能听听她讲授的课程更是有一种“享受科学”的感觉。清华大学阎石的书也算一本好教材，遗憾的一点是集成电路讲少了些。真有兴趣，看一看大规模数字系统设计吧（北航那本用的还比较多）。\n计算机系统结构该怎么教，国际上还在争论。国内能找到的较好教材为Stallings的”Computer Organization and Architecture esigning for Performance”(清华影印本)。国际上最流行的则是“Computer architecture: aquantitative approach”, by Patterson &amp;Hennessy。\n操作系统可以随便选用《操作系统的内核设计与实现》和《现代操作系统》两书之一。这两部都可以算经典，唯一缺点就是理论上不够严格。不过这领域属于Hardcore System,所以在理论上马虎一点也情有可原。想看理论方面的就推荐清华大学出版社《操作系统》吧，高教司司长张尧学写的，我们教材用的是那本。另外推荐一本《Windows操作系统原理》机械工业出版社的，这本书是我国操作系统专家在微软零距离考察半年，写作历时一年多写成的，教操作系统的专家除了清华大学的张尧学（现高教司司长）几乎所有人都参加了。Bill Gates亲自写序。里面不但结合windows2000,xp详述操作系统的内核，而且后面讲了一些windows编程基础，有外版书的味道，而且上面一些内容可以说在国内外只有那本书才有对windows内核细致入微的介绍，如果先把形式语言学好了，则编译原理中的前端我看只要学四个算法：最容易实现的递归下降；最好的自顶向下算法LL(k)；最好的自底向上算法LR(k)；LR(1)的简化SLR(也许还有另一简化LALR)。后端完全属于工程性质，自然又是another story。推荐教材：Kenneth C.Louden写的“Compiler Construction Principles and Practice”即是《编译原理及实践》（机械工业出版社的译本）\n学数据库要提醒大家的是，会用VFP，VB, Power builder不等于懂数据库。(这世界上自以为懂数据库的人太多了！)数据库设计既是科学又是艺术，数据库实现则是典型的工程。所以从某种意义上讲，数据库是最典型的一门计算机课程——理工结合，互相渗透。另外推荐大家学完软件工程学后再翻过来看看数据库技术，又会是一番新感觉。推荐教材：Abraham Silberschatz 等著的 “Database System Concepts”. 作为知识的完整性，还推荐大家看一看机械工业出版社的《数据仓库》译本。\n计算机网络的标准教材还是来自Tanenbaum的《ComputerNetworks》（清华大学有译本）。还有就是推荐谢希仁的《计算机网络教程》（人民邮电出版社）问题讲得比较清楚，参考文献也比较权威。不过，网络也属于Hardcore System，所以光看书是不够的。建议多读RFC，http://www.ietf.org/rfc.htm 里可以按编号下载RFC文档。从IP的读起。等到能掌握10种左右常用协议，就没有几个人敢小看你了。再做的工作我看放在网络设计上就比较好了。\n数据结构的重要性就不言而喻了，学完数据结构你会对你的编程思想进行一番革命性的洗礼，会对如何建立一个合理高效的算法有一个清楚的认识。对于算法的建立我想大家应当注意以下几点：当遇到一个算法问题时,首先要知道自己以前有没有处理过这种问题.如果见过,那么你一般会顺利地做出来;如果没见过,那么考虑以下问题:\n\n问题是否是建立在某种已知的熟悉的数据结构(例如,二叉树)上?如果不是,则要自己设计数据结构。\n问题所要求编写的算法属于以下哪种类型?(建立数据结构,修改数据结构,遍历,查找,排序…) 3.分析问题所要求编写的算法的数学性质.是否具备递归特征?(对于递归程序设计,只要设计出合理的参数表以及递归结束的条件,则基本上大功告成.) 4.继续分析问题的数学本质.根据你以前的编程经验,设想一种可能是可行的解决办法,并证明这种解决办法的正确性.如果题目对算法有时空方面的要求,证明你的设想满足其要求.一般的,时间效率和空间效率难以兼得.有时必须通过建立辅助存储的方法来节省时间.\n通过一段时间的分析,你对解决这个问题已经有了自己的一些思路.或者说,你已经可以用自然语言把你的算法简单描述出来.继续验证其正确性,努力发现其中的错误并找出解决办法.在必要的时候(发现了无法解决的矛盾),推翻自己的思路,从头开始构思.\n确认你的思路可行以后,开始编写程序.在编写代码的过程中,尽可能把各种问题考虑得详细,周密.程序应该具有良好的结构,并且在关键的地方配有注释.\n举一个例子,然后在纸上用笔执行你的程序,进一步验证其正确性.当遇到与你的设想不符的情况时,分析问题产生的原因是编程方面的问题还是算法思想本身有问题.\n如果程序通过了上述正确性验证,那么在将其进一步优化或简化。\n撰写思路分析,注释.对于具体的算法思路,只能靠你自己通过自己的知识和经验来加以获得,没有什么特定的规律(否则程序员全部可以下岗了,用机器自动生成代码就可以了).要有丰富的想象力,就是说当一条路走不通时,不要钻牛角尖,要敢于推翻自己的想法.我也只不过是初学者,说出上面的一些经验,仅供大家参考和讨论。\n\n关于人工智能，我觉得的也是非常值得大家仔细研究的，虽然不能算是刚刚兴起的学科了，但是绝对是非常有发展前途的一门学科。**我国人工智能创始人之一，北京科技大学涂序彦教授（这老先生是我的导师李小坚博士的导师）对人工智能这样定义：人工智能是模仿、延伸和扩展人与自然的智能的技术科学。**在美国人工智能官方教育网站上对人工智能作了如下定义：Artificial Intelligence, or AI for short, is a combination of computer science, physiology, and philosophy. AI is a broad topic, consisting of different fields, from machine vision to expert systems. The element that the fields of AI have in common is the creation of machines that can “think”.\n这门学科研究的问题大概说有：（1）符号主义：符号计算与程序设计基础，知识表达方法：知识与思维，产生式规则，语意网络，一阶谓词逻辑问题求解方法：搜索策略，启发式搜寻，搜寻算法，问题规约方法，谓词演算：归结原理，归结过程专家系统：建立专家系统的方法及工具（2）联接主义（神经网络学派）：1988年美国权威机构指出：数据库，网络发展呈直线上升，神经网络可能是解决人工智能的唯一途径。\n我想对于人工智能的学习，大家一定不要像学数学似的及一些现成的结论，要学会分析问题，最好能利用程序设计实现，这里推荐给大家ACM最佳博士论文奖获得者涂晓媛博士的著作《人工鱼—计算机动画的人工生命方法》（清华大学出版社）。搞人工生命的同学不会不知道国际知名的涂氏父女吧。关于人工智能的书当然首选《Artificial IntelligenceA New Synthesis》Nils J.Nilsson.鼻祖嘛！\n关于网络安全我也想在这里说两句，随着计算机技术的发展，整个社会的信息化水平突飞猛进，计算机网络技术日新月异，网络成了当即社会各个工作领域不可缺少的组成部分，只要有网络存在，网络安全问题就是一个必须解决好的问题，学习网络安全不是简简单单的收集一些黑客工具黑一黑别人的网站，而是要学习他的数学原理，实现原理，搞清底层工作机制，这样才能解决大部分的现有问题和新出现的安全问题。\n关于计算机科学的一些边缘科学我想谈一谈软件工程技术，对于一个企业，推出软件是不是就是几个程序员坐在一起，你写一段程序，我写一段程序呢？显然不是。软件工程是典型的计算机科学和数学，管理科学，心理学，社会学等学科的综合。它使我们这些搞理论和技术的人进入了一个社会。你所要考虑的不仅仅是程序的优劣，更应该考虑程序与软件的区别，软件与软件产品的区别，软件软件产品的市场前景，如何去更好的与人交流。这方面我还在学习阶段，以后这方面再写文章吧，先推荐给大家几本书：畅销20年不衰的《人月神话》（清华大学中文版，中国电力出版社影印版），《软件工程-实践者研究的方法》（机械工业出版社译本），《人件》（据说每一位微软公司的部门经理都读过这本书，推荐老总们和想当老总的同学都看看，了解一下什么是软件企业中的人）以及微软公司的《软件开发的科学与艺术》和《软件企业的管理与文化》（研究软件企业的制胜之道当然要研究微软的成功经验了！）\n关于计算机技术的学习我想是这样的：学校开设的任何一门科学都有其滞后性，不要总认为自己掌握的某门技术就已经是天下无敌手了，虽然现在Java,VB,C,C++用的都很多，怎能保证没有被淘汰的一天，我想.NET平台的诞生和X#语言的初见端倪完全可以说明问题。换言之，在我们掌握一门新技术的同时就又有更新的技术产生，身为当代的大学生应当有紧跟科学发展的素质。举个例子，就像有些同学总说，我做网页设计就喜欢直接写html，不愿意用什么Frontpage,Dreamweaver。能用语言写网页固然很好，但有高效的手段你为什么不使呢？仅仅是为了显示自己的水平高，unique?我看真正水平高的是能够以最快的速度接受新事物的人。高级程序设计语言的发展日新月异，今后的程序设计就像人们在说话一样，我想大家从xml中应是有所体会了。难道我们真就写个什么都要用汇编，以显示自己的水平高，真是这样倒不如直接用机器语言写算了。反过来说，想要以最快的速度接受并利用新技术关键还是在于你对计算机科学地把握程度。计算机技术牵扯的内容更为广泛些，一项一项说恐怕没个一年半载也说不清。我只想提醒大家的还是那句话，技术与科学是不能分家的，学好了科学同时搞技术，这才是上上策。犹如英语，原先人们与老外交流必须要个翻译，现在满马路的人都会说英语。就连21世纪英语演讲比赛的冠军都轮不到英语系的学生了。计算机也是一样的，我们必须面对的一个现实就是：计算机真就只是一个工具，如果不具备其它方面的素养，计算机系的学生虽然不能说找不到工作，不过总有一天当其他专业性人才掌握了计算机技术后将比我们出色许多。原因就在于计算机解决的大都是实际问题，实际问题的知识却是我们少有的。单一的计算机技术没有立足之地。我想是时候指出：学习每一个课程之前，都要先搞清这一课程的学习目的。这一学科的应用领域。据我自身所了解到的同龄同学和低年级的同学的学习状况：他们之中很少有人知道学一个学科的学习目的，期末考试结束了也不知道学这科做什么用。这就失去了读计算机科学的意义。当然这与现存的教育思想不能说一点关系都没有。\n总的来说，从教育角度来讲，国内高校的课程安排不是很合理，强调理论，又不愿意在理论上深入教育，无力接受新技术，想避开新技术又无法避得一干二净。我觉得关键问题就是国内的高校难于突破现状，条条框框限制着怎么求发展。我们虽然认识得到国外教育的优越性，但为什么迟迟不能采取行动？哪怕是去粗取精的取那么一点点。我们需要改变。从我们自身角度来讲，多数人4年下来既没有学习计算机科学的学术水平，也没有学习计算机技术的那种韧劲。**在我刚上大一时，我的计算机科学入门导师，淮北煤炭师范学院王爱平教授曾经对我说过这样一番话：“当你选择了计算机这一门科学，就意味着你踏上了一条不归路，就意味着你一生都要为之奋斗⋯⋯你的身后是悬崖，只有向前走，不能往后退。”**有些同学说按照这样学习学的东西太多，有的未见得有用，我想打个形象的比方：学校学出来的人都是一个球体，方方面面的知识都应具备。可是社会上需要球体的地方很少，反而需要的是砖和瓦，即精通某一行的人才。但是对于同等体积的物体，用球体来改造是最方便最省事的。学校的学生很多，为了能够使更多的学生来适应这个社会，学校也就不得以把所有的学生都打造成一个球体，然后让社会对这些学生进行再加工，成为真正能够有用的人才。即使你非常清楚自己的将来要干什么，并且非常下定决心要走自己的路，这一步你也必须走，世界是在不断变化的，你不能预料未来。想清楚，努力去干吧！\n必须结束这篇“胡侃”了，再侃下去非我力所能及。其实计算机还有很多基础课都值得一侃。怎奈我造诣有限，不敢再让内行耻笑。对于博大精深的计算机科学，我只能说我永远都是个Beginner.最后声明：这些只针对本科阶段的学习。即使把这些全弄通了，前面的路还长，计算机科学需要我们为之奋斗……学习计算机科学需要韧性，更需要创新，需要激情。深刻学习理论知识，勇于接受新技术的挑战，这才是我们这一代人应具有的素质。最后送大家一句话“Wake up every day with a feeling of passion for the difference technology will make in people’s life!”。在我大一时无意中找到了南京大学网友sir的帖子“胡侃（理论）计算机学习”，这个帖子对我的大学生活起了至关重要的作用，也因此同他成为了好友，本帖子在原有帖子的基础上改进了其中我认为不太合适的理论，修正了一些观点，在推荐教材方面结合我的学习情况有了较大改变。值得一提的是增加了一些计算机理论的内容，计算机技术的内容结合我国的教学情况和我们学习的实际情况进行了重写。感谢大家的支持，这篇文章才能比较快的完成，这里也只是写下了我在学习计算机科学时的所思所想，很不成熟。与原文相比增加了一些推荐参考书，删去了一些过陈旧的难以找到的材料。并且对一些问题作了更为详细地阐述，也增加了一些新观点。希望大家多多讨论，改进不足，让我们共同努力吧！\n完真的猛士敢于正视淋漓的鲜血，敢于直面惨淡的人生。※ 来源:．瀚海星云 bbs.ustc.edu.cn [FROM: 202.38.79.184]\n","categories":["成长"],"tags":["cs"]},{"title":"SQL语句的执行顺序 - 关键字的顺序","url":"/20171114-SQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/","content":"sql执行顺序\nfrom \njoin \non \nwhere \ngroup by(开始使用select中的别名，后面的语句中都可以使用)\navg,sum…. \nhaving \nselect \ndistinct \norder by\n\n参考资料http://blog.csdn.net/u014044812/article/details/51004754\nhttp://blog.csdn.net/bitcarmanlee/article/details/51004767 (含流程图)\n","categories":["sql"],"tags":["java","sql"]},{"title":"SQL优化之小细节 - 点滴记录","url":"/20170309-SQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B0%8F%E7%BB%86%E8%8A%82%20-%20%E7%82%B9%E6%BB%B4%E8%AE%B0%E5%BD%95/","content":"不知道现在是不是还很多人首先就把关联的id放在where的第一位\n这里有一个简单的对比，情况相同的时候，两个sql的时间相差八倍\n优：0.077s\nSELECT ew.all_amt ,       ew.customer_id,       cf.id,       cf.cert_id,       cf.acct_typeFROM ew_quota_info ew,     cf_customer cfWHERE cf.acct_type in(2,3)  AND ew.customer_id = cf.id\n劣：0.630s\nSELECT ew.all_amt ,       ew.customer_id,       cf.id,       cf.cert_id,       cf.acct_typeFROM ew_quota_info ew,     cf_customer cfWHERE ew.customer_id = cf.id  AND cf.acct_type in(2,3)\n上述原因：where子句从后往前执行，应该把大的过滤条件放在后面记录时间：2017年3月9日 10:44:59\n\n","categories":["sql"],"tags":["java","sql"]},{"title":"Shell 批量解压文件并重命名 - 解决文件名冲突","url":"/20201107-Shell-batch-decompression-and-rename/","content":"一、背景由于某种原因，需要手工处理错误日志提取某些信息。下载下来的日志文件是压缩包\n1.1 文件信息system_error.log.2020-11-01.20201105200433.zipsystem_error.log.2020-11-01.20201105195953.zipsystem_error.log.2020-11-01.20201105200830.zip...省略\n1.2 压缩包信息$ unzip -v system_error.log.2020-11-01.20201105200830.zipArchive:  system_error.log.2020-11-01.20201105200830.zip Length   Method    Size  Cmpr    Date    Time   CRC-32   Name--------  ------  ------- ---- ---------- ----- --------  ---- 4495560  Defl:N    78526  98% 11-01-2020 23:43 504551c6  system_error.log.2020-11-01--------          -------  ---                            ------- 4495560            78526  98%                            1 file\n压缩包文件名不一样，但是压缩包中的文件有一样的名字。例如：system_error.log.2020-11-01\n尝试使用如下方式，提示有重复，需要挨个选择如何处理，极度不便。于是想使用 shell 来解决（ 之前没写过 shell ）\n1.2 尝试过程\n提示有文件重复，需要处理。\n$ unzip &#x27;*.zip&#x27;Archive:  system_error.log.2020-10-15.20201105200943.zipreplace system_error.log.2020-10-15? [y]es, [n]o, [A]ll, [N]one, [r]ename:\n尝试使用 -n 参数，不覆盖\n$ unzip -n &#x27;*.zip&#x27;Archive:  system_error.log.2020-10-15.20201105200943.zip...省略100 archives were successfully processed.\n-n 表示不覆盖，有重名的直接跳过，结果就是 100 个文件只解压的 10 个。\n1.3 怎么解压并且重命名？mv A B# 把 A 改名为 B\n怎么拿到压缩包内的文件名？\n# 输出压缩包内的信息$ unzip -v system_error.log.2020-11-01.20201105200830.zipArchive:  system_error.log.2020-11-01.20201105200830.zip Length   Method    Size  Cmpr    Date    Time   CRC-32   Name--------  ------  ------- ---- ---------- ----- --------  ---- 4495560  Defl:N    78526  98% 11-01-2020 23:43 504551c6  system_error.log.2020-11-01--------          -------  ---                            ------- 4495560            78526  98%                            1 file # 使用 awk 截取相关信息 # NR 行号，NF 最后一列 # unzip -v 的输出方式可能有变动，需要自己修改位置，以得到正确的结果 $ unzip -v system_error.log.2020-11-01.20201105200830.zip | awk &#x27;&#123;if(NR==4) print $NF&#125;&#x27; system_error.log.2020-11-01\n\n二、脚本信息1.3 的问题解决了就可以开始写脚本\n2.1 脚本文件名 uf.sh\n#!/bin/sh# 压缩包目录srcDir=$1# 解压后文件存放目录dstDir=$2# 文件名序号seq=1for file in $&#123;srcDir&#125;/*do    # 判断是否为文件    if test -f $file    then        # 获取压缩包名称，例如：system_error.log.2020-11-01.20201105200830.zip        filename=$(basename $file)        # 解压文件，移动文件，并且改名(这里使用的是序号，可以截取原文件名拼接时间戳等避免重名)        unzip $filename &amp;&amp; mv `unzip -v $filename | awk &#x27;&#123;if(NR==4)&#123;print $8&#125;&#125;&#x27;` $&#123;dstDir&#125;/$((seq++))    fidone\n2.2 使用方法注意，目前在目标目录下才能正确运行\nchmod 775 uf.shsh uf.sh ./src ./dst\n然后解决问题，解压所有 100 个压缩包，并且得到 100 个文件(文件名为 1~100)。\n三、总结不得不说解决问题是最快的学习方式第一次写脚本相对耗时，也是一个不错的尝试过程。对linux系统相关的命令&#x2F;函数不熟悉，导致到处查资料，有必要系统化的看看书。\n四、参考信息\nshell 命令解压缩zip文件夹并且对解压后的文件重命名(批量)ps：没有提供注释，对新手不太友好\nshell中变量自增\nShell 截取文件名和后缀\n\n","categories":["linux"],"tags":["shell"]},{"title":"Spark第一个java程序 - 字词统计 - Spark java idea","url":"/20170802-Spark%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F%20-%20%E5%AD%97%E8%AF%8D%E7%BB%9F%E8%AE%A1%20-%20Spark%20java%20idea/","content":"在本地利用idea，java开发spark程序\n原来并不用安装spark什么的这些东西\n这样就不会那么繁琐，门槛也低了点\n具体过程如下\n一、创建工程\nidea -&gt; new Project -&gt; maven -&gt; create from archetype -&gt; maven-archetype-quickstart\npom.xml添加依赖\n\n&lt;dependency&gt;  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;  &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;  &lt;version&gt;2.0.1&lt;/version&gt;&lt;/dependency&gt;\n\n编写java代码\n\npackage com.hisen.spark;import org.apache.spark.SparkConf;import org.apache.spark.api.java.JavaRDD;import org.apache.spark.api.java.JavaSparkContext;import org.apache.spark.api.java.function.Function;/** * 第一个spark程序 * Created by hisenyuan on 2017/8/2 at 16:36. */public class SimpleApp &#123;  public static void main(String[] args) &#123;    // Should be some file on your system    String logFile = &quot;D:\\\\logs\\\\boss_debug.log&quot;;    //设置本地运行，设置名称（在spark web ui上显示）    SparkConf sparkConf = new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;Simple Application&quot;);    JavaSparkContext javaSparkContext = new JavaSparkContext(sparkConf);    JavaRDD&lt;String&gt; logData = javaSparkContext.textFile(logFile).cache();    //统计包含a的次数    long countA = logData.filter(new Function&lt;String, Boolean&gt;() &#123;      public Boolean call(String s) throws Exception &#123;        return s.contains(&quot;a&quot;);      &#125;    &#125;).count();    //统计包含b的次数    long countB = logData.filter(new Function&lt;String, Boolean&gt;() &#123;      public Boolean call(String s) throws Exception &#123;        return s.contains(&quot;b&quot;);      &#125;    &#125;).count();    System.out.printf(&quot;Lines with a: %d, lines with b: %d\\n&quot;, countA, countB);    //Lines with a: 11146, lines with b: 10760  &#125;&#125;\n\n运行main方法：结果：Lines with a: 11146, lines with b: 10760\n日志如下：\n\nC:\\hisenwork\\soft\\jdk8\\bin\\java -Dspark.master=local &quot;-javaagent:C:\\hisenwork\\IntelliJ IDEA 2017.1.1\\lib\\idea_rt.jar=59366:C:\\hisenwork\\IntelliJ IDEA 2017.1.1\\bin&quot; -Dfile.encoding=UTF-8 -classpath C:\\hisenwork\\soft\\jdk8\\jre\\lib\\charsets.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\deploy.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\access-bridge-64.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\cldrdata.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\dnsns.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\jaccess.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\jfxrt.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\localedata.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\nashorn.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\sunec.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\sunjce_provider.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\sunmscapi.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\sunpkcs11.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\ext\\zipfs.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\javaws.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\jce.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\jfr.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\jfxswt.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\jsse.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\management-agent.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\plugin.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\resources.jar;C:\\hisenwork\\soft\\jdk8\\jre\\lib\\rt.jar;C:\\hisenwork\\code\\rmitec\\SparkTest\\target\\classes;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-core_2.11\\2.0.1\\spark-core_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\avro\\avro-mapred\\1.7.7\\avro-mapred-1.7.7-hadoop2.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\avro\\avro-ipc\\1.7.7\\avro-ipc-1.7.7.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\avro\\avro\\1.7.7\\avro-1.7.7.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\avro\\avro-ipc\\1.7.7\\avro-ipc-1.7.7-tests.jar;C:\\hisenwork\\soft\\maven\\org\\codehaus\\jackson\\jackson-core-asl\\1.9.13\\jackson-core-asl-1.9.13.jar;C:\\hisenwork\\soft\\maven\\org\\codehaus\\jackson\\jackson-mapper-asl\\1.9.13\\jackson-mapper-asl-1.9.13.jar;C:\\hisenwork\\soft\\maven\\com\\twitter\\chill_2.11\\0.8.0\\chill_2.11-0.8.0.jar;C:\\hisenwork\\soft\\maven\\com\\esotericsoftware\\kryo-shaded\\3.0.3\\kryo-shaded-3.0.3.jar;C:\\hisenwork\\soft\\maven\\com\\esotericsoftware\\minlog\\1.3.0\\minlog-1.3.0.jar;C:\\hisenwork\\soft\\maven\\org\\objenesis\\objenesis\\2.1\\objenesis-2.1.jar;C:\\hisenwork\\soft\\maven\\com\\twitter\\chill-java\\0.8.0\\chill-java-0.8.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\xbean\\xbean-asm5-shaded\\4.4\\xbean-asm5-shaded-4.4.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-client\\2.2.0\\hadoop-client-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-common\\2.2.0\\hadoop-common-2.2.0.jar;C:\\hisenwork\\soft\\maven\\commons-cli\\commons-cli\\1.2\\commons-cli-1.2.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\commons\\commons-math\\2.1\\commons-math-2.1.jar;C:\\hisenwork\\soft\\maven\\xmlenc\\xmlenc\\0.52\\xmlenc-0.52.jar;C:\\hisenwork\\soft\\maven\\commons-io\\commons-io\\2.1\\commons-io-2.1.jar;C:\\hisenwork\\soft\\maven\\commons-lang\\commons-lang\\2.5\\commons-lang-2.5.jar;C:\\hisenwork\\soft\\maven\\commons-configuration\\commons-configuration\\1.6\\commons-configuration-1.6.jar;C:\\hisenwork\\soft\\maven\\commons-collections\\commons-collections\\3.2.1\\commons-collections-3.2.1.jar;C:\\hisenwork\\soft\\maven\\commons-digester\\commons-digester\\1.8\\commons-digester-1.8.jar;C:\\hisenwork\\soft\\maven\\commons-beanutils\\commons-beanutils\\1.7.0\\commons-beanutils-1.7.0.jar;C:\\hisenwork\\soft\\maven\\commons-beanutils\\commons-beanutils-core\\1.8.0\\commons-beanutils-core-1.8.0.jar;C:\\hisenwork\\soft\\maven\\com\\google\\protobuf\\protobuf-java\\2.5.0\\protobuf-java-2.5.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-auth\\2.2.0\\hadoop-auth-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\commons\\commons-compress\\1.4.1\\commons-compress-1.4.1.jar;C:\\hisenwork\\soft\\maven\\org\\tukaani\\xz\\1.0\\xz-1.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-hdfs\\2.2.0\\hadoop-hdfs-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\mortbay\\jetty\\jetty-util\\6.1.26\\jetty-util-6.1.26.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-mapreduce-client-app\\2.2.0\\hadoop-mapreduce-client-app-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-mapreduce-client-common\\2.2.0\\hadoop-mapreduce-client-common-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-yarn-client\\2.2.0\\hadoop-yarn-client-2.2.0.jar;C:\\hisenwork\\soft\\maven\\com\\google\\inject\\guice\\3.0\\guice-3.0.jar;C:\\hisenwork\\soft\\maven\\javax\\inject\\javax.inject\\1\\javax.inject-1.jar;C:\\hisenwork\\soft\\maven\\aopalliance\\aopalliance\\1.0\\aopalliance-1.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-yarn-server-common\\2.2.0\\hadoop-yarn-server-common-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-mapreduce-client-shuffle\\2.2.0\\hadoop-mapreduce-client-shuffle-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-yarn-api\\2.2.0\\hadoop-yarn-api-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-mapreduce-client-core\\2.2.0\\hadoop-mapreduce-client-core-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-yarn-common\\2.2.0\\hadoop-yarn-common-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-mapreduce-client-jobclient\\2.2.0\\hadoop-mapreduce-client-jobclient-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\hadoop\\hadoop-annotations\\2.2.0\\hadoop-annotations-2.2.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-launcher_2.11\\2.0.1\\spark-launcher_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-network-common_2.11\\2.0.1\\spark-network-common_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\fusesource\\leveldbjni\\leveldbjni-all\\1.8\\leveldbjni-all-1.8.jar;C:\\hisenwork\\soft\\maven\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.6.5\\jackson-annotations-2.6.5.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-network-shuffle_2.11\\2.0.1\\spark-network-shuffle_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-unsafe_2.11\\2.0.1\\spark-unsafe_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\net\\java\\dev\\jets3t\\jets3t\\0.7.1\\jets3t-0.7.1.jar;C:\\hisenwork\\soft\\maven\\commons-codec\\commons-codec\\1.3\\commons-codec-1.3.jar;C:\\hisenwork\\soft\\maven\\commons-httpclient\\commons-httpclient\\3.1\\commons-httpclient-3.1.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\curator\\curator-recipes\\2.4.0\\curator-recipes-2.4.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\curator\\curator-framework\\2.4.0\\curator-framework-2.4.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\curator\\curator-client\\2.4.0\\curator-client-2.4.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\zookeeper\\zookeeper\\3.4.5\\zookeeper-3.4.5.jar;C:\\hisenwork\\soft\\maven\\com\\google\\guava\\guava\\14.0.1\\guava-14.0.1.jar;C:\\hisenwork\\soft\\maven\\javax\\servlet\\javax.servlet-api\\3.1.0\\javax.servlet-api-3.1.0.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\commons\\commons-lang3\\3.3.2\\commons-lang3-3.3.2.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\commons\\commons-math3\\3.4.1\\commons-math3-3.4.1.jar;C:\\hisenwork\\soft\\maven\\com\\google\\code\\findbugs\\jsr305\\1.3.9\\jsr305-1.3.9.jar;C:\\hisenwork\\soft\\maven\\org\\slf4j\\slf4j-api\\1.7.16\\slf4j-api-1.7.16.jar;C:\\hisenwork\\soft\\maven\\org\\slf4j\\jul-to-slf4j\\1.7.16\\jul-to-slf4j-1.7.16.jar;C:\\hisenwork\\soft\\maven\\org\\slf4j\\jcl-over-slf4j\\1.7.16\\jcl-over-slf4j-1.7.16.jar;C:\\hisenwork\\soft\\maven\\log4j\\log4j\\1.2.17\\log4j-1.2.17.jar;C:\\hisenwork\\soft\\maven\\org\\slf4j\\slf4j-log4j12\\1.7.16\\slf4j-log4j12-1.7.16.jar;C:\\hisenwork\\soft\\maven\\com\\ning\\compress-lzf\\1.0.3\\compress-lzf-1.0.3.jar;C:\\hisenwork\\soft\\maven\\org\\xerial\\snappy\\snappy-java\\1.1.2.6\\snappy-java-1.1.2.6.jar;C:\\hisenwork\\soft\\maven\\net\\jpountz\\lz4\\lz4\\1.3.0\\lz4-1.3.0.jar;C:\\hisenwork\\soft\\maven\\org\\roaringbitmap\\RoaringBitmap\\0.5.11\\RoaringBitmap-0.5.11.jar;C:\\hisenwork\\soft\\maven\\commons-net\\commons-net\\2.2\\commons-net-2.2.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\scala-library\\2.11.8\\scala-library-2.11.8.jar;C:\\hisenwork\\soft\\maven\\org\\json4s\\json4s-jackson_2.11\\3.2.11\\json4s-jackson_2.11-3.2.11.jar;C:\\hisenwork\\soft\\maven\\org\\json4s\\json4s-core_2.11\\3.2.11\\json4s-core_2.11-3.2.11.jar;C:\\hisenwork\\soft\\maven\\org\\json4s\\json4s-ast_2.11\\3.2.11\\json4s-ast_2.11-3.2.11.jar;C:\\hisenwork\\soft\\maven\\com\\thoughtworks\\paranamer\\paranamer\\2.6\\paranamer-2.6.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\scalap\\2.11.0\\scalap-2.11.0.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\scala-compiler\\2.11.0\\scala-compiler-2.11.0.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\modules\\scala-parser-combinators_2.11\\1.0.1\\scala-parser-combinators_2.11-1.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\core\\jersey-client\\2.22.2\\jersey-client-2.22.2.jar;C:\\hisenwork\\soft\\maven\\javax\\ws\\rs\\javax.ws.rs-api\\2.0.1\\javax.ws.rs-api-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\hk2-api\\2.4.0-b34\\hk2-api-2.4.0-b34.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\hk2-utils\\2.4.0-b34\\hk2-utils-2.4.0-b34.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\external\\aopalliance-repackaged\\2.4.0-b34\\aopalliance-repackaged-2.4.0-b34.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\external\\javax.inject\\2.4.0-b34\\javax.inject-2.4.0-b34.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\hk2-locator\\2.4.0-b34\\hk2-locator-2.4.0-b34.jar;C:\\hisenwork\\soft\\maven\\org\\javassist\\javassist\\3.18.1-GA\\javassist-3.18.1-GA.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\core\\jersey-common\\2.22.2\\jersey-common-2.22.2.jar;C:\\hisenwork\\soft\\maven\\javax\\annotation\\javax.annotation-api\\1.2\\javax.annotation-api-1.2.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\bundles\\repackaged\\jersey-guava\\2.22.2\\jersey-guava-2.22.2.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\hk2\\osgi-resource-locator\\1.0.1\\osgi-resource-locator-1.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\core\\jersey-server\\2.22.2\\jersey-server-2.22.2.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\media\\jersey-media-jaxb\\2.22.2\\jersey-media-jaxb-2.22.2.jar;C:\\hisenwork\\soft\\maven\\javax\\validation\\validation-api\\1.1.0.Final\\validation-api-1.1.0.Final.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\containers\\jersey-container-servlet\\2.22.2\\jersey-container-servlet-2.22.2.jar;C:\\hisenwork\\soft\\maven\\org\\glassfish\\jersey\\containers\\jersey-container-servlet-core\\2.22.2\\jersey-container-servlet-core-2.22.2.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\mesos\\mesos\\0.21.1\\mesos-0.21.1-shaded-protobuf.jar;C:\\hisenwork\\soft\\maven\\io\\netty\\netty-all\\4.0.29.Final\\netty-all-4.0.29.Final.jar;C:\\hisenwork\\soft\\maven\\io\\netty\\netty\\3.8.0.Final\\netty-3.8.0.Final.jar;C:\\hisenwork\\soft\\maven\\com\\clearspring\\analytics\\stream\\2.7.0\\stream-2.7.0.jar;C:\\hisenwork\\soft\\maven\\io\\dropwizard\\metrics\\metrics-core\\3.1.2\\metrics-core-3.1.2.jar;C:\\hisenwork\\soft\\maven\\io\\dropwizard\\metrics\\metrics-jvm\\3.1.2\\metrics-jvm-3.1.2.jar;C:\\hisenwork\\soft\\maven\\io\\dropwizard\\metrics\\metrics-json\\3.1.2\\metrics-json-3.1.2.jar;C:\\hisenwork\\soft\\maven\\io\\dropwizard\\metrics\\metrics-graphite\\3.1.2\\metrics-graphite-3.1.2.jar;C:\\hisenwork\\soft\\maven\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.6.5\\jackson-databind-2.6.5.jar;C:\\hisenwork\\soft\\maven\\com\\fasterxml\\jackson\\core\\jackson-core\\2.6.5\\jackson-core-2.6.5.jar;C:\\hisenwork\\soft\\maven\\com\\fasterxml\\jackson\\module\\jackson-module-scala_2.11\\2.6.5\\jackson-module-scala_2.11-2.6.5.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\scala-reflect\\2.11.7\\scala-reflect-2.11.7.jar;C:\\hisenwork\\soft\\maven\\com\\fasterxml\\jackson\\module\\jackson-module-paranamer\\2.6.5\\jackson-module-paranamer-2.6.5.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\ivy\\ivy\\2.4.0\\ivy-2.4.0.jar;C:\\hisenwork\\soft\\maven\\oro\\oro\\2.0.8\\oro-2.0.8.jar;C:\\hisenwork\\soft\\maven\\net\\razorvine\\pyrolite\\4.9\\pyrolite-4.9.jar;C:\\hisenwork\\soft\\maven\\net\\sf\\py4j\\py4j\\0.10.3\\py4j-0.10.3.jar;C:\\hisenwork\\soft\\maven\\org\\apache\\spark\\spark-tags_2.11\\2.0.1\\spark-tags_2.11-2.0.1.jar;C:\\hisenwork\\soft\\maven\\org\\scalatest\\scalatest_2.11\\2.2.6\\scalatest_2.11-2.2.6.jar;C:\\hisenwork\\soft\\maven\\org\\scala-lang\\modules\\scala-xml_2.11\\1.0.2\\scala-xml_2.11-1.0.2.jar;C:\\hisenwork\\soft\\maven\\org\\spark-project\\spark\\unused\\1.0.0\\unused-1.0.0.jar com.hisen.spark.SimpleAppUsing Spark&#x27;s default log4j profile: org/apache/spark/log4j-defaults.properties17/08/02 17:00:09 INFO SparkContext: Running Spark version 2.0.117/08/02 17:00:10 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable17/08/02 17:00:10 INFO SecurityManager: Changing view acls to: Administrator17/08/02 17:00:10 INFO SecurityManager: Changing modify acls to: Administrator17/08/02 17:00:10 INFO SecurityManager: Changing view acls groups to:17/08/02 17:00:10 INFO SecurityManager: Changing modify acls groups to:17/08/02 17:00:10 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(Administrator); groups with view permissions: Set(); users  with modify permissions: Set(Administrator); groups with modify permissions: Set()17/08/02 17:00:11 INFO Utils: Successfully started service &#x27;sparkDriver&#x27; on port 59388.17/08/02 17:00:11 INFO SparkEnv: Registering MapOutputTracker17/08/02 17:00:11 INFO SparkEnv: Registering BlockManagerMaster17/08/02 17:00:11 INFO DiskBlockManager: Created local directory at C:\\Users\\Administrator\\AppData\\Local\\Temp\\blockmgr-630d8294-e5cb-428d-8189-4c3313e46fa317/08/02 17:00:12 INFO MemoryStore: MemoryStore started with capacity 894.3 MB17/08/02 17:00:12 INFO SparkEnv: Registering OutputCommitCoordinator17/08/02 17:00:12 INFO Utils: Successfully started service &#x27;SparkUI&#x27; on port 4040.17/08/02 17:00:12 INFO SparkUI: Bound SparkUI to 0.0.0.0, and started at http://169.254.90.236:404017/08/02 17:00:12 INFO Executor: Starting executor ID driver on host localhost17/08/02 17:00:12 INFO Utils: Successfully started service &#x27;org.apache.spark.network.netty.NettyBlockTransferService&#x27; on port 59397.17/08/02 17:00:12 INFO NettyBlockTransferService: Server created on 169.254.90.236:5939717/08/02 17:00:12 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, 169.254.90.236, 59397)17/08/02 17:00:12 INFO BlockManagerMasterEndpoint: Registering block manager 169.254.90.236:59397 with 894.3 MB RAM, BlockManagerId(driver, 169.254.90.236, 59397)17/08/02 17:00:12 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, 169.254.90.236, 59397)17/08/02 17:00:14 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 127.1 KB, free 894.2 MB)17/08/02 17:00:14 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 14.3 KB, free 894.2 MB)17/08/02 17:00:14 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on 169.254.90.236:59397 (size: 14.3 KB, free: 894.3 MB)17/08/02 17:00:14 INFO SparkContext: Created broadcast 0 from textFile at SimpleApp.java:1917/08/02 17:00:14 ERROR Shell: Failed to locate the winutils binary in the hadoop binary pathjava.io.IOException: Could not locate executable null\\bin\\winutils.exe in the Hadoop binaries.\tat org.apache.hadoop.util.Shell.getQualifiedBinPath(Shell.java:278)\tat org.apache.hadoop.util.Shell.getWinUtilsPath(Shell.java:300)\tat org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:293)\tat org.apache.hadoop.util.StringUtils.&lt;clinit&gt;(StringUtils.java:76)\tat org.apache.hadoop.mapred.FileInputFormat.setInputPaths(FileInputFormat.java:362)\tat org.apache.spark.SparkContext$$anonfun$hadoopFile$1$$anonfun$29.apply(SparkContext.scala:992)\tat org.apache.spark.SparkContext$$anonfun$hadoopFile$1$$anonfun$29.apply(SparkContext.scala:992)\tat org.apache.spark.rdd.HadoopRDD$$anonfun$getJobConf$6.apply(HadoopRDD.scala:176)\tat org.apache.spark.rdd.HadoopRDD$$anonfun$getJobConf$6.apply(HadoopRDD.scala:176)\tat scala.Option.map(Option.scala:146)\tat org.apache.spark.rdd.HadoopRDD.getJobConf(HadoopRDD.scala:176)\tat org.apache.spark.rdd.HadoopRDD.getPartitions(HadoopRDD.scala:195)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:248)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:246)\tat scala.Option.getOrElse(Option.scala:121)\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:246)\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:248)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:246)\tat scala.Option.getOrElse(Option.scala:121)\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:246)\tat org.apache.spark.rdd.MapPartitionsRDD.getPartitions(MapPartitionsRDD.scala:35)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:248)\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:246)\tat scala.Option.getOrElse(Option.scala:121)\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:246)\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1930)\tat org.apache.spark.rdd.RDD.count(RDD.scala:1134)\tat org.apache.spark.api.java.JavaRDDLike$class.count(JavaRDDLike.scala:454)\tat org.apache.spark.api.java.AbstractJavaRDDLike.count(JavaRDDLike.scala:45)\tat com.hisen.spark.SimpleApp.main(SimpleApp.java:26)17/08/02 17:00:14 INFO FileInputFormat: Total input paths to process : 117/08/02 17:00:14 INFO SparkContext: Starting job: count at SimpleApp.java:2617/08/02 17:00:15 INFO DAGScheduler: Got job 0 (count at SimpleApp.java:26) with 1 output partitions17/08/02 17:00:15 INFO DAGScheduler: Final stage: ResultStage 0 (count at SimpleApp.java:26)17/08/02 17:00:15 INFO DAGScheduler: Parents of final stage: List()17/08/02 17:00:15 INFO DAGScheduler: Missing parents: List()17/08/02 17:00:15 INFO DAGScheduler: Submitting ResultStage 0 (MapPartitionsRDD[2] at filter at SimpleApp.java:22), which has no missing parents17/08/02 17:00:15 INFO MemoryStore: Block broadcast_1 stored as values in memory (estimated size 3.2 KB, free 894.2 MB)17/08/02 17:00:15 INFO MemoryStore: Block broadcast_1_piece0 stored as bytes in memory (estimated size 1966.0 B, free 894.2 MB)17/08/02 17:00:15 INFO BlockManagerInfo: Added broadcast_1_piece0 in memory on 169.254.90.236:59397 (size: 1966.0 B, free: 894.3 MB)17/08/02 17:00:15 INFO SparkContext: Created broadcast 1 from broadcast at DAGScheduler.scala:101217/08/02 17:00:15 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 0 (MapPartitionsRDD[2] at filter at SimpleApp.java:22)17/08/02 17:00:15 INFO TaskSchedulerImpl: Adding task set 0.0 with 1 tasks17/08/02 17:00:15 INFO TaskSetManager: Starting task 0.0 in stage 0.0 (TID 0, localhost, partition 0, PROCESS_LOCAL, 5324 bytes)17/08/02 17:00:15 INFO Executor: Running task 0.0 in stage 0.0 (TID 0)17/08/02 17:00:15 INFO HadoopRDD: Input split: file:/D:/logs/boss_debug.log:0+405927317/08/02 17:00:15 INFO deprecation: mapred.tip.id is deprecated. Instead, use mapreduce.task.id17/08/02 17:00:15 INFO deprecation: mapred.task.id is deprecated. Instead, use mapreduce.task.attempt.id17/08/02 17:00:15 INFO deprecation: mapred.task.is.map is deprecated. Instead, use mapreduce.task.ismap17/08/02 17:00:15 INFO deprecation: mapred.task.partition is deprecated. Instead, use mapreduce.task.partition17/08/02 17:00:15 INFO deprecation: mapred.job.id is deprecated. Instead, use mapreduce.job.id17/08/02 17:00:15 INFO MemoryStore: Block rdd_1_0 stored as values in memory (estimated size 5.7 MB, free 888.4 MB)17/08/02 17:00:15 INFO BlockManagerInfo: Added rdd_1_0 in memory on 169.254.90.236:59397 (size: 5.7 MB, free: 888.5 MB)17/08/02 17:00:15 INFO Executor: Finished task 0.0 in stage 0.0 (TID 0). 1842 bytes result sent to driver17/08/02 17:00:16 INFO TaskSetManager: Finished task 0.0 in stage 0.0 (TID 0) in 691 ms on localhost (1/1)17/08/02 17:00:16 INFO TaskSchedulerImpl: Removed TaskSet 0.0, whose tasks have all completed, from pool17/08/02 17:00:16 INFO DAGScheduler: ResultStage 0 (count at SimpleApp.java:26) finished in 0.726 s17/08/02 17:00:16 INFO DAGScheduler: Job 0 finished: count at SimpleApp.java:26, took 1.078428 s17/08/02 17:00:16 INFO SparkContext: Starting job: count at SimpleApp.java:3317/08/02 17:00:16 INFO DAGScheduler: Got job 1 (count at SimpleApp.java:33) with 1 output partitions17/08/02 17:00:16 INFO DAGScheduler: Final stage: ResultStage 1 (count at SimpleApp.java:33)17/08/02 17:00:16 INFO DAGScheduler: Parents of final stage: List()17/08/02 17:00:16 INFO DAGScheduler: Missing parents: List()17/08/02 17:00:16 INFO DAGScheduler: Submitting ResultStage 1 (MapPartitionsRDD[3] at filter at SimpleApp.java:29), which has no missing parents17/08/02 17:00:16 INFO MemoryStore: Block broadcast_2 stored as values in memory (estimated size 3.2 KB, free 888.4 MB)17/08/02 17:00:16 INFO MemoryStore: Block broadcast_2_piece0 stored as bytes in memory (estimated size 1967.0 B, free 888.4 MB)17/08/02 17:00:16 INFO BlockManagerInfo: Added broadcast_2_piece0 in memory on 169.254.90.236:59397 (size: 1967.0 B, free: 888.5 MB)17/08/02 17:00:16 INFO SparkContext: Created broadcast 2 from broadcast at DAGScheduler.scala:101217/08/02 17:00:16 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 1 (MapPartitionsRDD[3] at filter at SimpleApp.java:29)17/08/02 17:00:16 INFO TaskSchedulerImpl: Adding task set 1.0 with 1 tasks17/08/02 17:00:16 INFO TaskSetManager: Starting task 0.0 in stage 1.0 (TID 1, localhost, partition 0, PROCESS_LOCAL, 5324 bytes)17/08/02 17:00:16 INFO Executor: Running task 0.0 in stage 1.0 (TID 1)17/08/02 17:00:16 INFO BlockManager: Found block rdd_1_0 locally17/08/02 17:00:16 INFO Executor: Finished task 0.0 in stage 1.0 (TID 1). 954 bytes result sent to driver17/08/02 17:00:16 INFO DAGScheduler: ResultStage 1 (count at SimpleApp.java:33) finished in 0.100 s17/08/02 17:00:16 INFO DAGScheduler: Job 1 finished: count at SimpleApp.java:33, took 0.139033 s17/08/02 17:00:16 INFO TaskSetManager: Finished task 0.0 in stage 1.0 (TID 1) in 99 ms on localhost (1/1)17/08/02 17:00:16 INFO TaskSchedulerImpl: Removed TaskSet 1.0, whose tasks have all completed, from poolLines with a: 11146, lines with b: 1076017/08/02 17:00:16 INFO SparkContext: Invoking stop() from shutdown hook17/08/02 17:00:16 INFO SparkUI: Stopped Spark web UI at http://169.254.90.236:404017/08/02 17:00:16 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!17/08/02 17:00:16 INFO MemoryStore: MemoryStore cleared17/08/02 17:00:16 INFO BlockManager: BlockManager stopped17/08/02 17:00:16 INFO BlockManagerMaster: BlockManagerMaster stopped17/08/02 17:00:16 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!17/08/02 17:00:16 INFO SparkContext: Successfully stopped SparkContext17/08/02 17:00:16 INFO ShutdownHookManager: Shutdown hook called17/08/02 17:00:16 INFO ShutdownHookManager: Deleting directory C:\\Users\\Administrator\\AppData\\Local\\Temp\\spark-c40f2015-170f-4633-89dd-44dcd5bacfecProcess finished with exit code 0\n","categories":["spark"],"tags":["java","spark"]},{"title":"Spring - IOC和AOP的原理","url":"/20171120-Spring%20-%20IOC%E5%92%8CAOP%E7%9A%84%E5%8E%9F%E7%90%86/","content":"简单理解IOC和AOPIOC：Inversion of Control，依赖倒置生活场景助记如有有天你想喝一瓶矿泉水，你可以去小区便利店，告诉老板你要买矿泉水，然后老板卖给你。\n但是你可能需要想这下雨天怎么去小卖部？是否要带伞？去了之后是否有我想要的水等一系列问题。\n解决这个问题：\n\n使用外卖！到平台注册，告诉平台你需要什么水。\n平台给你送到家，你只管付钱拿到水之后直接喝，不用考虑上述问题。\n\n是不是和Spring的做法很类似呢？Spring就是小卖部，你就是A对象，水就是B对象第一：在Spring中声明一个类：A第二：告诉Spring，A需要B\n\n假设A是UserAction类，而B是UserService类\n&lt;bean id=&quot;userService&quot; class=&quot;org.leadfar.service.UserService&quot;/&gt;&lt;bean id=&quot;documentService&quot; class=&quot;org.leadfar.service.DocumentService&quot;/&gt;&lt;bean id=&quot;orgService&quot; class=&quot;org.leadfar.service.OrgService&quot;/&gt;&lt;bean id=&quot;userAction&quot; class=&quot;org.leadfar.web.UserAction&quot;&gt;     &lt;property name=&quot;userService&quot; ref=&quot;userService&quot;/&gt;&lt;/bean&gt;\n在Spring这个商店（工厂）中，有很多对象&#x2F;服务：userService,documentService,orgService\n也有很多会员：userAction等等\n声明userAction需要userService即可，\nSpring将通过你给它提供的通道主动把userService送上门来，因此UserAction的代码示例类似如下所示：\npackage org.leadfar.web;public class UserAction&#123;     private UserService userService;     public String login()&#123;          userService.valifyUser(xxx);     &#125;     public void setUserService(UserService userService)&#123;           this.userService = userService;     &#125;&#125;\n在这段代码里面，你无需自己创建UserService对象（Spring作为背后无形的手，把UserService对象通过你定义的setUserService()方法把它主动送给了你，这就叫依赖注入！）\nSpring依赖注入的实现技术是：动态代理\nAOP:Aspect Oriented Programming,面向切面编程你只要做你关注的事情，其他的事情一概不管，让AOP帮你去做\n你可以灵活组合各种杂七杂八的事情交给AOP去做，而不会干扰你关注的事情。\n从Spring的角度看，AOP最大的用途就在于提供了事务管理的能力。\n事务管理就是一个关注点，你的正事就是去访问数据库，而你不想管事务（太烦）\n所以，Spring在你访问数据库之前，自动帮你开启事务，当你访问数据库结束之后，自动帮你提交&#x2F;回滚事务！\nICO 和 AOP的原理IoC的实现形式有两种：\n依赖查找：容器提供回调接口和上下文环境给组件。EJB和Apache Avalon都是使用这种方式。     \n依赖注入：组件不做定位查询，只是提供普通的Java方法让容器去决定依赖关系。容器全权负责组件的装配，它会把符合依赖关系的对象通过JavaBean属性或者构造子传递给需要的对象。\n\n通过JavaBean属性注射依赖关系的做法称为设值方法注入（Setter Injection）；\n将依赖关系作为构造子参数传入的做法称为构造子注入（Constructor Injection）。\nAP实现有多种方案，主要包括：\nAspectJ (TM)：创建于Xerox PARC. 有近十年历史，技术成熟。但其过于复杂；破坏封装；而且需要专门的Java编译器，易用性较差。\n动态代理AOP：使用JDK提供的动态代理API或字节码Bytecode处理技术来实现。基于动态代理API的具体项目有： JBoss 4.0 JBoss 4.0服务器。\n基于字节码的AOP，例如：Aspectwerkz、CGlib、Spring等。\n\n后期准备补充用过spring的朋友都知道spring的强大和高深，都觉得深不可测，\n其实当你真正花些时间读一读源码就知道它的一些技术实现其实是建立在一些最基本的技术之上而已；例如：\n\nAOP(面向方面编程)的实现是建立在CGLib提供的类代理和jdk提供的接口代理\nIOC(控制反转)的实现建立在工厂模式、Java反射机制和jdk的操作XML的DOM解析方式.\n\n参考\nhttps://www.cnblogs.com/damowang/p/4305107.html\nhttp://blog.csdn.net/linxijun120903/article/details/56487073\n\n","categories":["java"],"tags":["spring"]},{"title":"Spring Boot CLI 安装（windows）","url":"/20170713-Spring%20Boot%20CLI%20%E5%AE%89%E8%A3%85%EF%BC%88windows%EF%BC%89/","content":"SpringBootCLI是一个命令行工具，可用于快速搭建基于spring的原型。\n它支持运行Groovy脚本，这也就意味着你可以使用类似Java的语法，但不用写很多的模板代码。\nSpring Boot不一定非要配合CLI使用，但它绝对是Spring应用取得进展的最快方式.\n下载分发包\n地址:getting-started-installing-the-cli\n下载：spring-boot-cli-x.x.x.RELEASE-bin.zip (例如：spring-boot-cli-1.5.4.RELEASE-bin.zip)\n解压\n设置环境变量：C:\\hisenwork\\soft\\spring-1.5.4.RELEASE\\bin （在path中添加）\ncmd测试：spring –version\n\nspring --versionSpring CLI v1.5.4.RELEASE\n\n运行一个简单程序\n文件名称：HelloController.groovy\n文件内容：\n@RestControllerclass HelloController&#123;\t@RequestMapping(&quot;/&quot;)\tdef hello()&#123;\t\treturn &quot;Hello World&quot;\t&#125;&#125;\n运行程序：cmd进入文件所在文件夹，执行:spring run HelloController.groovy\n提醒：Resolving dependencies第一次初始化时间会久一点，耐心等待\nspring run HelloController.groovyResolving dependencies..........................  .   ____          _            __ _ _ /\\\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\( ( )\\___ | &#x27;_ | &#x27;_| | &#x27;_ \\/ _` | \\ \\ \\ \\ \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#x27;  |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v1.5.4.RELEASE)\n之后在浏览器中输入：http://localhost:8080/\n就能看到：Hello World\n","categories":["java"],"tags":["java"]},{"title":"SpringMVC把jsp改为Thymeleaf模版引擎","url":"/20170801-SpringMVC%E6%8A%8Ajsp%E6%94%B9%E4%B8%BAThymeleaf%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/","content":"Thymeleaf简介前面的例子我们使用的视图技术主要是JSP。JSP的优点是它是Java EE容器的一部分，几乎所有java EE服务器都支持JSP。缺点就是它在视图表现方面的功能很少，假如我们想迭代一个数组之类的，只能使用&lt;% %&gt;来包括Java语句进行。虽然有标准标签库（JSTL）的补足，但是使用仍然不太方便。另外JSP只能在Java EE容器中使用，如果我们希望渲染电子邮件之类的，JSP就无能为力了。\nJava生态圈广泛，自然有很多视图框架，除了JSP之外，还有Freemarker、Velocity、Thymeleaf等很多框架。Thymeleaf的优点是它是基于HTML的，即使视图没有渲染成功，也是一个标准的HTML页面。因此它的可读性很不错，也可以作为设计原型来使用。而且它是完全独立于java ee容器的，意味着我们可以在任何需要渲染HTML的地方使用Thymeleaf。\nThymeleaf也提供了spring的支持，我们可以非常方便的在Spring配置文件中声明Thymeleaf Beans，然后用它们渲染视图。\n改造 - 由jsp到Thymeleaf\n引入依赖\n\n&lt;!--thymeleaf模版 spring4.x--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt;  &lt;artifactId&gt;thymeleaf-spring4&lt;/artifactId&gt;  &lt;version&gt;3.0.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;\n\n配置ViewResolver(在spring的xml文件里)\n\n\n&lt;!-- 配置ViewResolver 使用：thymeleaf 模版引擎--&gt;  &lt;bean id=&quot;templateResolver&quot;    class=&quot;org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver&quot;&gt;    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/templates/&quot;/&gt;    &lt;property name=&quot;suffix&quot; value=&quot;.html&quot;/&gt;    &lt;property name=&quot;templateMode&quot; value=&quot;HTML5&quot;/&gt;    &lt;!-- 缓存--&gt;    &lt;property name=&quot;cacheable&quot; value=&quot;false&quot;/&gt;  &lt;/bean&gt;  &lt;bean id=&quot;templateEngine&quot;    class=&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;&gt;    &lt;property name=&quot;templateResolver&quot; ref=&quot;templateResolver&quot;/&gt;  &lt;/bean&gt;  &lt;bean class=&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;&gt;    &lt;property name=&quot;templateEngine&quot; ref=&quot;templateEngine&quot;/&gt;    &lt;property name=&quot;order&quot; value=&quot;1&quot;/&gt;    &lt;property name=&quot;characterEncoding&quot; value=&quot;UTF-8&quot;/&gt;  &lt;/bean&gt;\n\n接下来就可以直接使用了，跟之前的jsp没有什么不同\n\n@RequestMapping(value = &quot;/listpageplug/&#123;start&#125;&quot;, method = RequestMethod.GET)private String listPagePlug(@PathVariable(&quot;start&quot;) String start, Model model) &#123;  PageHelper.startPage(Integer.valueOf(start), 20);  List&lt;Book&gt; readingList = bookService.getListPlug();  model.addAttribute(&quot;books&quot;, readingList);  return &quot;readingList&quot;;&#125;\n\n到这里就改造完了，接下来就是Thymeleaf的各种用法了\n这里举一个循环遍历的例子,后台返回了books对象集合\n&lt;!--判断是否为空--&gt;&lt;tbody th:unless=&quot;$&#123;#lists.isEmpty(books)&#125;&quot;&gt;  &lt;!--循环--&gt;  &lt;tr th:each=&quot;book : $&#123;books&#125;&quot;&gt;    &lt;td th:text=&quot;$&#123;book.bookId&#125;&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;$&#123;book.name&#125;&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;$&#123;book.number&#125;&quot;&gt;&lt;/td&gt;    &lt;td&gt;      &lt;a href=&quot;&lt;%=appPath%&gt;/book/detail/$&#123;book.bookId&#125;&quot;&gt;详情&lt;/a&gt; |      &lt;a href=&quot;&lt;%=appPath%&gt;/book/del/$&#123;book.bookId&#125;&quot;&gt;删除&lt;/a&gt;    &lt;/td&gt;  &lt;/tr&gt;&lt;/tbody&gt;\n参考\nthymeleaf官方指南\n新一代Java模板引擎Thymeleaf\nThymeleaf基本知识\nthymeleaf总结文章\nThymeleaf 模板的使用\nthymeleaf 学习笔记\n\n","categories":["java"],"tags":["java","spring"]},{"title":"SpringMVC redirect & return JSON & set HTTP code","url":"/20180713-SpringMVC%20redirect%20&%20return%20JSON%20&%20set%20HTTP%20code/","content":"springmvc正常情况下redirect并且设置指定响应码，异常情况下返回json数据\n背景介绍需求就是正常情况下能redirect到指定的页面异常的情况下，能够返回JSON格式的错误信息正常情况和异常情况都需要设置HTTP Code\n代码实现@RequestMapping(value = &quot;/test&quot;, method = RequestMethod.POST)public String webCharge(HttpServletRequest request, HttpServletResponse response) &#123;    if (1==1) &#123;        response.setStatus(200);        return &quot;redirect:https://github.com/hisenyuan&quot;;    &#125; else &#123;        try &#123;            response.setStatus(405);            response.getWriter().write(JSON.toJSONString(&quot;hisenyuan&quot;));            return null;        &#125; catch (IOException e) &#123;            e.printStackTrace();            return &quot;&quot;;        &#125;    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"Test Java Code","url":"/20170120-Test-Java-Code/","content":"这里我只是贴一段代码测试一下\npackage com.hisen.interview;/** * 变量不能被重写 * * @author hisenyuan 2017年1月18日 下午10:33:33 */public class AboutExtends &#123;\tpublic static class A &#123;\t\tpublic int a = 0;\t\tpublic void fun() &#123;\t\t\tSystem.out.println(&quot;A&quot;);\t\t&#125;\t\tstatic &#123;\t\t\tSystem.out.println(&quot;Astatic&quot;);\t\t&#125;\t\t&#123;\t\t\tSystem.out.println(&quot;I&#x27;m A class&quot;);\t\t&#125;\t&#125;\tpublic static class B extends A &#123;\t\tpublic int a = 1;\t\tpublic void fun() &#123;\t\t\tSystem.out.println(&quot;B&quot;);\t\t&#125;\t\tstatic &#123;\t\t\tSystem.out.println(&quot;Bstatic&quot;);\t\t&#125;\t\t&#123;\t\t\tSystem.out.println(&quot;I&#x27;m B class&quot;);\t\t&#125;\t&#125;\tpublic static void main(String[] args) &#123;\t\t// 里面的static块方法，new了就会执行\t\t// new new B()两个都执行，new new A()执行A的\t\t//static代码块在&#123;&#125;代码块后面执行\t\tA classA = new B();\t\tSystem.out.println(classA.a);\t\tclassA.fun();\t\t// 输出信息\t\t// Astatic\t\t// Bstatic\t\t// I&#x27;m A class\t\t// I&#x27;m B class\t\t// 1\t\t// B\t\t// 多态记忆口诀\t\t// 变量多态看左边\t\t// 方法多态看右边\t\t// 静态多态看左边\t&#125;&#125;\n","tags":["java"]},{"title":"String 和 StringBuilder、StringBuffer的区别","url":"/20170208-String-%E5%92%8C-StringBuilder%E3%80%81StringBuffer%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"String和StringBuilder、StringBuffer的区别？答：Java平台提供了两种类型的字符串：String和StringBuffer&#x2F;StringBuilder，\n它们可以储存和操作字符串。其中String是只读字符串，\n也就意味着String引用的字符串内容是不能被改变的。\n而StringBuffer&#x2F;StringBuilder类表示的字符串对象可以直接进行修改。\nStringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，\n区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，\n因此它的效率也比StringBuffer要高。\n简而言之：\nString：不能被修改\nStringBuffer：可以随意修改，有synchronized修饰，是线程安全的，效率略低\nStringBuilder：可以随意修改，无synchronized修饰，不是线程安全的，效率高\n\n\n面试题1：说出程序的输出结果classStringEqualTest &#123;\tpublicstaticvoidmain(String[] args) &#123;\t\tString s1 = &quot;Programming&quot;;\t\tString s2 = new String(&quot;Programming&quot;);\t\tString s3 = &quot;Program&quot; + &quot;ming&quot;;\t\tSystem.out.println(s1 == s2);//false\t\tSystem.out.println(s1 == s3);//true\t\tSystem.out.println(s1 == s1.intern());//true\t&#125;&#125;\n存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。\nString的intern()方法就是扩充常量池的一个方法；\n当一个String实例str调用intern()方法时，\nJava查找常量池中是否有相同Unicode的字符串常量，\n如果有，则返回其的引用，\n如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用\n面试题2什么情况下用+运算符进行字符串连接比调用StringBuffer&#x2F;StringBuilder对象的append方法连接字符串性能更好？\n答：\n如果使用少量的字符串操作，使用 (+运算符)连接字符串；\n如果频繁的对大量字符串进行操作，则使用\n1：全局变量或者需要多线程支持则使用StringBuffer；\n2：局部变量或者单线程不涉及线程安全则使有StringBuilder。\n","tags":["java","StringBuilder","StringBuffer的区别"]},{"title":"Thread Pool Monitor - 线程池监控","url":"/20190905-Thread-Pool-Monitor/","content":"一、背景业务当中多处用到线程池进行异步处理;为了得知线程池设置是否合理，故需要增加线程池监控;常见的实现方式：\n\norg.springframework.scheduling.concurrent.ScheduledExecutorTask\norg.springframework.scheduling.annotation.Scheduled\n\n本文使用1的方式实现，主要是方便进行配置，可以托管多个任务;\n二、效果预览taskName:pool1-monitor. taskCount:820, completedTaskCount:820, largestPoolSize:30, poolSize:30, activeCount:0, corePoolSize:30, maximumPoolSize:50, queueSize:0taskName:pool2-monitor. taskCount:1703, completedTaskCount:1703, largestPoolSize:30, poolSize:30, activeCount:0, corePoolSize:30, maximumPoolSize:50, queueSize:0taskName:pool3-monitor. taskCount:820, completedTaskCount:448, largestPoolSize:30, poolSize:30, activeCount:30, corePoolSize:30, maximumPoolSize:50, queueSize:342\n\n三、监控逻辑代码如下:\n\npackage com.hisen.thread.monitor.threadpool;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;import java.util.List;import java.util.concurrent.ThreadPoolExecutor;/** * @author hisenyuan * @date 2019-09-05 19:45 */public class ThreadPoolMonitor implements Runnable &#123;    private static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolMonitor.class);    // xml中注入    private List&lt;ThreadPoolTaskExecutor&gt; pools;    @Override    public void run() &#123;        monitorHandle(pools);    &#125;    private void monitorHandle(List&lt;ThreadPoolTaskExecutor&gt; pools) &#123;        pools.forEach(this::handleExecutor);    &#125;    private void handleExecutor(ThreadPoolTaskExecutor p) &#123;        ThreadPoolExecutor threadPoolExecutor = p.getThreadPoolExecutor();        // 线程池需要执行的任务数        long taskCount = threadPoolExecutor.getTaskCount();        // 线程池在运行过程中已完成的任务数        long completedTaskCount = threadPoolExecutor.getCompletedTaskCount();        // 曾经创建过的最大线程数        long largestPoolSize = threadPoolExecutor.getLargestPoolSize();        // 线程池里的线程数量        long poolSize = threadPoolExecutor.getPoolSize();        // 线程池里活跃的线程数量        long activeCount = threadPoolExecutor.getActiveCount();        // 配置的核心线程数        int corePoolSize = threadPoolExecutor.getCorePoolSize();        // 配置的最大线程数        int maximumPoolSize = threadPoolExecutor.getMaximumPoolSize();        // 当前线程池队列的个数        int queueSize = threadPoolExecutor.getQueue().size();        // 线程池前缀名称        String threadNamePrefix = p.getThreadNamePrefix();        LOGGER.info(&quot;taskName:&#123;&#125;monitor. taskCount:&#123;&#125;, completedTaskCount:&#123;&#125;, largestPoolSize:&#123;&#125;, poolSize:&#123;&#125;, activeCount:&#123;&#125;, corePoolSize:&#123;&#125;, maximumPoolSize:&#123;&#125;, queueSize:&#123;&#125;&quot;                , threadNamePrefix                , taskCount                , completedTaskCount                , largestPoolSize                , poolSize                , activeCount                , corePoolSize                , maximumPoolSize                , queueSize);    &#125;    public List&lt;ThreadPoolTaskExecutor&gt; getPools() &#123;        return pools;    &#125;    public void setPools(List&lt;ThreadPoolTaskExecutor&gt; pools) &#123;        this.pools = pools;    &#125;&#125;\n\n四、spring xml配置&lt;!-- ### 线程池监控 开始 ### --&gt;&lt;bean id=&quot;threadPoolMonitorRunnable&quot; class=&quot;com.hisen.thread.monitor.threadpool.ThreadPoolMonitor&quot;&gt;    &lt;property name=&quot;pools&quot;&gt;        &lt;list&gt;            &lt;ref bean=&quot;pool1&quot; /&gt;            &lt;ref bean=&quot;pool2&quot; /&gt;            &lt;ref bean=&quot;pool3&quot; /&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!-- 定时执行的线程池 --&gt;&lt;bean id=&quot;threadPoolMonitorTask&quot; class=&quot;org.springframework.scheduling.concurrent.ScheduledExecutorTask&quot;&gt;    &lt;property name=&quot;runnable&quot; ref=&quot;threadPoolMonitorRunnable&quot;/&gt;    &lt;!-- 延迟时间，单位ms --&gt;    &lt;property name=&quot;delay&quot; value=&quot;150000&quot;/&gt;    &lt;!-- 间隔时间，单位ms --&gt;    &lt;property name=&quot;period&quot; value=&quot;5000&quot;/&gt;&lt;/bean&gt;&lt;!-- 任务调度 --&gt;&lt;bean id=&quot;scheduledExecutorFactoryBean&quot; class=&quot;org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean&quot;&gt;    &lt;!-- 执行任务的线程池个数 --&gt;    &lt;property name=&quot;poolSize&quot; value=&quot;1&quot; /&gt;    &lt;!-- 任务列表 --&gt;    &lt;property name=&quot;scheduledExecutorTasks&quot;&gt;        &lt;list&gt;            &lt;ref bean=&quot;threadPoolMonitorTask&quot;/&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!-- ### 线程池监控 结束 ### --&gt;\n","categories":["java"],"tags":["java"]},{"title":"Ubuntu 16 安装IDEA 并且设置快捷启动","url":"/20170304-Ubuntu%2016%20%E5%AE%89%E8%A3%85IDEA%20%E5%B9%B6%E4%B8%94%E8%AE%BE%E7%BD%AE%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8/","content":"安装简单，下载官网的文件(with java的比较方便)\n解压之后在bin目录下执行\nsudo sh idea.sh\n就会进入安装程序，接下来会跳出图形界面，跟windows差不多的步骤\n没有激活码可以看之前的文章\n关键的一个是我发现网上说的建立桌面快捷方式不行\n就这样弄个方便的\ncd ~ln -s /idea home/bin/idea.sh idea#接下来执行 idea &amp; 就可以打开，如果提示权限不够#就执行 sudo idea &amp;sudo idea &amp;#后面的 &amp; 代表后台运行的意思，不影响控制台\n","categories":["java"],"tags":["java","idea"]},{"title":"ubuntu root su 密码","url":"/20170704-Ubuntu%20root%20%E5%AF%86%E7%A0%81/","content":"在安装完ubuntu的时候\n只有自己设置的非root的帐号和密码\n但是又要用root密码怎么办呢？\nhisen@ubuntu-1:~$ sudo passwdEnter new UNIX password:Retype new UNIX password:passwd: password updated successfully\n上面输入的密码就是你的root密码\n检测一下\nhisen@ubuntu-1:~$ suPassword:root@ubuntu-1:/home/hisen#\n通过，至此结束\n","categories":["linux"],"tags":["linux"]},{"title":"Ubuntu 16 LTS 关闭图形界面","url":"/20170218-Ubuntu-16-LTS-%E5%85%B3%E9%97%AD%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/","content":"有两个方法。\n第一个方法到了图形化界面，打开terminal(终端)执行\nsudo init 3\n就会跳转到命令行界面，并且只有命令行\n就是一个全屏的terminal。\n第二个方法在安装ubuntu的时候，有选择是否安装图形化界面的选项，选择不安装，那么系统将不带有图形化界面而默认进入命令行界面。\n第三个方法http://hisen.me/20170219-Oracle-VM-VirtualBox%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/\n第四个方法直接安装Ubuntu Server，目前我就是这样\n不过装了之后还是推荐第三个方法！！！\n","categories":["linux"],"tags":["linux","Ubuntu"]},{"title":"Ubuntu 16 LTS 安装redis -  apt-get install redis-server","url":"/20170223-Ubuntu-16-LTS-%E5%AE%89%E8%A3%85redis-ape-get-install-redis-server/","content":"配置文件的路径： &#x2F;etc&#x2F;redis&#x2F;redis.conf\nredis服务路径: &#x2F;etc&#x2F;init.d&#x2F;redis-server\n默认是开机启动\n\n#安装hisen@hisen-server:/$ sudo apt-get install redis-server#打开服务hisen@hisen-server:/$ service redis start==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===Authentication is required to start &#x27;redis-server.service&#x27;.Authenticating as: hisen,,, (hisen)Password: ==== AUTHENTICATION COMPLETE ===#打开客户端hisen@hisen-server:/$ redis-cli#操作数据库127.0.0.1:6379&gt; set hisen hisen.meOK#获取数据127.0.0.1:6379&gt; get hisen&quot;hisen.me&quot;127.0.0.1:6379&gt; #停止数据库hisen@hisen-server:/$ service redis stop==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===Authentication is required to stop &#x27;redis-server.service&#x27;.Authenticating as: hisen,,, (hisen)Password: ==== AUTHENTICATION COMPLETE ===hisen@hisen-server:/$ \n\n","categories":["linux"],"tags":["redis"]},{"title":"Ubuntu 16 LTS 安装zookeeper并开机启动","url":"/20170224-Ubuntu-16-LTS-%E5%AE%89%E8%A3%85zookeeper%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/","content":"一、安装sudo apt-get install zookeeper\n默认信息\n#安装路径/usr/share/zookeeper#配置文件/etc/zookeeper/conf/zoo.cfg\n二、启动服务端\nhisen@hisen-server:/usr/share/zookeeper/bin$ sudo sh zkServer.sh\n如果报错\nzkServer.sh: 81: /home/xxx/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: &quot;(&quot; unexpected (expecting &quot;fi&quot;)网上找了一圈原因，大概意思就是脚本里面用到的shell版本与系统当前使用的shell版本不兼容，导致异常。查看当前ubuntu系统的shell，默认是使用dash，但是脚本里面是使用的bash，问题就在这里了。解决步骤：修改当前系统的shell版本：dpkg-reconfigure dashTab 移动到NO 回车即可(选择否)\n三、验证是否成功hisen@hisen-server:/usr/share/zookeeper/bin$ sudozkCli.sh -server localhost:2181WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0]\n出现上面的信息说明成功了\n四、设置开机启动1.创建配置文件\nsudo vi /etc/init.d/zookeeper\n添加以下信息，注意自己的相关路径是否相同，不同修改之\n#!/bin/sh#Configurations injected by install_server below....EXEC=/usr/share/zookeeper/bin/zkServer.shZOO_LOG_DIR=&quot;/var/zookeeper&quot;JAVA_HOME=/usr/hisen/soft/jdk8 PATH=$&#123;JAVA_HOME&#125;/bin:$PATH################ SysV Init Information# chkconfig: - 58 74# description: zookeeper is the zookeeper daemon.### BEGIN INIT INFO# Provides: zookeeper# Required-Start: $network $local_fs $remote_fs# Required-Stop: $network $local_fs $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Should-Start: $syslog $named# Should-Stop: $syslog $named# Short-Description: start and stop zookeeper# Description: zookeeper daemon### END INIT INFOcase $1 in          start)  /usr/share/zookeeper/bin/zkServer.sh start;;          stop)   /usr/share/zookeeper/bin/zkServer.sh stop;;          status) /usr/share/zookeeper/bin/zkServer.sh status;;          restart) /usr/share/zookeeper/bin/zkServer.sh restart;;          *)  echo &quot;require start|stop|status|restart&quot;  ;;esac\n2.授权\nsudo chmod +x zookeeper\n3.安装开机启动管理软件(一般自带)\nsudo apt-get install rcconf\n4.进入管理界面\nsudo rcconf\n↑ ↓ 移动光标，空格键选中zookeeper\nTab 使光标移动到OK 回车即可\n","categories":["linux"],"tags":["zookeeper"]},{"title":"Ubuntu 16 换阿里云源","url":"/20170218-Ubuntu-16-%E6%8D%A2%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90/","content":"\nsudo vi &#x2F;etc&#x2F;apt&#x2F;sources.list\n删除里面所有的内容，添加下面的内容\nsudo apt-get update\n\n三步完成之后即可！\n\n\ndeb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse","categories":["linux"],"tags":["ubuntu","阿里云"]},{"title":"Ubuntu16.04使用阿里云镜像安装Mongodb &　配置","url":"/20170219-Ubuntu16-04%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%AE%89%E8%A3%85Mongodb-%E9%85%8D%E7%BD%AE/","content":"一、使用阿里云镜像安装Mongodb1 &gt; 添加 MongoDB 公共GPG钥匙\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\n2 &gt; 创建列表文件\n这里把官网repo.mongodb.org\n换成了mirrors.aliyun.com\necho &quot;deb http://mirrors.aliyun.com/mongodb/apt/ubuntu xenial/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\n\n3 &gt; 重新加载本地包数据库\nsudo apt-get update\n4 &gt; 安装MongoDB\nsudo apt-get install -y mongodb-org\n5 &gt; 启动MongoDB\nsudo service mongod start\n6 &gt; 打开MongoDB客户端\nsudo mongo\n7 &gt; 关闭MongoDB\nsudo service mongod stop\n\n展示一下\nhisen@hisen-server:~$ sudo service mongod starthisen@hisen-server:~$ mongoMongoDB shell version: 3.2.12connecting to: test&gt; 1 + 12&gt; \n安装成功\nMongoDB默认的数据文件和日志文件分别存储在下面的位置\n数据文件：&#x2F;var&#x2F;lib&#x2F;mongodb \n日志文件：&#x2F;var&#x2F;log&#x2F;mongodb \n你可以修改&#x2F;etc&#x2F;mongod.conf 文件来改变相应的存储位置。\n如果你想改变运行MongoDB的用户\n你必须把 &#x2F;var&#x2F;lib&#x2F;mongodb \n和 &#x2F;var&#x2F;log&#x2F;mongodb 2个目录的访问权限付给该用户\n二、配置MongoDB1允许远程访问\n绑定ip\n$ sudo vim /etc/mongod.conf\n打开配置文件，添加需要增加的\n不建议采用注释掉  bindIP 的方案，非常容易受到攻击\n# network interfaces  net:    port: 27017    bindIp: 0.0.0.0\n接受所有ip\n重启\n$ sudo service mongod restart\n\n2.配置防火墙 （不配置也行）Ubuntu16.04 桌面版默认没有安装好 ipTable，用如下命令安装\nsudo apt-get updatesudo apt-get upgradesudo apt-get install iptables-persistent\n安装过程中，弹窗选择YES\n安装完成后：\nsudo iptables -A INPUT -p tcp --dport 27017 -j ACCEPT"},{"title":"Linux-Ubuntu安装:JDK & Tomcat & Maven - 简单教程","url":"/20170218-Ubuntu%E5%AE%89%E8%A3%85JDK8-Tomcat-%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/","content":"在网速搜索很多教程，感觉写的都太难了我去\n准备工作：\n\n下载JDK，并解压(选择适合自己的版本：地址)\n下载Tomcat，并解压(选择适合自己的版本：地址)\n下载Maven，并解压(选择适合自己的版本：地址)\n\n目录约定：\n\njava路径：&#x2F;usr&#x2F;hisen&#x2F;soft&#x2F;java&#x2F;jdk8\ntomcat路径：&#x2F;usr&#x2F;hisen&#x2F;soft&#x2F;tomcat&#x2F;tomcat8\nmaven路径：&#x2F;usr&#x2F;hisen&#x2F;soft&#x2F;maven&#x2F;maven-3.5.0\n\n说明以上路径都是解压之后的，请解压之后自行重命名文件夹等工作\n\n\n下面开始配置环境变量：\nsudo vi /etc/profile\n底部添加：\n#java的环境变量配置export JAVA_HOME=/usr/hisen/soft/java/jdk8export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin#tomcat的环境变量配置export CATALINA_HOME=/usr/hisen/soft/tomcat/tomcat8export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/libexport PATH=$PATH:$CATALINA_HOME/bin#maven环境变量export MAVEN_HOME=/usr/hisen/soft/maven/maven-3.5.0export MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;export PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH\n让刚刚的配置生效：\nsource /etc/profile\n查看maven\nmvn -v\n查看java版本\njava -version\n如果还是默认的OpenJDK\nsudo update-alternatives --install /usr/bin/java java /usr/hisen/soft/java/jdk8/bin/java 300  sudo update-alternatives --install /usr/bin/javac javac /usr/hisen/soft/java/jdk8/bin/javac 300#选择默认JDK即可sudo update-alternatives --config java\n进入tomcat的bin目录\nsudo vi catalina.sh\n顶部添加\n#让tomcat知道java在哪里JAVA_HOME=/usr/hisen/soft/java/jdk8JRE_HOME=$JAVA_HOME/jre\n\n之后进入在tomcat bin目录执行\nhisen@hisen:/usr/hisen/soft/tomcat/tomcat8/bin$ sudo sh startup.shUsing CATALINA_BASE:   /usr/hisen/soft/tomcat/tomcat8Using CATALINA_HOME:   /usr/hisen/soft/tomcat/tomcat8Using CATALINA_TMPDIR: /usr/hisen/soft/tomcat/tomcat8/tempUsing JRE_HOME:        /usr/hisen/soft/java/jdk8/jreUsing CLASSPATH:       /usr/hisen/soft/tomcat/tomcat8/bin/bootstrap.jar:/usr/hisen/soft/tomcat/tomcat8/bin/tomcat-juli.jarTomcat started.\n这样就启动了tomcat！！！！注意如果没有在 catalina.sh 添加java路径，会报错\nhisen@hisen-VirtualBox:/usr/hisen/soft/tomcat/tomcat8/bin$ sudo sh startup.shNeither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program","categories":["linux"],"tags":["linux"]},{"title":"Ubuntu虚拟机安装MySQL并且开启root远程访问","url":"/20170311-Ubuntu%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E4%B8%94%E5%BC%80%E5%90%AFroot%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/","content":"安装mysql很简单，关键是开启这个远程很坑！！！\n一、安装1.安装\nsudo apt-get install mysql-server\n等待完成即可，过程中需要设置密码\n2.查看是否成功\nsudo netstat -tap | grep mysql\n3.登陆mysql\nmysql -u root -p\n这条命令回车之后需要输入mysql密码\n二、开启远程访问$ sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf#找到bind-address=127.0.0.1直接注释$ mysql -u root -p -h#登陆mysqlmysql&gt; use mysql;#使用mysql这个库mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;hisen&quot;;#把root用户改成可以在任何ip上登陆，并且密码为：hisenmysql&gt; flush privileges;#刷新\n重启：service mysql restart\n接下来就可以在navicat里面连接了\n三、注意事项因为在网上找的很多教程，都是说改这个配置文件：这个是错误的\n/etc/mysql/my.cf\n如果是通过apt-get方式安装的，默认的是第二步那个配置文件\n","categories":["sql"],"tags":["mysql"]},{"title":"Ubuntu安装RocketMQ - Quick Start","url":"/20170702-Ubuntu%E5%AE%89%E8%A3%85RocketMQ%20-%20Quick%20Start/","content":"安装需求：\n64位的系统 Linux&#x2F;Unix&#x2F;Mac\n64bit JDK 1.8+;\nMaven 3.2.x;\nGit （一般自带）\n\n如果还未安装jdk、maven建议查看教程:点击查看\nClone &amp; Buildgit clone -b develop https://github.com/apache/incubator-rocketmq.gitcd incubator-rocketmqmvn -Prelease-all -DskipTests clean install -U[INFO] ------------------------------------------------------------------------[INFO] Reactor Summary:[INFO] [INFO] Apache RocketMQ 4.2.0-incubating-SNAPSHOT .......... SUCCESS [01:07 min][INFO] rocketmq-remoting 4.2.0-incubating-SNAPSHOT ........ SUCCESS [ 15.749 s][INFO] rocketmq-common 4.2.0-incubating-SNAPSHOT .......... SUCCESS [ 10.243 s][INFO] rocketmq-client 4.2.0-incubating-SNAPSHOT .......... SUCCESS [ 11.638 s][INFO] rocketmq-store 4.2.0-incubating-SNAPSHOT ........... SUCCESS [ 13.108 s][INFO] rocketmq-srvutil 4.2.0-incubating-SNAPSHOT ......... SUCCESS [  2.051 s][INFO] rocketmq-filter 4.2.0-incubating-SNAPSHOT .......... SUCCESS [  3.917 s][INFO] rocketmq-broker 4.2.0-incubating-SNAPSHOT .......... SUCCESS [  8.726 s][INFO] rocketmq-tools 4.2.0-incubating-SNAPSHOT ........... SUCCESS [  6.002 s][INFO] rocketmq-namesrv 4.2.0-incubating-SNAPSHOT ......... SUCCESS [  2.726 s][INFO] rocketmq-logappender 4.2.0-incubating-SNAPSHOT ..... SUCCESS [  3.514 s][INFO] rocketmq-openmessaging 4.2.0-incubating-SNAPSHOT ... SUCCESS [  2.668 s][INFO] rocketmq-example 4.2.0-incubating-SNAPSHOT ......... SUCCESS [  2.390 s][INFO] rocketmq-filtersrv 4.2.0-incubating-SNAPSHOT ....... SUCCESS [  2.145 s][INFO] rocketmq-test 4.2.0-incubating-SNAPSHOT ............ SUCCESS [  5.428 s][INFO] rocketmq-distribution 4.2.0-incubating-SNAPSHOT .... SUCCESS [ 27.002 s][INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 03:07 min[INFO] Finished at: 2017-07-02T01:35:40+08:00[INFO] Final Memory: 60M/247M[INFO] ------------------------------------------------------------------------cd distribution/target/apache-rocketmq\nStart Name Server\nnohup sh bin/mqnamesrv &amp;tail -f ~/logs/rocketmqlogs/namesrv.logThe Name Server boot success...\nStart Broker\nnohup sh bin/mqbroker -n localhost:9876 &amp;tail -f ~/logs/rocketmqlogs/broker.log The broker[%s, 172.30.30.233:10911] boot success...\nSend &amp; Receive Messages\nBefore sending/receiving messages, we need to tell clients the location of name servers. RocketMQ provides multiple ways to achieve this. For simplicity, we use environment variable NAMESRV_ADDRexport NAMESRV_ADDR=localhost:9876sh bin/tools.sh org.apache.rocketmq.example.quickstart.ProducerSendResult [sendStatus=SEND_OK, msgId= ...sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer ConsumeMessageThread_%d Receive New Messages: [MessageExt...\nShutdown Servers\nsh bin/mqshutdown brokerThe mqbroker(36695) is running...Send shutdown request to mqbroker(36695) OKsh bin/mqshutdown namesrvThe mqnamesrv(36664) is running...Send shutdown request to mqnamesrv(36664) OK","categories":["linux"],"tags":["linux","rocketmq"]},{"title":"Ubuntu安装nginx","url":"/20170321-Ubuntu%E5%AE%89%E8%A3%85nginx/","content":"Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP&#x2F;POP3&#x2F;SMTP 代理服务器。\nNginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，\n第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，\n因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。\n说明：这只是一个初步的安装，后续进一步实践\n安装Nginx依赖库#安装gcc g++的依赖库sudo apt-get install build-essentialsudo apt-get install libtool#安装 pcre依赖库sudo apt-get updatesudo apt-get install libpcre3 libpcre3-dev#安装 zlib依赖库（http://www.zlib.net）sudo apt-get install zlib1g-dev#安装 ssl依赖库sudo apt-get install openssl#下载最新版本：wget http://nginx.org/download/nginx-1.9.9.tar.gz#解压tar -zxvf nginx-1.9.9.tar.gz#进入解压目录：cd nginx-1.9.9#配置：sudo ./configure --prefix=/usr/local/nginx #编辑nginx：sudo make#注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory#需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev#安装nginx：sudo make install#启动nginx：sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf#注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。#查看nginx进程：ps -ef|grep nginx\nNginx常用命令\n#启动sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf#进入目录cd /usr/local/nginx/#关闭sudo ./sbin/nginx -s quit#Nginx重新加载配置sudo ./sbin/nginx -s reload#指定配置文件sudo ./sbin/nginx -c /usr/local/nginx/conf/nginx.conf#查看版本sudo ./sbin/nginx -v#显示帮助sudo ./sbin/nginx -h\n安装之后就直接监听80端口，浏览器打开127.0.0.1即可访问出现如下页面：\n","categories":["软件"],"tags":["nginx"]},{"title":"ubuntu重装系统 - 在ubuntu系统下重新安装","url":"/20170305-Ubuntu%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%20-%20%E5%9C%A8ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85/","content":"有时候在linux环境下需要重新安装一下系统\n这里我就说一下今天我安装的方法。\n下载好ubuntu的镜像，随便放在一个非系统盘的根目录下\n改名为：ubuntu.iso\nsudo chmod 777 /boot/grub/grub.cfgsudo vi  /boot/grub/grub.cfg#在 export linux_gfx_mode 下面添加如下内容menuentry &quot;install  ubuntu powered by hisen&quot; &#123;  search --set -f /ubuntu.iso  loopback loop /ubuntu.iso  set root=(loop)  linux /casper/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu.iso  initrd /casper/initrd.lz  boot&#125;\n保存退出，重启就会进入系统。\n桌面上点击那个安装的图标即可完成重装\n","categories":["linux"],"tags":["linux"]},{"title":"Unable to ping server at localhost 1099 - 出现的原因","url":"/20170330-Unable%20to%20ping%20server%20at%20localhost%201099%20-%20%E5%87%BA%E7%8E%B0%E7%9A%84%E5%8E%9F%E5%9B%A0/","content":"之前老是出现\nApplication Server was not connected before run configuration stop, reason: Unable to ping server at localhost:1099\n我遇到这个问题一般是这些原因：\n\n这个端口被占用，一般进程管理把所有java进程杀了可以解决\n由于在IDEA中错误的给tomcat添加了参数,比如下面这个。去掉即可\n\n这是下VM option中加了：-URIEncoding&#x3D;UTF-8\nError: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit.Unrecognized option: -URIEncoding=UTF-8","categories":["idea"],"tags":["java","idea"]},{"title":"理解 Linux Load Averages","url":"/20201026-Understanding-Linux-Load-Averages/","content":"零、背景最近做压力测试，不同的系统的机器监控数据差异明显A 系统：CPU 高 load 低B 系统：CPU 低 load 高\n那么是什么导致 A B 系统出现这种情况？CPU 高了系统肯定跑不动了，那么 load 多高代表系统跑不动呢？\n一、解释\nA 系统的原因  CPU 很忙，没有等待其它资源，瓶颈在 CPU。\nB 系统的原因  等待磁盘 I&#x2F;O 完成的进程过多，导致进程队列长度过大，  但是 CPU 运行的进程却很少，这样就导致负载过大，但 CPU 使用率低，瓶颈不在 CPU，可能在 I&#x2F;O。\n\n二、load averages 知识\nLinux 系统下代表的是 system load averages。\n\nLinux load averages track not just runnable tasks, but also tasks in the uninterruptible sleep state.  Linux 平均负载不仅跟踪可运行的任务，还跟踪处于不可中断睡眠状态的任务。\n\nOn Linux, load averages are (or try to be) “system load averages”, for the system as a whole, measuring the number of threads that are working and waiting to work (CPU, disk, uninterruptible locks). Put differently, it measures the number of threads that aren’t completely idle. Advantage: includes demand for different resources.  在 Linux 上，负载平均值是(或试图是)“系统负载平均值” ，对于整个系统来说，测量正在工作和等待工作的线程数(CPU、磁盘、不可中断锁)。换句话说，它测量的是没有完全空闲的线程数量。优势: 包括对不同资源的需求。\n\nIn 1993, a Linux engineer found a nonintuitive case with load averages, and with a three-line patch changed them forever from “CPU load averages” to what one might call “system load averages.” His change included tasks in the uninterruptible state, so that load averages reflected demand for disk resources and not just CPUs.  1993年，一位 Linux 工程师发现了一个与平均负载不直观的案例，一个三行补丁永远地将它们从“ CPU 负载平均值”改变为人们可能称之为“系统负载平均值”他的更改包括处于不可中断状态的任务，因此平均负载反映了对磁盘资源的需求，而不仅仅是 cpu。\n\n\n三、总结\nlinux load averages 数字大，代表系统压力大;\n\n\n\nload 高可能的原因有(CPU、I&#x2F;O、不可中断锁);\nload 1min load 5min load 15min，从左到右递增说明负载在增加，递减说明负载在降低;\n负载多大才算高，没有定论，得看是否影响业务，如果业务正常那多半是没有问题的;\n\n四、load 优化\n优化算法，减少 CPU 计算;\n减少 I&#x2F;O 交互的次数，以及大小;\n分布式系统水平扩展更多的机器;\n\n五、参考\nLinux Load Averages: Solving the Mystery (发表于 2017 年)\n理解Linux系统负荷 （发表于 2011 年）\nLinux中CPU使用率低负载高\n\n","categories":["linux"],"tags":["linux"]},{"title":"Unix文件超过大小限制移动到某目录","url":"/20190408-Unix%E6%96%87%E4%BB%B6%E8%B6%85%E8%BF%87%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6%E7%A7%BB%E5%8A%A8%E5%88%B0%E6%9F%90%E7%9B%AE%E5%BD%95/","content":"某个文件夹下面有n个文件，需要移动大于10M的文件到&#x2F;tmp&#x2F;目录下\n实现命令\nfind . -type f -size +100M -exec mv &#123;&#125; /tmp/ \\;\nfind 查找. 当前目录-type 文件类型：f 文件，d 目录-size 文件大小：+100M +：大于 -：小于 空：等于-exec 管道命令，将前面的查询结果传递给后面的命令{} 指前面传递过来的的查询结果; 结束管道命令\n","categories":["linux"],"tags":["linux"]},{"title":"ValidSudoku - leetCode - 算法","url":"/20191103-ValidSudoku%20-%20leetCode%20-%20%E7%AE%97%E6%B3%95/","content":"一、题目Valid Sudoku链接\n题目要求：Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\nEach column must contain the digits 1-9 without repetition.\nEach of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\n每一行都不能重复1-9每一列都不能重复1-9每个33的小格子(99分为9个3*3)不能重复\n二、解题分析\n每一行每一列的数据，我们可以通过遍历二维数组解决；\n每个33的怎么解决呢？还是遍历二维数组，循环大(99)的二维数组时，符合条件再循环小(3*3)数组;\n怎么判断没有重复？方法很多，这里通过数组下标计数，数组初始值为0，根据下标+1，+1之后如果发现&gt;1那么返回错误;\n\n开始解题的时候可以一个大循环解决一个小问题，后续再把循环合并即可;开始的时候我是写了三个双重for循环：\n\n解决行重复判断问题;\n解决列重复判断问题;\n解决子矩阵重复判断问题;\n\n当发现每一步都可行之后，尝试着合并，以减少时间复杂度;\n三、代码样例public static boolean isValidSudoku(char[][] board) &#123;    // 处理 9 * 9    for (int i = 0; i &lt; board.length; i++) &#123;        int[] rowFlag = new int[10];        int[] columnFlag = new int[10];        for (int j = 0; j &lt; board.length; j++) &#123;            char row = board[i][j];            char column = board[j][i];            if (check(rowFlag, row)) &#123;                return false;            &#125;            if (check(columnFlag, column)) &#123;                return false;            &#125;            // 处理 3 * 3            if (i % 3 == 0 &amp;&amp; j % 3 == 0) &#123;                int[] smallFlag = new int[10];                for (int k = i; k &lt; i + 3; k++) &#123;                    for (int l = j; l &lt; j + 3; l++) &#123;                        char now = board[k][l];                        if (check(smallFlag, now)) &#123;                            return false;                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    return true;&#125;\n\n四、代码详情可运行demo\n\ngithub地址：ValidSudoku.java\n","categories":["java"],"tags":["leetCode"]},{"title":"WebSocket - Java & html & JavaScript - 单发 & 群发","url":"/20180728-WebSocket%20-%20Java%20&%20html%20&%20JavaScript%20-%20%E5%8D%95%E5%8F%91%20&%20%E7%BE%A4%E5%8F%91/","content":"一、背景说明最近在做app后台相关接口\n自建通知中心目前不能很好的支持给APP推送消息\n长连接可以保持推送速度，目前app中内嵌了H5，所以考虑使用websocket\n之前没有接触过websocket，百度了一堆之后，页面上可以正常使用\n但是没有发现可用使用Java后台进行消息的发送，于是乎就琢磨了一上午，解决了这个问题\n现在把这个小工程分享给大家，少走点弯路&#x3D;&#x3D;\nps：很多不能在后台发送消息，是因为缺少java的客户端\n二、准备工作建立一个maven web 工程\n添加依赖\n&lt;dependency&gt;    &lt;groupId&gt;javax.websocket&lt;/groupId&gt;    &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;    &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.neovisionaries&lt;/groupId&gt;    &lt;artifactId&gt;nv-websocket-client&lt;/artifactId&gt;    &lt;version&gt;1.13&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;    &lt;version&gt;RELEASE&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;\n\n三、主要代码websocket服务端主逻辑\n为了实现简单的非群发操作，在连接websocket的时候，加上了一些get参数\n例如：ws:&#x2F;&#x2F;localhost:8080&#x2F;websocket?sendTo&#x3D;hisen&amp;method&#x3D;methodSingle&amp;user&#x3D;hisenyuan\n然后在后端判断，根据参数做出不同的动作\ndemo完整工程：https://github.com/hisenyuan/IDEAPractice/tree/master/websocket-demo\n配置完Tomcat，即可使用，在java后台运行测试类(com.hisen.ws.client.ClientApp4Java)可发送消息到页面\npackage com.hisen.ws.server;import com.hisen.ws.util.Constants;import javax.websocket.*;import javax.websocket.server.ServerEndpoint;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Optional;import java.util.concurrent.ConcurrentHashMap;/** * @ServerEndpoint 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端, * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端 */@ServerEndpoint(&quot;/websocket&quot;)public class WebSocketServer &#123;    // 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。    private static int onlineCount = 0;    // 实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识    private static ConcurrentHashMap&lt;String, WebSocketServer&gt; webSocketMap = new ConcurrentHashMap&lt;&gt;();    // 与某个客户端的连接会话，需要通过它来给客户端发送数据    private Session session;    // 当前用户    private String user;    /**     * 客户端可以是web页面，也可以是Java后台     * &lt;p&gt;     * 通过连接或者message可以控制发送给谁     *     * @param message 客户端发送过来的消息     * @param session 可选的参数     */    @OnMessage    public void onMessage(String message, Session session) &#123;        System.out.println(&quot;来自客户端的消息:&quot; + message);        // 获取url传过来的参数        Map&lt;String, List&lt;String&gt;&gt; parameterMap = session.getRequestParameterMap();        // 发送方式        String method = null;        // 发送给哪些人        List&lt;String&gt; receivers = new ArrayList&lt;&gt;();        // 发送者        String sernder = null;        if (parameterMap.containsKey(Constants.METHOD)) &#123;            method = parameterMap.get(Constants.METHOD).get(0);        &#125;        if (parameterMap.containsKey(Constants.SEND_TO)) &#123;            receivers = parameterMap.get(Constants.SEND_TO);        &#125;        if (parameterMap.containsKey(Constants.USER)) &#123;            sernder = parameterMap.get(Constants.USER).get(0);        &#125;        System.out.println(&quot;sender:&quot; + sernder + &quot;,receivers:&quot; + receivers.toString() + &quot;,method:&quot; + method);        if (method == null || method.equals(Constants.METHOD_ALL)) &#123;            //发送所有            send2All(message);        &#125; else &#123;            //单发            send2Users(receivers, message);        &#125;    &#125;    /**     * 连接建立成功调用的方法     *     * @param session 可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据     */    @OnOpen    public void onOpen(Session session) &#123;        this.session = session;        this.user = session.getRequestParameterMap().get(Constants.USER).get(0);        // 放入map        webSocketMap.put(user, this);        //在线数加1        addOnlineCount();        System.out.println(&quot;有新连接加入！当前在线人数为&quot; + getOnlineCount() + &quot;,session:&quot; + session.getId() + &quot;,user:&quot; + this.user);    &#125;    /**     * 连接关闭调用的方法     */    @OnClose    public void onClose() &#123;        // 移除        webSocketMap.remove(this.user);        //在线数减1        subOnlineCount();        System.out.println(&quot;有一连接关闭！当前在线人数为&quot; + getOnlineCount() + &quot;,user:&quot; + this.user);    &#125;    private void send2Users(List&lt;String&gt; receivers, String message) &#123;        receivers.forEach(e -&gt; &#123;            System.out.println(&quot;single receiver:&quot; + e);            Optional.ofNullable(webSocketMap.get(e))                    .filter(webSocketServer -&gt; webSocketServer.session.isOpen())                    .ifPresent(webSocketServer -&gt; sendOnce(message, e, webSocketServer));        &#125;);    &#125;    private void send2All(String message) &#123;        webSocketMap.forEach((key, value) -&gt; &#123;            sendOnce(message, key, value);        &#125;);    &#125;    private void sendOnce(String message, String e, WebSocketServer webSocketServer) &#123;        try &#123;            webSocketServer.sendMessage(message);        &#125; catch (IOException exp) &#123;            System.out.println(&quot;发送出错，receiver:&quot; + e);        &#125;    &#125;    /**     * 发生错误时调用     *     * @param session     * @param error     */    @OnError    public void onError(Session session, Throwable error) &#123;        System.out.println(&quot;发生错误，user:&quot; + this.user);        error.printStackTrace();    &#125;    /**     * 自定义的方法     *     * @param message     * @throws IOException     */    public void sendMessage(String message) throws IOException &#123;        this.session.getBasicRemote().sendText(message);        //this.session.getAsyncRemote().sendText(message);    &#125;    public static synchronized int getOnlineCount() &#123;        return onlineCount;    &#125;    public static synchronized void addOnlineCount() &#123;        WebSocketServer.onlineCount++;    &#125;    public static synchronized void subOnlineCount() &#123;        WebSocketServer.onlineCount--;    &#125;&#125;\n","categories":["java"]},{"title":"WeightAlgorithm - 权重算法 - Random、HashCode对比","url":"/20190322-WeightAlgorithm%20-%20%E6%9D%83%E9%87%8D%E7%AE%97%E6%B3%95%20-%20Random%E3%80%81HashCode%E5%AF%B9%E6%AF%94/","content":"一、权重算法权重算法一般在路由里面用的比较多，分布式环境下对等的服务有多个，加权随机选出一个服务来调用；\n可能还有其他方面的用途，下面的代码简单的实现了这个权重，本质上就用到了数组，随机下标；\n二、代码概览public static void main(String[] args) &#123;    String[] weight = &#123;&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;, &quot;C&quot;&#125;;    final int times = 500000;    final long hashStart = System.currentTimeMillis();    List&lt;String&gt; hashRes = getList4Hash(weight, times);    printRes(&quot;Hash&quot;, hashStart, hashRes);    final long randomStart = System.currentTimeMillis();    List&lt;String&gt; randomRes = getList4Random(weight, times);    printRes(&quot;Random&quot;, randomStart, randomRes);//        Hash          use millis: 931//        A:49.92%//        B:29.99%//        C:20.09%//        Random        use millis: 50//        A:50.08%//        B:29.93%//        C:19.99%&#125;\n\n三、完整代码\ngithub:show all code\npackage com.hisen.algorithms;import com.google.common.collect.Lists;import java.text.NumberFormat;import java.util.List;import java.util.Map;import java.util.Random;import java.util.UUID;import java.util.function.Function;import java.util.stream.Collectors;/** * @Author hisenyuan * @Description $end$ * @Date 2019/3/21 21:04 */public class WeightAlgorithm &#123;    public static void main(String[] args) &#123;        String[] weight = &#123;&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;, &quot;C&quot;&#125;;        final int times = 500000;        final long hashStart = System.currentTimeMillis();        List&lt;String&gt; hashRes = getList4Hash(weight, times);        printRes(&quot;Hash&quot;, hashStart, hashRes);        final long randomStart = System.currentTimeMillis();        List&lt;String&gt; randomRes = getList4Random(weight, times);        printRes(&quot;Random&quot;, randomStart, randomRes);//        Hash          use millis: 931//        A:49.92%//        B:29.99%//        C:20.09%//        Random        use millis: 50//        A:50.08%//        B:29.93%//        C:19.99%    &#125;    private static void printRes(String method, long start, List&lt;String&gt; resList) &#123;        final Map&lt;String, Long&gt; collect = resList.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));        final double a = collect.get(&quot;A&quot;);        final double b = collect.get(&quot;B&quot;);        final double c = collect.get(&quot;C&quot;);        final double sum = a + b + c;        NumberFormat nt = NumberFormat.getPercentInstance();        nt.setMinimumFractionDigits(2);        System.out.println(method + &quot;\\t use millis: &quot; + (System.currentTimeMillis() - start));        System.out.println(&quot;A&quot; + &quot;:&quot; + nt.format(a / sum));        System.out.println(&quot;B&quot; + &quot;:&quot; + nt.format(b / sum));        System.out.println(&quot;C&quot; + &quot;:&quot; + nt.format(c / sum));    &#125;    private static List&lt;String&gt; getList4Hash(String[] weight, int times) &#123;        List&lt;String&gt; result = Lists.newArrayList();        for (int i = 0; i &lt; times; i++) &#123;            final String a = UUID.randomUUID().toString() + System.currentTimeMillis();            final int hash = a.hashCode();            final int index = hash &gt; 0 ? hash : -hash;            final String res = weight[index % weight.length];            result.add(res);        &#125;        return result;    &#125;    private static List&lt;String&gt; getList4Random(String[] weight, int times) &#123;        List&lt;String&gt; result = Lists.newArrayList();        Random random = new Random();        for (int i = 0; i &lt; times; i++) &#123;            final int index = random.nextInt(weight.length);            final String res = weight[index];            result.add(res);        &#125;        return result;    &#125;&#125;\n","categories":["java"],"tags":["java","算法"]},{"title":"Windows ssh连接 VirtualBox Ubuntu 16虚拟机","url":"/20170218-Windows%20ssh%E8%BF%9E%E6%8E%A5VirtualBox-Ubuntu-16%E8%99%9A%E6%8B%9F%E6%9C%BA/","content":"安装完虚拟机之后想在windows下用xshell链接Ubuntu虚拟机\n这种配置下，虚拟机能上网，又能跟win连接，感觉很完美\nVirtualBox的端口转发很不错，可以转发tomcat什么的\n准备工作1.给Ubuntu安装openssh-server\nsudo apt-get install openssh-server\n\n2.查看虚拟机ip 我的是：10.0.2.15(看上面那段)\nhisen@hisen-VirtualBox:/$ ifconfig -aenp0s3    Link encap:以太网  硬件地址 08:00:27:45:f3:35            inet 地址:10.0.2.15  广播:10.0.2.255  掩码:255.255.255.0          inet6 地址: fe80::ed57:82d2:60cb:7f96/64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1          接收数据包:169175 错误:0 丢弃:0 过载:0 帧数:0          发送数据包:34436 错误:0 丢弃:0 过载:0 载波:0          碰撞:0 发送队列长度:1000          接收字节:210738565 (210.7 MB)  发送字节:3633455 (3.6 MB)lo        Link encap:本地环回            inet 地址:127.0.0.1  掩码:255.0.0.0          inet6 地址: ::1/128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  跃点数:1          接收数据包:1718 错误:0 丢弃:0 过载:0 帧数:0          发送数据包:1718 错误:0 丢弃:0 过载:0 载波:0          碰撞:0 发送队列长度:1          接收字节:234769 (234.7 KB)  发送字节:234769 (234.7 KB)\nVirtualBox设置端口转发\n在VirtualBox启动页面，右键Ubuntu —&gt;设置\n网络 —&gt; 连接方式 —&gt; 网络地址转换(NAT)\n高级 —&gt; 端口转发 —&gt; 点击添加按钮\n\n\n\n\n名称\n协议\n主机IP\n主机端口\n子系统IP\n子系统端口\n\n\n\nssh\nTCP\n127.0.0.1\n2222\n10.0.2.15\n22\n\n\n子系统ip写你的虚拟机ip即可\nxshell链接Ubuntu虚拟机在xshell链接Ubuntu虚拟机的时候\nip写上麦的主机ip：127.0.0.1\n端口写上面的主机端口：2222\n然后上面配置的端口转发就可以转发到虚拟机上，顺利连接！！！\n","categories":["linux"],"tags":["linux","shell","ssh"]},{"title":"windows10 专业版激活密钥","url":"/20170210-Windows10-%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/","content":"2017年2月10日 16:03:48亲测可用，这比激活工具方便多了\n\nVK7JG-NPHTM-C97JM-9MPGT-3V66TNPPR9-FWDCX-D2C8J-H872K-2YT43W269N-WFGWX-YVC9B-4J6C9-T83GXNYW94-47Q7H-7X9TT-W7TXD-JTYPMNJ4MX-VQQ7Q-FP3DB-VDGHX-7XM87MH37W-N47XK-V7XM9-C7227-GCQG9\n","categories":["soft"],"tags":["soft"]},{"title":"Windows10开机bat启动VirtualBox虚拟机并且后台运行","url":"/20170220-Windows10%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B6%E4%B8%94%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/","content":"1.制作启动脚本\n新建一个start.bat文件，内容如下\n@echo offecho 本命令可让us在后台运行echo 启动之后可以关闭本窗口::进入虚拟机目录cd C:\\&quot;Program Files&quot;\\Oracle\\VirtualBox::执行相关命令 同时启动两台虚拟机VBoxManage startvm &quot;us&quot; --type headless::VBoxManage startvm &quot;ubuntu&quot; --type headless::执行完之后按回车退出窗口pause\n2.设置开机启动\n把start.bat文件复制到[启动]文件夹里面\n[启动]文件夹路径\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n文件管理器地址栏显示大概是这样\nWindows &gt; [开始]菜单 &gt; 程序 &gt; 启动\n放进去之后就可以开机启动了！\n启动之后Xshell连接即可\n","categories":["软件"],"tags":["linux","VirtualBox","bat"]},{"title":"windows任务栏由底部改到左边，并自动隐藏","url":"/20170215-Windows%E4%BB%BB%E5%8A%A1%E6%A0%8F%E7%94%B1%E5%BA%95%E9%83%A8%E6%94%B9%E5%88%B0%E5%B7%A6%E8%BE%B9%EF%BC%8C%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%9A%90%E8%97%8F/","content":"windows默认是在底部的\n在底部任务栏空白处：\n右键—设置—任务栏—在桌面模式下自动隐藏任务栏(开)—任务栏在屏幕上的位置(上 | 下 | 左 | 右)\n这样就设置完毕了，毕竟笔记本太小用idea的时候居然有些界面很难点击OK什么的！！！\n\n知乎有专门讨论任务栏放置位置分析，有兴趣的可以看看:\nWindows 任务栏放在窗口左边和下面哪一种更合理？各有什么利弊？\n","categories":["软件"],"tags":["idea"]},{"title":"关于数据一致性","url":"/20220717-about-data-consistency/","content":"1. 背景电商场景下的订单系统往往会有很多查询需求单体数据库无法满足大量数据存储、各种复杂查询\n2. 方案待更新\n3. 总结待更新\n","categories":["database"],"tags":["db"]},{"title":"关于互联网医疗","url":"/20210718-about-internet-medicine/","content":"零、背景由于近期换工作，停下了技术书籍，去了解行业《移动健康和智慧医疗》算是互联网医疗的科普资料前面部分的内容已经后面部分国际案例，了解之用足够里面提到的『量化自我』，如果把世界量化分析，岂不是美哉？随说：前提是大家相信分析出来的结论，以及按建议行事。\n一、微博读后感《移动健康和智慧医疗》0711～0717过去人口红利式的告诉发展逐渐降速老龄化突显使疾病预防和控制更重要\n医疗信息化建设提升医疗系统效率医疗数据收集与分析改进医疗方案多维度健康数据分析建议促进健康\n减少医疗信息不对称降低患者再次入院率早运动早发现早治疗有效地减少医疗支出\n互联网医疗典型方向：\n\n促进健康\n慢性病管理\n诊断治疗(非急症性疾病)\n院外康复指导和干预\n\n二、摘抄(医疗相关)\n《移动健康和智慧医疗》0711～0717过去中国高速发展，目前人口红利逐渐消失，老龄化日益突显，使得以传染病为主，转向非传染性疾病的预防和控制 。\n利用现代技术加强相关人员交流和互动\n\n加强医疗保健机构的信息化程度，降本增效\n从 cure 为主转化为 cure + care，减少病患\n从生到死一条龙健康医护服务，预防为主\n\n慢性病管理血糖控制，通过监测行为特征，配合辅助功能，加强用户掌控能力，医生，家人远程支持与提醒。随说：收集足够信息，给出专业建议\n骨科手术后居家康复指导，尽快出院，获取足够信息与支持。随说：给予高质量内容，提升自我恢复能力。\n服务设计、实现、患者使用过程，均反应出一系列信息技术和预防、临床医学(流程、知识)之间的相互作用和支持，提现了互联网+多学科交叉，跨行业深度融合的思想。随说：降本增效，沉淀数据，线上线下无缝对接\n互联网医疗典型方向：健康促进、慢性病管理、诊断治疗、术后康复。\n健康医疗APP重要因素：专业性、相关性、有效性、趣味性、社交化。随说：社交？相互鼓励，交流心得\n医疗云平台：数据汇集分发、电子健康档案、业务管理、安全体系、运维系统。\n对多元异构多模态大数据进行处理、分析、挖掘，从中获取新知识和洞察，优化经营、管理，提升患者体验，提取最佳临床路径，辅助临床决策，实行计算机自动筛查和诊断，为其它利益相关方提供未知的信息资源等，这是互联网医疗追求的理想和目标。\n研究发现我国近2&#x2F;3接受糖尿病治疗的患者未能适当控制血糖，因此会出现各种并发症，如：心脏病、中风、失明、肾功能衰竭等。\n2014年，慢性疾病导致的死亡占中国总死亡人数的 85%，导致的疾病负担占总疾病负担的 70%。\n虽然中国经济的增长速度赢得了世界的瞩目，但是如何提高慢性病是综合防治能力，减少慢性病的发病率、致残率和死亡率，降低费用支出，仍是健康医疗服务需要应对的巨大挑战。\n著名卫生经济学家普林斯顿大学教授 WR 提出，各国医疗体系的本质在于国家价值观和国家性格决定其系统如何运行。\n低功耗可穿戴设备使得随时随地采集健康医疗数据成为可能。这些大量的、连续的、包含上下文情境的健康医疗数据，为健康医疗提供决策依据、促进健康生活方式的养成、改善疾病监护、诊治状况。\n移动互联网具有用户身份、位置可识别，随时交互、多元数据可采集、用户可高度参与等一系列技术特征，使得移动互联网与其他行业融合时带来新的解决方案、服务模式和发展机遇。\n医护路径全流程服务：促进健康、预防&#x2F;慢性病管理、院前急救、诊断治疗、院外康复&#x2F;干预。\n院前急救：伤者历史数据、辅助诊断、车载数据同步医院，医院提前准备。\n远程问诊成本低，灵活性强，出现一些早期症状可以及时获得指导。随说：小毛病挂专家号，会诊几分钟…\n量化自我：2007年凯文凯利提出，通过设备和技术持续跟踪、采集自己的生理心理特征，形成生活日志，探索身体健康的奥秘。\n可穿戴设备的数据如果作为对患者实施诊断、治疗等环节的重要依据，则属于医疗器械，需要监管。\n智能服装才是可穿戴设备的终极形式。\n单点登录的目的是为了让多个相关联的应用使用相同的登录过程，代码复用，提升体验。\nCAS 是开源的企业级单点登录解决方案。\n根据密钥的职责和重要性，一般分为：主密钥、二级密钥、初级密钥。初级密钥是直接使用的密钥。高级密钥对低一级密钥做加密，保护低一级的密钥。\n不同级别的密钥应该分开存放，最好是异地、异设备。\n密钥不以明文形式存储在数据库或传输媒介中：避免密钥被截获后直接用来解密数据，增强安全性。\nHIS：医院信息系统PACS：影像系统LIS：检验信息系统RIS：放射信息系统EMR：电子病历HIMSS：美国医疗信息和管理协会EMRAM：电子病历采纳模型CHA：康体佳健康联盟\n流式计算的数据来自一个最近的时间窗口，数据延迟短但精度可能较低。\n一个完全测序的人类基因组包含 100～1000G的数据。\n精准医疗：根据每个人的基因、生活环境、生活方式等的不同，提供相适应的个性化疾病治疗和预防\n健康医疗大数据的收集、分析、整理和挖掘对于患者健康医护路径的不同环节都有非常重要的价值。\n任何疾病最有效的治疗方式是预防保健。\n每年心脑血管医疗费用占比搞，且再次入院率高，如何有效管理心血管病、节省医疗开支、降低出院患者再次入院率已经成为社会各界关注的重点。\n美国的分级诊疗制度、医生多点职业、医疗信息化、商业保险、医院集团管理等一系列成熟体系，为美国移动健康医疗的发展提供了肥沃土壤。\n远程医疗服务提供简单、方便、低成本的方式为患者远程诊治感冒、流感、喉咙痛或其它简单非急症性疾病。\n2014 年 5 月，阿里旗下的支付宝推出“未来医院计划”，支付宝对医疗机构开放自己的平台能力，包括：账户体系、移动平台、支付及金融解决方案、云计算能力、大数据平台等，旨在优化患者在医院的就医流程，提高就医体验，提升医院的管理效率。\n2015年阿里健康业务\n\n药品零售\n医疗服务(远程医疗平台，家庭医生等)\n药监码(电子监管平台)\n健康保险\n\n北京大学人民医院是中国最具实力的三级甲等研究型医院之一，积极推进医疗信息化建设，2014 年通过了国际上衡量医院信息化水准的 HIMSS EMRAM 最高等级(7级)的评审，成为亚洲第二，中国第一家。\n","categories":["read"],"tags":["read"]},{"title":"关于中断","url":"/20210306-about-interrupt/","content":"一、中断的解释网络\n\n中断（Interrupt）是指 处理器接收到来自硬件或软件的信号，提示发生了某个事件，应该被注意，这种情况就称为中断。\n\n软中断 (form 《UNIX 操作系统设计》)\n\n内核在收到软中断信号的进程上下文中处理软中断信号，因此进程必须运行以便处理信号。处理软中断信号的方式：\n\n\n进程忽略软中断信号;\n进程收到软中断信号后退出;\n进程收到信号后执行一个特殊的(用户)函数;\n\n二、Java 的中断Java API 中线程相关的方法主要有三个：\n\n// 中断当前线程，仅设置中断标识位。public void interrupt()// 线程的中断标识位是否被标记public static boolean interrupted()// 类似 interrupted，无论之前是否被中断，都不会清空中断标识位public boolean isInterrupted()\n\nJava 中不推荐使用抢断式中断，倡导：\n\n一个线程的生命不应该由其他线程终止，应当由它自己选择是否停止。\n\ntry &#123;    // 业务代码&#125; catch (InterruptedException e) &#123;    // 可选:退出 | 忽略 | 执行相关逻辑&#125;\n\n三、扩展\n中断有优先级，在处理高优先级中断时，会屏蔽低优先级的中断。\n\n四、参考\n《UNIX 操作系统设计》\n线程的中断\n\n","categories":["计算机科学"],"tags":["cs"]},{"title":"关于学习 Rust","url":"/20220206-about-learning-rust/","content":"零、背景过年期间，看到 github 关注的人的动态当中有人 star 了这个项目 Rust语言圣经这些年也听说过 Rust，一直没有特意去了解当我看到大佬也关注了这个课程的时候感觉应该是一个不错的学习资料\n前面介绍学习的好处让我心动了就跟着学习了前面 4 节课目前感觉良好有空继续学\n不得不说，环境搭建特别方便！\n一、实践\n1.1 codefn greet_world()&#123;    let southern_germany = &quot;Grüß Gott!&quot;;    let chinese = &quot;世界，你好&quot;;    let english = &quot;World, hello&quot;;    let regions = [southern_germany, chinese, english];    for region in regions.iter() &#123;        println!(&quot;&#123;&#125;&quot;, &amp;region);    &#125;&#125;fn more_than_hello()&#123;    let penguin_data = &quot;\\    common name,length (cm)    Little penguin,33    Yellow-eyed penguin,65    Fiordland penguin,60    Invalid,data    &quot;;    let records = penguin_data.lines();    for (i, record) in records.enumerate()  &#123;        if i == 0 || record.trim().len() == 0 &#123;            continue;        &#125;        let fields: Vec&lt;_&gt; = record        .split(&quot;,&quot;)        .map(|field| field.trim())        .collect();        if cfg!(debug_assertions) &#123;            eprintln!(&quot;debug: &#123;:?&#125; -&gt; &#123;:?&#125;&quot;, record, fields);        &#125;        let name = fields[0];        if let Ok(length) = fields[1].parse::&lt;f32&gt;() &#123;            println!(&quot;&#123;&#125;, &#123;&#125;cm&quot;, name, length);        &#125;    &#125;&#125;fn main() &#123;    greet_world();    more_than_hello();&#125;\n1.2 out put$ cargo run --release    Finished release [optimized] target(s) in 0.02s     Running `target/release/world_hello`Grüß Gott!世界，你好World, helloLittle penguin, 33cmYellow-eyed penguin, 65cmFiordland penguin, 60cm\n二、资源\ngitbook\n\n","categories":["rust"],"tags":["rust"]},{"title":"陆奇 | 年轻人的榜样","url":"/20211109-about-luqi/","content":"零、背景不知在哪听说过陆奇的传说对于一位地位如此之高的华人甚是敬仰，奈何相关资料甚少，很难深入了解不像李开复、吴军那样，出过一些书，了解可以多些\n榜样的力量或许很虚，关键看自己能悟多少，是否坚持行动。共勉！\n一、工程领导(Engineering Leadership)\nBelieve in 技术未来任何一个工业都会变成软件工业。\n站在巨人的肩膀上做创新你所写的每一行代码是否值得？\n追求 Engineering Excellence追求工程技术的卓越的能力。\n每天学习每天学习，每天都争取变地更好。学经济、学产品、懂商业、懂生态。\nOwnership把公司的事业，当成是自己的事业，own everything。从我做起，从身边的每一件事做起。\n\n二、关于陆奇的文章\n2.1 摘要\n20岁：做让自己走得快的事情\n30岁：做让自己走得远的事情：搭建系统\n身体系统\n家庭系统\n人脉系统\n40岁：找一个可以让你淋漓尽致发挥的舞台\n\n2.2 原文2.2.1 介绍大部分人还不了解陆奇，但他值得让我们好好了解一下：\n这几年陆奇被格外关注，始于2017年1月17日他被百度任命为百度总裁。这次任命份量极高，到今天百度创立19年，李彦宏给出如此高的权力，陆奇是唯一一个。\n但陆奇值得。\n陆奇在硅谷非常有名，拥有不错的人脉和江湖地位，凡接触过陆奇的人提起他，几乎是众口一词地称赞。\n1998年陆奇加入雅虎，2007年任雅虎执行副总裁。\n2008年他辞职时，杨致远当场洒泪，告别会上所有工程师穿上统一的T恤，T恤上印着“我曾与陆奇一起工作，你呢？”，以此纪念陆奇在雅虎的日子。\n2008年加入微软，任全球执行副总裁，这是有史以来，华人在科技领域获得的最高职位。\n2016年9月离职时，比尔·盖茨极力挽留甚至承诺：“你想要做什么业务，我们去搞个业务给你。或者你先休假一年两年，然后再回来当首席技术官，我们等着你就是了。”\n微软现任 CEO 纳德拉曾对微软员工说：“五个人，对微软贡献巨大。一是创始人比尔·盖茨，二是CEO史蒂夫·鲍尔默，三是董事会主席约翰·汤普森，四是诗人奥斯卡·王尔德，最后一个就是陆奇。”\n其实早在2005年前后，李彦宏就曾试图说服陆奇加入百度，只是当时并未如愿。\n2017年陆奇加入百度后，李彦宏曾公开给了他很高的评价：陆奇上上下下有口皆碑，大家都很喜欢他，他有非常强的技术能力，又有很强的管理能力，并且工作极其玩命。\n陆奇身上有太多值得我们学习的地方。\n2.2.2 采访前段时间《晚点》采访时就问陆奇：\n你对20、30、40岁的年轻人各有什么建议？\n陆奇：\n20岁需要做让你可以走得很快的事情，快速学、快速失败。30岁你要让自己可以走得远，建立一个核心支撑体系能让你走得很远。这个体系包括你的身体、你厚实的家庭基础和几个志同道合你可以信任的朋友。\n一个人到了35岁，到了打造产品的黄金时段，我已前很关注这个年龄阶段的人才，因为他&#x2F;她已经犯过不少错，他&#x2F;她最需要做一个好产品让他&#x2F;她的职业生涯有一个本质提升。\n40岁后，理想情况是找到一个可以让你淋漓尽致去发挥的舞台，一个人的才华和一个公司的才华只有在真正被释放的情况下才能实现它的价值。如果这个舞台是你自己的最好。\n这个回答很经典，我反复看了很多遍。但要真的看懂看透，我们还必须要放在陆奇的整个人生系统里看，我一口气翻看了所有关于陆奇重要的中文报道，从中得到了一个更完整清晰的答案。\n20岁：做让自己走得快的事情\n陆奇：“20岁需要做让你可以走得很快的事情，快速学、快速失败。”\n1、20多岁，习得什么能力最重要？\n陆奇认为有两个：\n学习能力：在这个变化速度越来越快的世界里，拥有学习和持续学习的能力，不断提高自己在某一个专业领域以及在企业内开发产品和业务的认知能力是基础。\n原因很简单，因为创新，世界变化的速度越来越快。唯一的应对，是与它共跑甚至赶超。方法就是学习，要持续不断的学习，让自己拥有更多更深的专业知识和技能，更强的在企业内开发产品和业务的能力。\n交流能力：这是一个人与人之间愈发紧密联结的世界，通过各种数字通讯服务与工具，社交网络，人们能够以文字、图片乃至视频，与更多的人保持交流。\n从长远角度看，一个人越擅长结识他人，表达自己，形成相互学习并共同完成某些理想的关系和友谊，对这个人就越好。\n2、20多岁，去创业公司还是大公司？\n陆奇认为，要看个人追求。\n如果你的长远理想是自己开公司，那加入创业公司，甚至直接创业，都是最好的选择。加入创业公司或自己创业会愈发成为年轻人学习并拥有真正创新能力的重要途径。因为在创业企业，每天做的事就是为了生存而战斗，一个人的真实作战能力测试来的很快。创新或死亡，是创业企业每天面临的现实。就学习和人才发展角度，一个人能获得这样的学习机会是非常宝贵的。\n如果你的长远理想是成为一家公司某个职能的高管，那就进入一家可以提供你学习和成长机会的大企业。\n但陆奇认为，以上仅限于少部分清楚的知道自己长远目标的人，他对女儿说：大部分人在25岁之前，对于人生想要做什么，其实只有模糊的感觉。\n所以，20多岁，要学会快速失败，尝试，反馈，改变。把自己的时间投资在更大的学习发展空间机会中，可能为未来创造更高的收入。\n3、陆奇的20多岁，在做什么？\n读书，以及继续读书。\n1978年，全国恢复高考，17岁的陆奇埋头狠狠啃了两年书，考入复旦大学计算机专业。读书期间，陆奇特别用功。他的同学们回忆说：\n“他瘦瘦小小的身影，每天穿行在教室和图书馆之间，夜里图书馆熄灯，他才穿过农田，回到另一区的寝室。”\n“他背着大书包在校园里穿梭，在林荫道上反反复复背着单词。他是全年级最瘦小的男生，但扛着全年级最大的书包。”\n凭着超凡的努力，陆奇顺利考取复旦的研究生。凭着读研期间优异的成绩，他毕业后留校任教。\n勤奋学习和扎实的专业知识带给陆奇的远不止一份稳定而又体面的工作，还包括更多的人生选项。\n1989 年，卡耐基梅隆大学教授克拉克到复旦交流讲学，讲学时间选在了周末。不巧地是，当天的天气很不给力，暴雨倾盆，周末加坏天气使得来听讲座的学生寥寥无几。校方为了不让教授尴尬，就安排周末留校的师生去听讲座，因为暴雨取消回家计划的陆奇就是其中之一。\n克拉克教授讲完后，让在场师生提问。陆奇抓住这个机会，接连向教授提了几个专业问题，克拉克听完，立刻就对这个提问的复旦老师的学术水平刮目相看。讲座过后，他专门翻阅了陆奇写的论文，看过之后，克拉克就邀请陆奇去卡耐基梅隆大学读博。\n那年陆奇28岁，有点犹豫：“在大学当老师已经是很不错的职业了”。\n克拉克只回了一句：“你是鹰，不应该局限在笼子里。”\n陆奇去了美国。\n走上卡耐基梅隆大学这个更大的平台，才有了陆奇对计算机科学更深入的研究与理解、才有了陆奇与李开复的相识以及后面的开挂人生。\n4、59岁的陆奇还在试图重构知识体系，20多岁怎能不学？\n2016年陆奇在硅谷接受采访时说：“最近几年我重新觉悟——你必须要重新学习，以前学的东西不光过时了，而且现在很多理论包括物理学都已经有了全新的认识，所有你要从根本上重新构建知识、认识世界。”\n陆奇从微软离职原因之一是练习倒骑自行车摔伤了腿，那辆车是他与同事改造的、反向骑行的自行车，骑车时人和身体反应全部是倒置，所以要忘记过去学习到的全部经验。\n就连之前选择加入YC，其中一个原因也是学习：我还希望我的工作不能只利用过往的经验，而是要每天学新东西。不学新东西的话，就没什么乐趣。\n这几年陆奇观察到人才市场里一个非常重要的宏观趋势，整体的需求从原来的技能驱动型人才，越来越往知识和创新驱动型人才转移。所以他认为，一个人的能否快速学习，并将学到的知识应用于创造新的价值也变得愈发重要。\n现在他仍旧保持着每天学习英语、阅读计算机领域最前沿论文的习惯。他说：“我把自己想象成一个软件，今天的版本一定要比昨天的版本好，明天的版本一定要比今天的版本好。”\n年近60岁，陆奇还试图重构知识体系，20多岁的我们又怎么能不学习？\n30岁：做让自己走得远的事情：搭建系统\n陆奇说：30岁你要让自己可以走得远。建立一个核心支撑体系，能让你走得很远。这个体系包括你的身体、你厚实的家庭基础和几个志同道合、可以信任的朋友。\n陆奇是一个寻求最优解的人，方式就是建立系统。\n任何一个问题他都有系统的固定方式去解决——就是把它变成一个非常理性化、可以拆解成任务的方程。\n比如，陆奇的人生里几乎看不冒险，因为他只把机会成本的8%用来冒险，就算这8%，他还是会建立一个决策系统，理性决定——快速反馈——如果方向不对，立即掉头甚至放弃。\n比如，看待自己在微软的贡献，他不计较几个产品的得失，还是要回到系统上：比起一个产品的成败，帮助企业建造长期的创新的生命力才是最重要的。\n我们再看一下他上面着重提到的三个系统。\n1、身体系统\n陆奇极度自律，坚持了十几年早上4点起床。\n过去十几年他是这样的：“4点起来先弄Email，弄完了以后跑步，跑30分钟，洗个澡，去办公室。跑步第一对呼吸系统是很好的锻炼，第二可以出一身汗，第三是我可以边跑边听书不浪费时间，有时候我会把PPT放在跑步机上翻着看。”\n从微软离开后有所变化，他现在对自己的生活效率很不满意，因为骑反向自行车把腿摔伤后，跑步根本不行了，目前他正在找一个让自己感觉每天都很顺畅的方式。\n不过他依然精力旺盛，百度期间，同事说他每日长时间工作，无论周末、假期，无论在北京还是在国外，只要开会，他总是准时出现在视频会议的另外一端。他有依然有自己严格的作息制度，有自己严格的生活习惯，也有非常严格的饮食习惯。\n陆奇认为，每个人有不同的身体状况，他自己的做法不建议其他人学习。但是他有一套核心的方法论可以介绍给大家：\n找到问题的核心，即：无论创业还是在大企业里从业，在工作中如何进行时间管理来让产出最大化，同时也能获得自我满足？\n再找到核心的解决办法，即：\n设计一个“马拉松快步跑”的时间管理方法和心态。\n第一：要意识到这是一场马拉松，不是一场短跑。\n第二：这场马拉松的速度需要很快，因为现实世界中，任何高价值的东西——创业公司、大企业的好岗位等——都会有非常激烈的竞争，你需要保持速度并持续领先。\n设计这样一个工作节奏和时间管理方式，很类似在高速公路开车。\n陆奇说：“你需要保持一个均匀的高速，然后时不时的加速一下，再回到之前均匀的高速。你要避免过度频繁的加速、减速。就像一辆车，如果一直都是高速前进，只是偶尔减速一下，这对与一辆车的损耗是很低的。但如果一辆车过度频繁的突然加速、减速，会对这辆车带来巨大损耗，不用多久车就可能垮掉。\n因此，你需要设计属于你自己的一个工作和生活节奏，这种节奏是你可以保持住的高速，而这个高速可以给你带来最大的效率。同时，你也需要设计这个日程节奏，让它可以应对突发变化，可以时不时的冲刺一下，比如偶尔过度加班让工作在截止日期前完成，然后迅速回归之前的速度。必须避免经常性的透支，经常性的拼命追赶截止日期，经常性的处于疲累状态。身体和精神上偶尔透支可以补回，不可长期透支。”\n跑一个高效率、可持续、并且可以应对临时突发状况的马拉松才是关键。\n2、家庭系统\n陆奇的家庭很少出现在媒体中，公开信息绝少，但陆奇在讲搭建系统时特意提到“厚实的家庭基础”，说明他的个人成功受“家庭系统”支持颇多。\n2018年5月8日，百度宣布陆奇因“个人和家庭原因”离开百度。\n这其实是拿陆奇最不可能的原因当了最常见的公关话术，陆奇的家庭一直是全力支持陆奇做他想做的事业，百度的一位高层说，陆奇就职微软期间，其长期在美国西雅图工作，家人为了陆奇就定居硅谷，“他早就把家庭的事情处理好了”。\n陆奇回国加入百度后，为了照顾陆奇的饮食起居，陆奇家人曾一度迁居北京，百度还为陆奇的夫人配备了出入百度大厦的证件。\n2018年8月16日，YC媒体沟通会上，主持人官宣陆奇加盟YC担任YC中国首任CEO。陆奇和太太、女儿都在现场。\n陆奇的太太说：“我们有一半的时间在美国，他去哪里，我们就跟到哪里。”\n陆奇现场致辞的最后，也特别感谢了他的太太和家人。而且说希望在美国、中国多花时间，为了家庭。\n写这部分内容时，我突然想起小晚的《晚点》团队采访陆奇时曾问过这么一个问题：你是否经常会太过相信自己的力量？\n陆奇说：会。我太太一直觉得我太过于自信了。她老觉得我自以为是。\n这就是最好的支持吧，即便有时认为你的理想“不现实”，但只要你想做，我愿意陪你。这就是陆奇所说的“厚实的家庭基础”对一个人事业的重要性吧，如果你的梦想和成长能得到最亲近的人的支持，应该是最幸福的事了。\n3、人脉系统\n陆奇的人脉有多强？\n陆奇的人脉有多好，我相信在开头介绍中，那些顶级大佬的评价就是最好的答案，接触过的人都愿意帮他，合作过的人都愿意捧他。\n这里再讲几个点。\n1996年，陆奇博士毕业，摆在他面前的有三个选项：回国；华尔街；硅谷。\n他不知道该如何选择，就去请教李开复自己该去哪里、进哪个公司工作，李开复给出了自己的建议：“去硅谷吧，找一家技术类的公司。”\n于是陆奇就去了IBM的Almaden研究实验室，在那里工作了两年。\n之后，陆奇跳槽到雅虎，李开复又一次提醒他：“雅虎的股价不会一直在这个水平上，它要么会上涨5倍，要么下跌5倍。”\n陆奇职业生涯的两次关键时刻，李开复都给出了自己的建议和判断，一次让他看清了自己的优势和发展方向，一次让他看清了一家公司的发展空间。\n2008年，微软收购雅虎未果，当时已在微软任职的师兄沈向阳向鲍尔默引荐了陆奇，于是有了之后鲍尔默与陆奇长达6个小时的会谈。就这样，微软成功挖到了雅虎搜索引擎业务第一人——陆奇，陆奇也开启了他在微软的执行副总裁生涯。\n沈向阳的引荐，让陆奇成为“硅谷最有权势的华人”。\n再到2019年，YC撤出中国，陆奇独立运营新基金奇绩创坛，很快首期美元基金募集完成约1亿美金，出资人都是谁呢？\n陆奇的朋友们，阵容相当豪华：比尔盖茨、孙正义、红杉中国、高瓴资本、北极光创投等。\n陆奇如何看待人脉？\n中国人常说，做成一件事就是：天时地利人和。\n人和就是人脉。陆奇喜欢那句“机会总是留给有准备的人”，但他喜欢那句“机会是留给广结良友的人。”\n陆奇说：我个人的经验里，除了准备充分，你所拥有的人脉的宽度和广度也很重要，要通过交流结识更多人，最好是拥有不同职业背景的人，并跟他们保持关系）。美国有一句谚语，你获得一份工作不是因为你知道什么，而是因为你认识谁。这句话在某种角度上其实很正确，至少在我个人的经验里，这句话很正确。\n陆奇为什么有如此好的人脉资源？\n这句按照查理芒格的说法，当然是陆奇配得上。\n他做了什么让自己配得上？\n我们来分析几点。\n陆奇的人品。\n小晚的团队采访他时，多次试图让他聊百度，我们看陆奇的表现。\n比如问“回头来看，加入百度是一个错误的选择吗？”，陆奇回答“不好意思，我真的不想讲百度”。\n记者追问“你可以谈微软，但是避免谈百度，为什么？”，陆奇回答“是职业道德，我不想为它带来任何Distraction（干扰）”。\n我看完这句，佩服。\n谈及老东家YC，陆奇说：我个人很感激YC，我一定要强调这一点，他们送我们到了他们能送到的最远的地方。\n记者问：看着雅虎一步步走向衰落，为什么没有更早的离开？\n陆奇答：因为我答应杨致远做10年。当时雅虎进入了一个危机，杨致远找我说，中国有一个传统，朋友有难的时候不应该离开。我说那我就不离开了。\n膜拜。\n陆奇的情商。\n小晚团队问：你心中优秀的CEO是什么样子？你的榜样是谁？\n陆奇答：最强的人愿意为你而来，这是我觉得最好的CEO。在中国我觉得马云做得不错。\n后面的一个问题中，他特意提及了张小龙，“张小龙是我非常敬仰的人。中国的移动生态走得很远，很大因素是微信，微信可能是当代做得最出色的一个产品”。\n赞美阿里的组织，赞美腾讯的产品。\n陆奇的品质。\n一个浑身闪耀着发光品质的人怎么会没朋友？\n陆奇身上的优秀品质太多，略举一二。\n比如准时。自媒体人辉哥曾和陆奇在百度共事，他说某次出差，他们先到楼下大堂等，距离预定出发的时间还有1分钟时，他有一些着急，问要不要给陆奇打个电话。熟悉他的人说“他会准时的”，话音刚落，电梯门打开，陆奇出现，一分不差他极度守时。\n比如来信必回。无论是邮件还是微信，你只要发给他，他一定会回复，时间不确定，有时候是凌晨1-2点，有时是早晨5-6点左右。\n比如永远正向。辉哥说，工作中永远难免会遇到困难，但陆奇任何时候都保持正向的态度。无论是在公司开会，还是做大会的 MC，或是回邮件，永远是用简短有力，但充满了力量和鼓舞人上进的精神。大家最累最困难的时候，只要陆奇在那里振臂一挥，大家顿时又像打了鸡血。\n40岁：找一个可以让你淋漓尽致发挥的舞台\n陆奇：“40岁后，理想情况是找到一个可以让你淋漓尽致去发挥的舞台，一个人的才华和一个公司的才华只有在真正被释放的情况下才能实现它的价值。如果这个舞台是你自己的最好。”\n陆奇说过一句广为流传的话：\n“人生不是线性的，不要以为一班车就能把你从现在的位置带到你自己所期望的位置。”\n什么阶段做什么，40岁以后，就要找到一个可以让你淋漓尽致发挥的舞台。\n为什么不是20岁？\n前文也说了，陆奇认为那个阶段，绝大部分人对于人生想要做什么，其实只有模糊的感觉。\n而且陆奇认为，20多岁你要考虑一些现实因素，比如财务方面，工作收入需要满足自己生活的需求以及其他潜在财务责任，比如资助父母兄妹等，理想情况下，还可以有一些存款。\n20多岁多学多做多试，30多岁搭建系统，正是为了40岁以后真正有属于自己的舞台。\n微软属于他的舞台，但不够，所以他离开，回到中国，找更合适的舞台。\n比尔·盖茨一直挽留他，说：百度能给你什么，我都给你。\n陆奇说：你不能给我中国。\n中国是他现在更好的舞台，一个更大意义上的舞台，他要借助一家合适的平台在这个舞台上跳舞。很可惜，百度没能最终成为那个合适的舞台。后来他加入YC，很可惜YC也没最终成为那个合适的舞台。\n后来陆奇认为：属于自己的舞台，如果真的“属于自己”，那是最好的。\n“如果你想真正大规模改变世界，那你必须是这个企业的创始人，否则你永远受限于你的雇主。当这个平台是你亲手建造，那你可以发挥的能量和范围是最充分的。”\n陆奇的的签名是：“Do more, know more, be more”。\n这大概就是追求“be more”吧，40岁以后，自我更重要了。\n这个问题，《晚点》和陆奇的对话很精彩：\n《晚点》：甘地说，be the change you want to see in the world。成为更好的自我和建立一个更好的世界，后者难道不会推动人走得更远吗？\n陆奇：自我才会让人更永久。赚很多钱、建设一个成功公司，甚至建造一个国家、世界，都是外在目标。如果一个目标是外在的，你永远会在达到目标之后变得一片空虚。\n《晚点》：有一些商人，他们的目标就是赢，他们乐此不疲，似乎并不空虚。\n陆奇：你的追求是建立在别人输的基础之上，为什么世界上一定要有人输你才觉得你的生命是有价值的？我认为人的目标是你自己而不是任何外在的因素。\n如今他终于有了属于自己的舞台，奇绩创坛，也真的“属于自己”。\n三、参考\n陆奇最新演讲：如何成为一个优秀的工程师\n传奇人物陆奇的一点人生感悟\n\n","categories":["成长"],"tags":["cs"]},{"title":"关于 Java static","url":"/20211112-about-static/","content":"零、背景同事分享《Effective Java》其中第十章，并发部分例子有争议变量是否需要(代码如下) static？几个大佬说需要加，我众目睽睽下反驳不需要，略尴尬\n&#x2F;&#x2F; 是否需要加 static？才能保证单例正确private volatile Singleton singleton;\n一、程序关键代码1.1 原程序(错误)public class Singleton &#123;   private volatile Singleton singleton;   public Singleton() &#123;   &#125;   private Singleton getInstance() &#123;      if (singleton == null) &#123;         synchronized (Singleton.class) &#123;            if (singleton == null) &#123;               singleton = new Singleton();            &#125;         &#125;      &#125;      return singleton;   &#125;&#125;\n1.2 正确程序\npublic class Singleton &#123;   private static volatile Singleton singleton;   public Singleton() &#123;   &#125;   private Singleton getInstance() &#123;      if (singleton == null) &#123;         synchronized (Singleton.class) &#123;            if (singleton == null) &#123;               singleton = new Singleton();            &#125;         &#125;      &#125;      return singleton;   &#125;&#125;\n\n二、验证2.1 验证程序public class Singleton &#123;   private static final AtomicInteger COUNT = new AtomicInteger(0);   // 通过volatile关键字来确保安全   private volatile Singleton singleton;   public Singleton() &#123;   &#125;   private Singleton getInstance() &#123;      if (singleton == null) &#123;         synchronized (Singleton.class) &#123;            if (singleton == null) &#123;               System.out.println(&quot;new:&quot; + COUNT.addAndGet(1));               singleton = new Singleton();            &#125;         &#125;      &#125;      return singleton;   &#125;   @Test   public void test() &#123;      int taskCount = 700;      // 锁住所有线程，等待并发执行      final CountDownLatch begin = new CountDownLatch(1);      final ExecutorService exec = Executors.newFixedThreadPool(taskCount);      for (int index = 0; index &lt; taskCount; index++) &#123;         submitTask(begin, exec);      &#125;      System.out.println(&quot;开始执行&quot;);      // begin 减1 ，开始并发执行      begin.countDown();      //关闭执行      exec.shutdown();   &#125;   private void submitTask(CountDownLatch begin, ExecutorService exec) &#123;      Runnable run = () -&gt; &#123;         try &#123;            // 等待，所有一起执行            begin.await();            //开始模拟等待。。。            Singleton singleton = new Singleton();            Singleton instance = singleton.getInstance();            System.out.println(Objects.isNull(instance));         &#125; catch (InterruptedException e) &#123;            e.printStackTrace();         &#125;      &#125;;      exec.submit(run);   &#125;&#125;\n2.2 验证结果带 static 的结果符合预期对象只创建一次，并且返回结果均不为 null\n2.2.1 不带 static开始执行new:1new:2new:3falsetrue省略几十行….\n2.2.2 带 static开始执行new:1false\n三、原因分析static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。\n关键：static 变量在内存中只有一个副本，由所有对象共享。\n四、参考\nJava并发（七）：双重检验锁定DCL\nJava中的static关键字解析\n线程池模拟高并发\n\n","categories":["java"],"tags":["java"]},{"title":"为什么要写博客？","url":"/20240303-about-write-blog/","content":"之前我也有想过一些写博客的好处：\n\n知识共享：把解决问题的过程记录下来，方便自己后续翻阅，也帮助他人解决问题。\n教学相长：把学到的知识系统整理出来进行分享，发现盲区立马查缺补漏。\n展示自我：可以在简历上放一个博客链接，让聘用单位有机会更多地了解你。\n提高文档水平：提高协作水平，了解怎么排版更好，怎么用词更好。\n\n在看《软技能2》这本书的时候，发现里面提到很多博客相关的内容。不管是在『营销』还是在『学习』相关的模块上，都频繁提到。\n《软技能2》中比较系统的说法\n\n\n通过博客进行自我营销\n博客可以让他人更了解你，因此会积累名声&#x2F;带来机会\n让你成为更好的软件开发人员和传道者，能带给你许多意想不到的机会。\n很多技术大牛都有技术博客，想想为什么？\n许多著名的软件开发人员直接靠成功的博客赢得口碑。\n博客有一个好处是你无法轻易抹杀的——提高你的沟通技巧。\n组织自己的思想，并将其转化为文字，是一项颇具难度却也极具价值的技能。\n定期更新博客，有助于持续刷新自己的技能，保证自己处于所在行业领域的前沿。\n学习如何写博客实际上都能帮你写出更好的代码，因为你能更轻松地传达自己的意图。\n博客还能帮你更好地传达自己的想法，令想法更有说服力。\n打造成功博客的最大秘诀有且仅有一个——持之以恒。\n强烈建议一周更新一次博客。\n高质量内容的内容才能让你的博客获得成功，想想别人看你博客能获得什么？\n初始阶段，可以通过评论他人博客给自己引流。\n可以撰写博客文章，作为对别人的某篇博客文章的回应(引流效果好)。\n\n《软技能2》建议采取行动开始写博客：\n\n看看你喜欢的博客，试着列出更新频率和文章的平均长度\n开始写博客，制订一个时间表，强迫自己将来坚持写博客。\n承诺至少更新一年博客，大多数人坚持一年作用就会看到相应的效果。\n创建一个待办列表，有新的想法就往里面添加，在需要写的时候就可以挑一个写。\n\n","categories":["成长"],"tags":["成长"]},{"title":"apt-get 常用命令","url":"/20170815-apt-get%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"apt-get应该debian内核系列的系统都能用：\n比如：debian、ubuntu、deepin等\napt-cache search package    #搜索包（相当于yum list | grep pkg）apt-cache show package      #显示包的相关信息，如说明、大小、版本等apt-cache showpg package    #显示包的相关信息，如Reverse Depends（反向依赖）、依赖等apt-get install package       #安装包apt-get reinstall package     #重新安装包apt-get -f install package    #强制安装apt-get remove package        #删除包（只是删掉数据和可执行文件，不删除配置文件）apt-get remove --purge package       #删除包，包括删除配置文件等apt-get autoremove --purge package   #删除包及其依赖的软件包+配置文件等apt-get update          #更新源apt-get upgrade         #更新已安装的包apt-get dist-upgrade    #升级系统apt-get dselect-upgrade        #使用 dselect 升级apt-cache depends package      #了解使用依赖apt-cache rdepends package     #查看该包被哪些包依赖apt-get build-dep package   #安装相关的编译环境apt-get source package      #下载该包的源代码apt-get clean &amp;&amp; apt-get autoclean  #清理下载文件的存档 &amp;&amp; 只清理过时的包apt-get check             #检查是否有损坏的依赖dpkg -S filename          #查找filename属于哪个软件包apt-file search filename  #查找filename属于哪个软件包apt-file list packagename #列出软件包的内容apt-file update           #更新apt-file的数据库dpkg -l      #列出当前系统中所有的包.可以和参数less一起使用在分屏查看（类似于rpm -qa）dpkg -l |grep -i &quot;pkg&quot;   #查看系统中与&quot;pkg&quot;相关联的包（类似于rpm -qa | grep pkg）dpkg -s pkg  #查询一个已安装的包的详细信息（类似于rpm -qi）dpkg -L pkg  #查询一个已安装的软件包释放了哪些文件（类似于rpm -ql）dpkg -S file     #查询系统中某个文件属于哪个软件包（类似于rpm -qf）dpkg -c pkg.deb  #查询一个未安装的deb包将会释放哪些文件（类似于rpm -qpl）dpkg -I pkg.deb  #查看一个未安装的deb包的详细信息（类似于rpm -qpi）dpkg -i pkg.deb  #手动安装软件包（不能解决软依赖性问题，可以用apt-get -f install解决）dpkg -r pkg      #卸载软件包（不是完全的卸载，它的配置文件还存在）dpkg -P pkg      #全部卸载（不能解决依赖性的问题）dpkg-reconfigure pkg     #重新配置dpkg -x pkg.deb dir      #将一个deb包解开至dir目录dpkg --pending --remove  #移除多余的软件# 强制安装一个包(忽略依赖及其它问题)dpkg --force-all -i pkg.deb    #可以参考dpkg --force-help# 强制卸载一个包dpkg --force-all -P pkg.debaptitude update   #更新可用的包列表aptitude upgrade  #升级可用的包aptitude dist-upgrade     #将系统升级到新的发行版aptitude install pkgname  #安装包aptitude remove pkgname   #删除包aptitude purge pkgname    #删除包及其配置文件aptitude search string    #搜索包（相当于yum list | grep pkg，重要）aptitude show pkgname     #显示包的详细信息 （相当于yum info pkg，重要）aptitude clean            #删除下载的包文件aptitude autoclean        #仅删除过期的包文件apt-get install xrdp      #安装图形化\n","categories":["linux"],"tags":["linux"]},{"title":"百度地图 API - 地址 转 经纬度","url":"/20220528-baidu-map-api-address-to-longitude-and-latitude/","content":"0. 背景某做科研的朋友需要对一些地点的坐标然后在 WGS-84 坐标系的底图上呈现相关内容\nBD09 vs WGS84北京韩美林艺术馆,BD09:116.68347847243588,39.88148624000483北京韩美林艺术馆,WGS84:116.67097966259838,39.87446583754102\n1. 准备1.1 寻找成品找了几个网址，反馈说之前用过坐标不准确\n1.2 使用百度地图 API1.2.1 注册百度地图开放平台服务免费需要实名认证网址：lbsyun.baidu.com\n\n1.2.2 创建应用我没有选择 IP 白名单选择的是 SN 签名获取 AK、SK\n1.2.3 文档接口文档之前 V2 版本的接口已经停用了地址：地理编码文档SN 生成注意文档的生成方式还是 V2 的例子地址：SN 生成文档\n2. 代码简单说明地址文件格式一行一个转换后会输出文件：地址,精度,纬度\nCoordinateTransformUtil 在参考文档\n/** * Baidu.com Inc. * Copyright (c) 2022 All Rights Reserved. */package com.hisen.api.baidu.map;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.google.common.base.Charsets;import com.google.common.io.Files;import org.apache.http.HttpEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.util.EntityUtils;import org.joda.time.DateTime;import org.springframework.util.DigestUtils;import java.io.File;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * @author hisenyuan * @date 2022/5/28 10:55 */public class SnCal &#123;    private static final String URL = &quot;https://api.map.baidu.com&quot;;    private static final String PATH = &quot;/geocoding/v3/?&quot;;    /**     * 百度地图 AK     */    private static final String AK = &quot;your ak&quot;;    /**     * 百度地图 SK     */    private static final String SK = &quot;your sk&quot;;    private static final String LINE_BREAK = &quot;\\n&quot;;    private static final String FORMAT = &quot;yyyyMMdd_HH_mm_ss_SSS&quot;;    public static void main(String[] args) throws Exception &#123;        long start = System.currentTimeMillis();        // 需要转换的文件，一行一个        String file = &quot;/Users/hisenyuan/Downloads/address.txt&quot;;        // 结果输出文件夹        String resDir = &quot;/Users/hisenyuan/Downloads/&quot;;        File resFile = getResFile(resDir);        // 读取文件        List&lt;String&gt; addressList = getAddressList(file);        for (int i = 0; i &lt; addressList.size(); i++) &#123;            convertLocation(resFile, addressList, i);            System.out.println(&quot;current line:&quot; + (i + 1));        &#125;        long use = System.currentTimeMillis() - start;        // 打印耗时        System.out.println(&quot;time us(ms):&quot; + use);    &#125;    private static void convertLocation(File resFile, List&lt;String&gt; addressList, int index) throws IOException &#123;        String address = addressList.get(index);        String reqUrl = getReqUrl(address);        // 返回结果        String res = sendUrlGet(reqUrl);        double[] doubles = getWgs84(res);        String wgsRes = address + &quot;,&quot; + doubles[0] + &quot;,&quot; + doubles[1];        Files.append(wgsRes + LINE_BREAK, resFile, Charsets.UTF_8);    &#125;    private static List&lt;String&gt; getAddressList(String file) throws IOException &#123;        List&lt;String&gt; addressList = Files.readLines(new File(file), StandardCharsets.UTF_8);        System.out.println(&quot;sum line:&quot; + addressList.size());        return addressList;    &#125;    private static File getResFile(String resDir) throws IOException &#123;        DateTime dateTime = new DateTime();        File resFile = new File(resDir + &quot;处理结果_&quot; + dateTime.toString(FORMAT) + &quot;.txt&quot;);        if (!resFile.exists()) &#123;            boolean newFile = resFile.createNewFile();            System.out.println(&quot;create file, result:&quot; + (newFile ? &quot;success&quot; : &quot;fail&quot;));        &#125;        return resFile;    &#125;    private static double[] getWgs84(String res) &#123;        JSONObject jsonObject = JSON.parseObject(res);        JSONObject result = jsonObject.getJSONObject(&quot;result&quot;);        JSONObject location = result.getJSONObject(&quot;location&quot;);        Double lng = location.getDouble(&quot;lng&quot;);        Double lat = location.getDouble(&quot;lat&quot;);        return CoordinateTransformUtil.bd09towgs84(lng, lat);    &#125;    private static String getReqUrl(String address) throws UnsupportedEncodingException &#123;        Map&lt;String, String&gt; paramsMap = new LinkedHashMap&lt;&gt;();        paramsMap.put(&quot;address&quot;, address);        paramsMap.put(&quot;output&quot;, &quot;json&quot;);        paramsMap.put(&quot;ak&quot;, AK);        // 参数值转为 UTF-8        String paramsStr = toQueryString(paramsMap);        // 参与 MD5 计算的参数        String wholeStr = PATH + paramsStr + SK;        // UTF-8        String tempStr = URLEncoder.encode(wholeStr, &quot;UTF-8&quot;);        // Md5 摘要( SN 计算)        String md5 = md5(tempStr);        // 请求地址        return URL + PATH + paramsStr + &quot;&amp;sn=&quot; + md5;    &#125;    /**     * 值 UTF-8     */    public static String toQueryString(Map&lt;?, ?&gt; data)            throws UnsupportedEncodingException &#123;        StringBuilder queryString = new StringBuilder();        for (Map.Entry&lt;?, ?&gt; pair : data.entrySet()) &#123;            queryString.append(pair.getKey()).append(&quot;=&quot;);            queryString                    .append(URLEncoder.encode((String) pair.getValue(), StandardCharsets.UTF_8.name()))                    .append(&quot;&amp;&quot;);        &#125;        if (queryString.length() &gt; 0) &#123;            queryString.deleteCharAt(queryString.length() - 1);        &#125;        return queryString.toString();    &#125;    /**     * md5 摘要     */    public static String md5(String str) &#123;        return DigestUtils.md5DigestAsHex(str.getBytes(StandardCharsets.UTF_8));    &#125;    /**     * 发起 http 请求     *     * @param url 请求地址     * @return 返回数据     */    public static String sendUrlGet(String url) &#123;        String responseContent = null;        try &#123;            CloseableHttpClient client = HttpClientBuilder.create().build();            HttpGet httpGet = new HttpGet(url);            CloseableHttpResponse response = client.execute(httpGet);            HttpEntity resEntity = response.getEntity();            responseContent = EntityUtils.toString(resEntity, StandardCharsets.UTF_8);            // close resources            response.close();            client.close();        &#125; catch (Exception e) &#123;            System.out.println(e.getMessage());        &#125;        return responseContent;    &#125;&#125;\n3. 参考\n百度地图API实现 地址&amp;经纬度 互相转换\nCoordinateTransformUtil - wgs84, gcj02, bd09 三种坐标的互相转换\n\n注意，第一个文档的接口已经过时，新申请的用户无法使用\n","categories":["java"],"tags":["java"]},{"title":"北京联通-光猫改桥接-并开启IPv6","url":"/20220604-bj-unicom-optical-modem-change-to-bridge-and-set-ipv6/","content":"0. 背景现有的长城 100M 宽带太寒酸了之前的住户说想升级光纤都没办法于是乎咨询了下联通可否装光纤答案是可以，换个套餐就行\n桥接的好处就是，光猫只做光猫该做的事情。其它事情由自己的路由器进行设置并且管理。这样即使你搬家什么的，路由器搬走，任何设备都不用动，包括固定内网 IP 等我主要的点是固定内网 IP，因为我由 NAS\n1. 操作1.1 改为桥接这一步是需要联系安装宽带的师傅他们远程可以直接修改如果改为桥接，那么原有网络无法使用\n重点\n\n联系师傅索要宽带账号密码\n要安装师傅修改光猫为桥接\n修改之后进光猫后台较麻烦(不过用不到，都在路由器操作了)\n\n\n1.2 路由器拨号我的路由器是网件 R8000，输入账号密码等配置生效。完事之后就可以上午，但是，这时候 IPv6 是不好使的。\n1.3 IPv6找到 IPv6 相关设置(高级—高级设置—IPv6)选择 PPPoE，使用 IPv4 一样的账号密码拨号等待配置生效，即可发现 IPv6 正常IPv6 测试网址：test-ipv6.com\n至于为什么要 IPv6，那只能说懂得都懂，啊哈哈。\n2. 参考桥接上网这篇文章的一些观点我可能不太认同，最重要的是，里面提到可以联系客服修改为桥接这就很方便了，网上很多都是各种破解，挺麻烦。\n电信光猫用桥接模式好还是路由模式好？\n","categories":["其它"],"tags":["IPv6","ip"]},{"title":"搭建我的第一台服务器","url":"/20230423-build-my-first-server/","content":"1. 简单介绍当时看朋友买的 E5 CPU 到了白菜价而且之前使用 dell 9020 sff 装的软路由也转给了朋友就想着整一个性能更强一些的服务器在家跑着，方便自己折腾。\n当前跑的服务\n\nDDNS 服务\n网心云( 500M下行&#x2F;100M上行，收益应该可以覆盖网费+电费 )\nhomeassistant\n青龙系统( JD 签到 )\n\n2. 配置清单\n\n\n\n\n零件\n类型\n数量\n总价\n当前状态\n\n\n\n电源 先马 金牌1000w\n全新\n1\n634.05\n在用\n\n\n机箱 先马 黑洞7\n全新\n1\n279\n在用\n\n\n散热 冰曼 6管双扇\n全新\n2\n113.52\n在用\n\n\n致钛 2T SSD(nvme)\n全新\n1\n819\n在用\n\n\n金胜维 480G SSD(m.2 SATA)\n全新\n1\n148.98\n在用(系统盘)\n\n\n转接 ssu nvme 转 PCIE\n全新\n1\n14.90\n在用\n\n\n主板 华硕 Z10PA-D8\n拆机\n1\n1150\n在用\n\n\n内存 三星 32G\n拆机\n2\n418\n在用\n\n\n硬盘 随机 480G\n拆机\n2\n218\n报废\n\n\nCPU E5 2650V4\n拆机\n2\n79\n在用\n\n\n整机\n\n\n3874.75\n\n\n\n\nCPU参数对比\n\n3. 踩坑感言不建议购买二手 SSD，特别是不知名品牌的。\n","categories":["homelab"],"tags":["homelab"]},{"title":"centos更换yum源为阿里云 - 三步搞定","url":"/20170217-centos%E6%9B%B4%E6%8D%A2yum%E6%BA%90%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91-%E4%B8%89%E9%83%A8%E6%90%9E%E5%AE%9A/","content":"阿里云是最近新出的一个镜像源。得益于阿里云的高速发展，这么大的需求，肯定会推出自己的镜像源。阿里云Linux安装镜像源地址：http://mirrors.aliyun.com/\nCentOS系统更换软件安装源\n第一步：备份你的原镜像文件，以免出错后可以恢复。\n1、备份mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup\n2、下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F;\n（如果无wget命令，底部有具体说明）\nCentOS 5\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\nCentOS 6\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\nCentOS 7\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n3、之后运行yum makecache生成缓存\n\nps：如果你跟我一样苦逼：\n-bash: wget: command not found\n然后：\nyum -y install wget #失败\n那么你可以直接选择上面对应系统的文件下载链接\n下载好文件之后改名为CentOS-Base.repo\n直接放到&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下即可\n","categories":["linux"],"tags":["linux","centos"]},{"title":"count函数效率问题 - 了解count函数","url":"/20170303-count%E5%87%BD%E6%95%B0%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%20-%20%E4%BA%86%E8%A7%A3count%E5%87%BD%E6%95%B0/","content":"count函数的作用想要真正的理解count函数，我们就必须明白count函数的作用。\n作用一：统计某一列非空(not null)值得数量，即统计某列有值得结果数,使用count(col)。\n作用二：统计结果集的行数，此时不用管某列是否为null值。即使用count(*).\n明白了这点，我们就应该知道MySQL的count(*)并不是想象中的那样，统计每一列的值，而是直接忽视掉所有列，直接统计行数，那么它的效率肯定是很高的。\n但是有一点，当col指定了该字段为NOT NULL时实际上，MySQL会自动将count(col)转为count(*),但是这样也同样耗费了些时间，如果col没有指定为NOT NULL的话，那么效率就更低了，MySQL就必须要判断每一行的值是否为空。\n所以综上所述，如果是要统计行数最好优先使用select count(*)\n当统计某一列等于多少的值得时候可以使用下面两种方法:\nSELECT SUM(IF(id = 23,1,0)) FROM table SELECT COUNT(id = 23 OR NULL) FROM table \n","categories":["java"],"tags":["mysql"]},{"title":"鳄龟记录 - 持续更新","url":"/20231231-crocodile-turtle-weight-record/","content":"1.生活环境20210927\n\n20220611\n2.称重记录\n\n\n日期\n猛龟体重(g)\n怂龟体重(g)\n\n\n\n2021年10月07日\n290.2\n273.8\n\n\n2021年10月16日\n290\n278.8\n\n\n2021年10月30日\n301.7\n294.4\n\n\n2021年11月13日\n330\n317.1\n\n\n2021年12月11日\n420.5\n371.6\n\n\n2022年03月05日\n506.5\n373.4\n\n\n2022年05月21日\n552.4\n-\n\n\n2022年05月30日\n644\n-\n\n\n2022年06月12日\n734.5\n-\n\n\n2022年06月26日\n822\n-\n\n\n2022年07月24日\n1141.7\n-\n\n\n2022年08月14日\n1429\n-\n\n\n2022年10月30日\n1718\n-\n\n\n2023年03月11日\n2104\n-\n\n\n2023年12月31日\n3356\n-\n\n\n3.体重趋势\n4.一些特写\n","categories":["水族"],"tags":["水族"]},{"title":"优雅地分桶 - 数据分片 - list 拆分","url":"/20220218-divide-barrels-gracefully/","content":"零、背景最近在做数据迁移为了加速迁移速度其中就需要把查询到的数据( max 100 条)拆分成 5 份，然后执行 5 个子任务，加速处理\n一、代码1.1 常规做法public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; split2(List&lt;T&gt; lists, int subCount) &#123;    if (CollectionUtils.isEmpty(lists) || subCount &lt; 1) &#123;        return null;    &#125;    List&lt;List&lt;T&gt;&gt; result = new ArrayList&lt;&gt;();    int size = lists.size();    int count = (size + subCount - 1) / subCount;    for (int i = 0; i &lt; count; i++) &#123;        List&lt;T&gt; subList = lists.subList(i * subCount, (Math.min((i + 1) * subCount, size)));        result.add(subList);    &#125;    return result;&#125;\n\n1.2 新颖做法\npublic static &lt;T&gt; List&lt;List&lt;T&gt;&gt; split(List&lt;T&gt; lists, int subCount) &#123;    if (CollectionUtils.isEmpty(lists) || subCount &lt; 1) &#123;        return null;    &#125;    // 简约的计算分桶次数，避免判断是否有余数，再+1    int splitTimes = (lists.size() + subCount - 1) / subCount;    return Stream            // 每次递增指定子列表个数            .iterate(0, n -&gt; n + subCount)            // 限制循环次数            .limit(splitTimes)            // 转换成想要的结果            .map(item -&gt; lists.stream()                    // 跳过之前的下标                    .skip(item)                    // 限制每次的个数为子表个数                    .limit(subCount)                    // 转换为子列表                    .collect(Collectors.toList()))            // 转换为主列表            .collect(Collectors.toList());&#125;\n三、性能3.1 结果从结果可以看出，一味地追求新颖也不是好事，需要知其然java 8 的 stream 并不占优势，性能相差好几个数量级…\nBenchmark              Mode  Cnt       Score       Error  UnitsListSplit.split2Test  thrpt   10  306050.155 ± 24646.689  ops/sListSplit.splitTest   thrpt   10     353.048 ±   122.423  ops/s\n3.3 压测代码压测教程：JMH 使用参考\nimport com.google.api.client.util.Lists;import org.openjdk.jmh.annotations.Benchmark;import org.openjdk.jmh.annotations.BenchmarkMode;import org.openjdk.jmh.annotations.Fork;import org.openjdk.jmh.annotations.Measurement;import org.openjdk.jmh.annotations.Mode;import org.openjdk.jmh.annotations.Scope;import org.openjdk.jmh.annotations.Setup;import org.openjdk.jmh.annotations.State;import org.openjdk.jmh.annotations.Warmup;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;/** * @author hisenyuan * @date 2022/2/18 20:05 */// 默认的 State，每个测试线程分配一个实例@State(Scope.Thread)// 如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。@Fork(1)// 预热的次数 3 次基准测试(不是执行三次方法)@Warmup(iterations = 1)// 基准执行次数 10 次(参数含义同上)@Measurement(iterations = 10)@BenchmarkMode(Mode.Throughput)public class ListSplit &#123;    private static final List&lt;Integer&gt; INTEGERS = Lists.newArrayList();    @Setup    public void init() &#123;        List&lt;Integer&gt; list = Stream.iterate(0, n -&gt; n + 1)                .limit(1000)                .collect(Collectors.toList());        INTEGERS.addAll(list);    &#125;    @Benchmark    public void splitTest()&#123;        List&lt;List&lt;Integer&gt;&gt; listList = split(INTEGERS, 3);    &#125;    @Benchmark    public void split2Test()&#123;        List&lt;List&lt;Integer&gt;&gt; listList = split2(INTEGERS, 3);    &#125;    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; split(List&lt;T&gt; lists, int subCount) &#123;        // 简约的计算分桶次数，避免判断是否有余数，再+1        int splitTimes = (lists.size() + subCount - 1) / subCount;        return Stream                // 每次递增指定子列表个数                .iterate(0, n -&gt; n + subCount)                // 限制循环次数                .limit(splitTimes)                // 转换成想要的结果                .map(item -&gt; lists.stream()                        // 跳过之前的下标                        .skip(item)                        // 限制每次的个数为子表个数                        .limit(subCount)                        // 转换为子列表                        .collect(Collectors.toList()))                // 转换为主列表                .collect(Collectors.toList());    &#125;    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; split2(List&lt;T&gt; list, int len) &#123;        if (CollectionUtils.isEmpty(list) || len &lt; 1) &#123;            return null;        &#125;        List&lt;List&lt;T&gt;&gt; result = new ArrayList&lt;&gt;();        int size = list.size();        int count = (size + len - 1) / len;        for (int i = 0; i &lt; count; i++) &#123;            List&lt;T&gt; subList = list.subList(i * len, (Math.min((i + 1) * len, size)));            result.add(subList);        &#125;        return result;    &#125;\n\n四、后话\n其中不错的一点我觉得是\nint splitTimes = (lists.size() + subCount - 1) / subCount;\n这样巧妙的计算，避免了先取模，后判断是否有余数的繁杂。这个不是我想到的，也不知道怎么通过数学证明，但是这样就是对的 &#x3D;&#x3D;\nps:是谁说数学没用的 ？？？？\n","categories":["java"],"tags":["java"]},{"title":"开源画图工具(各种图)：draw.io 支持 Web、macOS、Windows、Linux","url":"/20200406-draw.io-open-source-drawing-tools-support-web-mac-windows-linux/","content":"draw.io 一个很棒的开源画图工具，可以导出 xml、pdf、html、png 等各种格式其实重点是开源，目前好几个地方看到有在用，之前用网页版，现在用桌面版多些\n网页版：draw.io桌面版：github 下载支持：Windows、macOS、Linux、Google Chrome OS\n","categories":["soft"],"tags":["soft"]},{"title":"dubbo transport Data length too large-14277263-max payload-8388608 channel-NettyChannel","url":"/20190307-dubbo%20transport%20Data%20length%20too%20large-14277263-max%20payload-8388608%20channel-NettyChannel/","content":"一、报错信息com.alibaba.dubbo.remoting.transport.ExceedPayloadLimitException: Data length too large: 14277263, max payload: 8388608, channel: NettyChannel [channel=[id: 0x12a13c8f, /172.0.0.1:49402 =&gt; /172.0.0.2:23888]]\n二、报错原因dubbo默认使用Netty传输协议并且默认的大小限制为：默认为8M，即8388608\n三、解决办法\n修改接口出现这种情况是因为一个接口查某个表的所有数据(几万条)一般这种接口肯定是需要分页的\n\n更改配置信息在dubbo.properties 中增加如下\n\n\ndubbo.protocol.dubbo.payload=11557050\n","categories":["java"],"tags":["java","netty","dubbo"]},{"title":"dubbo与zookeeper的关系","url":"/20171115-dubbo%E4%B8%8Ezookeeper%E7%9A%84%E5%85%B3%E7%B3%BB/","content":"Zookeeper的作用zookeeper用来注册服务和进行负载均衡，哪一个服务由哪一个机器来提供必需让调用者知道，简单来说就是ip地址和服务名称的对应关系。\n当然也可以 通过硬编码的方式把这种对应关系在调用方业务代码中实现，但是如果提供服务的机器挂掉调用者无法知晓，如果不更改代码会继续请求挂掉的机器提供服务。 \nzookeeper通过心跳机制可以检测挂掉的机器并将挂掉机器的ip和服务对应关系从列表中删除。至于支持高并发，简单来说就是横向扩展，在不更改代码 的情况通过添加机器来提高运算能力。\n通过添加新的机器向zookeeper注册服务，服务的提供者多了能服务的客户就多了。\ndubbo是管理中间层的工具，在业务层到数据仓库间有非常多服务的接入和服务提供者需要调度，dubbo提供一个框架解决这个问题。\n注意这里的dubbo只是一个框架，至于你架子上放什么是完全取决于你的，就像一个汽车骨架，你需要配你的轮子引擎。\n这个框架中要完成调度必须要有一个分布式的注册中心，储存所有服务的元数据，你可以用zk，也可以用别的，只是大家都用zk。\nzookeeper和dubbo的关系Dubbo的将注册中心进行抽象，是得它可以外接不同的存储媒介给注册中心提供服务，有ZooKeeper，Memcached，Redis等。\n 引入了ZooKeeper作为存储媒介，也就把ZooKeeper的特性引进来。\n\n负载均衡:单注册中心的承载能力是有限的，在流量达到一定程度的时 候就需要分流，负载均衡就是为了分流而存在的，一个ZooKeeper群配合相应的Web应用就可以很容易达到负载均衡；\n资源同步:单单有负载均衡还不 够，节点之间的数据和资源需要同步，ZooKeeper集群就天然具备有这样的功能；\n命名服务:将树状结构用于维护全局的服务地址列表，服务提供者在启动 的时候，向ZK上的指定节点&#x2F;dubbo&#x2F;${serviceName}&#x2F;providers目录下写入自己的URL地址，这个操作就完成了服务的发布\nMast选举，分布式锁等。\n\n参考https://www.cnblogs.com/xiaofei1208/p/7077733.html\n","categories":["java"],"tags":["java"]},{"title":"eclipse无法链接github","url":"/20170208-eclipse%E6%97%A0%E6%B3%95%E9%93%BE%E6%8E%A5github/","content":"浏览器什么的都能打开github.com就是eclipse无法提交到github，每次都是连接超时然后就直接修改host了，目前有效2017年1月14日 18:01:34\nhost位置：\nC:\\Windows\\System32\\drivers\\etc\nhost文件最后一行加上下面内容即可\n192.30.253.112       github.com","tags":["eclipse","github"]},{"title":"找到好的学习方法","url":"/20200226-find-a-good-way-to-learn/","content":"时间是公平的，对每个人都一样，不同之处在于每个人单位时间的产出值会有差异。一直在寻找适合于自己的学习方法以提高时间的利用效率，以便不影响诗和远方&#x3D;&#x3D;奈何目前也没有太多满意的答案，或许生命的意义就是在于探索未知而又刺激的世界。分享一些文字，提到了一些好的学习方法，抛砖引玉，共勉。\n《贫穷的本质》告诉我们，贫穷的本质是认知。其实很多时候真的是认知，方法论决定了一个人可以走多远。\n《刻意练习》原地踏步的练习是没意义的，大众眼里一万小时定律基本上是错误的，需要的是有进步练习;\n《学习之道》十个不错的方法：运用回想、知识组块、简化类比、方法交替、间隔重复、注意休息、心理对照、自我测试、保持专注、困难先行;\n《如何阅读一本书》里面有提到主题阅读，不同的人对同一主题会有不同的看法，可以对比吸收;\n《程序员的职业素养》有提到卡塔练习，提高我们的肌肉反应，让写代码像聊天打字一遍的顺畅;\n早些天看到一篇不错的帖子对我感触最深的就是：4标题：如果高效学习有什么秘诀的话，那就都在这里了：）\n\n1）不要完美主义！2）不要过度“学习路径依赖”，学习要冲着自己的目标去。3）不要迷信权威的“好”教材。4）不要看不起“薄薄”的“傻”教材，这些你看不起的学习材料，可能是你入门某个领域的关键。5）不要迷信单一教材。6）实践！7）debug非常非常重要。8）量变到质变。9）最后，一定要相信时间的力量。\n参考：\n\n《贫穷的本质》\n《刻意练习》\n《学习之道》\n《如果阅读一本书》\n如果高效学习有什么秘诀的话，那就都在这里了：）\n\n","categories":["随说"],"tags":["随说"]},{"title":"github api - github api中文说明","url":"/20170428-github%20api%20-%20github%20api%E4%B8%AD%E6%96%87%E8%AF%B4%E6%98%8E/","content":"github api的网址\nhttps://api.github.com/\n这里介绍两个api\n#获取个人信息https://api.github.com/users/&#123;user&#125;;\n\n\n\n\nkey\n含义\nvalue\n\n\n\nlogin\n登录名称\nhisen-yuan\n\n\nid\n数字编号\n16789019\n\n\navatar_url\n头像地址\nhttps://avatars1.githubusercontent.com/u/16789019?v=3\n\n\nname\n用户昵称\nhisenyuan\n\n\nblog\n博客地址\nhttp://hisen.me\n\n\nlocation\n地理位置\nChina\n\n\nbio\n个人说明\nJava R &amp; D\n\n\npublic_repos\n仓库个数\n11\n\n\ncreated_at\n创建时间\n2016-01-20 01:57:15Z\n\n\nupdated_at\n最后更新\n2017-04-20 14:03:27Z\n\n\n#获取项目信息https://api.github.com/users/&#123;user&#125;/repos\n\n\n\n\nkey\n含义\nvalue\n\n\n\nid\n项目编号\n88646378\n\n\nname\n项目名称\ndubbo\n\n\nhtml_url\n项目地址\nhttps://github.com/hisen-yuan/dubbo\n\n\ncreated_at\n创建时间\n2017-04-18T16:21:57Z\n\n\nupdated_at\n更新时间\n2017-04-18T16:23:16Z\n\n\npushed_at\n提交时间\n2017-04-19T02:33:33Z\n\n\nsize\n项目大小\n6514\n\n\nlanguage\n编程语言\nJava\n\n\ngithub提供的所有api\n\ncurrent_user_url: &quot;https://api.github.com/user&quot;,current_user_authorizations_html_url: &quot;https://github.com/settings/connections/applications&#123;/client_id&#125;&quot;,authorizations_url: &quot;https://api.github.com/authorizations&quot;,code_search_url: &quot;https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,commit_search_url: &quot;https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,emails_url: &quot;https://api.github.com/user/emails&quot;,emojis_url: &quot;https://api.github.com/emojis&quot;,events_url: &quot;https://api.github.com/events&quot;,feeds_url: &quot;https://api.github.com/feeds&quot;,followers_url: &quot;https://api.github.com/user/followers&quot;,following_url: &quot;https://api.github.com/user/following&#123;/target&#125;&quot;,gists_url: &quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;,hub_url: &quot;https://api.github.com/hub&quot;,issue_search_url: &quot;https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,issues_url: &quot;https://api.github.com/issues&quot;,keys_url: &quot;https://api.github.com/user/keys&quot;,notifications_url: &quot;https://api.github.com/notifications&quot;,organization_repositories_url: &quot;https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,organization_url: &quot;https://api.github.com/orgs/&#123;org&#125;&quot;,public_gists_url: &quot;https://api.github.com/gists/public&quot;,rate_limit_url: &quot;https://api.github.com/rate_limit&quot;,repository_url: &quot;https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;&quot;,repository_search_url: &quot;https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;,current_user_repositories_url: &quot;https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;&quot;,starred_url: &quot;https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,starred_gists_url: &quot;https://api.github.com/gists/starred&quot;,team_url: &quot;https://api.github.com/teams&quot;,user_url: &quot;https://api.github.com/users/&#123;user&#125;&quot;,user_organizations_url: &quot;https://api.github.com/user/orgs&quot;,user_repositories_url: &quot;https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;,user_search_url: &quot;https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;"},{"title":"git版本差异报告 - git difftool分支对比 - gitLab compare","url":"/20190309-git%E7%89%88%E6%9C%AC%E5%B7%AE%E5%BC%82%E6%8A%A5%E5%91%8A%20-%20git%20difftool%E5%88%86%E6%94%AF%E5%AF%B9%E6%AF%94%20-%20gitLab%20compare/","content":"一、初衷有时候上线会出现合错代码，比如功能，或者maven的pom文件；\n人都不是十全十美的人，只要是人就会犯错关键是要想办法去避免，只有工具才不犯错\n所以尽量想办法利用工具来防止我们犯错，git来说有很多办法；简单的命令，或者gitlab的compare报告；每次上线之前，开发自己看一遍当前版本与线上版本的区别，确认每一个点都是正确的改动；\n二、gitlab compare功能(推荐)2.1 入口：工程首页 -&gt; Repository -&gt; Compare2.2 选择：上一个版本，当前版本，点击Compare2.2 结果：一次能看到两个版本的所有commit、改动点\n三、git命令# 显示版本之间改动的文件名git difftool master 1.2.4 --stat# 在命令行挨个显示版本某个文件具体差异git difftool master 1.2.4\n","categories":["java"],"tags":["java","gitLab","git"]},{"title":"通过 OpenWrt 利用 Cloudflare tunnel 回家 - 连上家庭内网","url":"/20221114-go_home_by_cloudflare_via_openwrt/","content":"1. 写在前面需要注册 Cloudflare 账号这个服务目前是可以免费使用\n速度的话一般，勉强可以接受。后续再折腾看看是什么问题。\n2. 主要操作步骤\n# 安装客户端opkg install cloudflared# 登录, 返回一个 cloudflare 官方连接，点击会生成密钥cloudflared tunnel login# 创建一条隧道，&lt;NAME&gt; 替换成你喜欢的名字cloudflared tunnel create &lt;NAME&gt;# 创建一个域名解析cloudflared tunnel route dns hisen home.hisenyuan.xyz# 配置 xxx.ymlurl: http://192.168.0.10 # 内网的网关，注意做好鉴权tunnel: d42a48c9-26da-4734-b249-1b9eee69ba8ccredentials-file: /root/.cloudflared/d42a48c9-26da-4734-b249-1b9eee69ba8c.json# 启动一个内网穿透服务cloudflared tunnel --config xxx.yml run\n3. 参考文档\nCloudflare Argo Tunnel 小试：我终于可以用树莓派做网站啦\n\n","categories":["homelab"],"tags":["OpenWrt"]},{"title":"go程序设计语言练习 - 同统计重复 - gop1.io/ch1/dup2/dup2.go","url":"/20181027-go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%20-%20%E5%90%8C%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D/","content":"一直在写java，看语法逻辑什么的没有问题\n但是刚刚看书上写出来的这个程序，居然不知道怎么在goland里面运行…\n于是曲线救国，了解到打印输入的参数。\n这断代码就是为了找出输入数据中的重复行\n\n直接启动，不带参数，启动之后输入参数\n\n参数0: /private/var/folders/lk/p8gbq87n6rvfndk7wlk23y8r0000gn/T/___go_build_dup2_go1 # 一行输入一个1 # 一行输入一个^D #这是command + D2\t1 # 输出的结果：个数 输入值\n\n在命令行启动，带\n\n$ go run dup2.go &#x27;hisen.txt&#x27;参数0: /var/folders/lk/p8gbq87n6rvfndk7wlk23y8r0000gn/T/go-build525680776/b001/exe/dup2参数1: hisen.txt #代码同级目录的文件名2       hisen2       hisenyuan2       123\n\n代码如下：\n\npackage mainimport (\t&quot;bufio&quot;\t&quot;fmt&quot;\t&quot;os&quot;\t&quot;strconv&quot;)/**本程序只能在终端运行：go run dup2.go &#x27;hisen.txt&#x27;hisen.txt 为本文件同级目录的文件 */func main() &#123;\t// 遍历输出的参数\tfor idx, args := range os.Args &#123;\t\tfmt.Println(&quot;参数&quot;+strconv.Itoa(idx)+&quot;:&quot;, args)\t&#125;\t// map[string,int]\tcounts := make(map[string]int)\t// 拿到文件名，从第二个参数开始\tfiles := os.Args[1:]\tif len(files) == 0 &#123;\t\tcountLines(os.Stdin, counts)\t&#125; else &#123;\t\t// 遍历文件\t\tfor _, arg := range files &#123;\t\t\t// 读取文件内容\t\t\tf, err := os.Open(arg)\t\t\tif err != nil &#123;\t\t\t\tfmt.Fprintf(os.Stderr, &quot;dup2: %v\\n&quot;, err)\t\t\t\tcontinue\t\t\t&#125;\t\t\tcountLines(f, counts)\t\t\tf.Close()\t\t&#125;\t&#125;\t// 遍历map\tfor line, n := range counts &#123;\t\tif n &gt; 1 &#123;\t\t\tfmt.Printf(&quot;%d\\t%s\\n&quot;, n, line)\t\t&#125;\t&#125;&#125;// 把数据装入mapfunc countLines(file *os.File, counts map[string]int) &#123;\t// 从文件中加载数据\tinput := bufio.NewScanner(file)\t// 遍历文件内容\tfor input.Scan() &#123;\t\tcounts[input.Text()]++\t&#125;&#125;\n","categories":["go"],"tags":["go"]},{"title":"春节期间的收获 | 记第一次在外过年","url":"/20210218-harvest-during-chinese-spring-festival/","content":"零、摘要响应国家就地过年的号召，今年第一次在外过年。弹指一挥间，12 天的假期已经成为过去。期间还是有不少的收获，最主要的是看了 4 本书。以及在微博上面看到了不少的人和事，甚是触动。\n找到自己的兴趣，追求精进，坚持做对的事情。\n一、阅读1.1 《 UML 和模式应用》0113~0207这本书是 leader 推荐给大家的基于职责去做设计的理念确实很棒，值得观摩实践。\n\n1.2 《段永平投资问答录(商业逻辑篇)》0120~0214春节之前断断续续看了一部分，后面主要是春节在看。关键是：要做对的事情，把事情做对。(前者更重要)创始人对公司的文化影响很大，文化又对公司影响大。\n有自己清晰的不为清单，发现错了立马纠正，因为这时候止损成本最低。\n段永平的投资问答录其实很多时候也适合于人生建议，都是相通的。很幸运有如此成功的人愿意与普通人进行交流，传授经验。\n书本当中也能接触到不少成功人士，正所谓近朱者赤，还有所谓的圈子，多看多想多学，总是会进步的。\n1.3 《代码精进之路:从码农到工匠》0216~0217实践出真知，作者成就非凡其中的很多理念深度赞同是一本值得翻阅的书，收益颇多\neg：\n\n写好代码的技艺不是一蹴而就的，它是一个系统化的工程，不是看几本书、写几年代码就能轻松习得的，而需要我们对自己的思维习惯、学习方法和工程实践进行彻底的反省和重构。\n在计算机科学中有两件难事：缓存失效和命名。\n通常，如果你无法想出一个合适的名字，很可能意味着代码“坏味道”、设计有问题。\n写好代码、追求卓越和工匠精神是每个程序员都应该具备的优秀品质。\n管理者的一个很重要的使命就是帮助团队成长，包括制定规范和技术传承。\n没有抽象思维，就没有人类今天灿烂的文明。\n分治和抽象一样，都是人类进化过程中形成的伟大智慧，也是我们解决复杂问题的不二选择。\n在学习之前，我们一定要问自己，这次学习的目标是什么？\n技术 leader 要以德服人+以技服人\n\n1.4 《硅谷钢铁侠:埃隆·马斯克的冒险人生》0217~0218看完对马斯克以及他的企业和野心有更多的了解羡慕他精力旺盛、超强的学习能力、以及追求梦想的执着\n二、微博触动最大的就是@纯银V 一位产品经理的微博特别是关于一个 95 后实习生的故事也很佩服纯银从一个法警做到如此高阶的产品经理羡慕他把看产品的思路套用在看公司上，然后 2020 投资中概股收益颇丰\n感悟就是：积极、主动、为自己工作，找到喜欢的事情，持续精进。\n三、生活和家里亲戚去郊区玩了几天，还是比较放松。有时候不管是家人之间的沟通，还是朋友之间，可能更多的时候需要的是倾听，而不是讲道理。犹如《代码精进之路》里讲的”不过在家里，我依然是输多赢少，后来我才发现，原来家不是一个讲逻辑的地方。”\n安排好自己的时间，加强执行力！\n","categories":["随说"],"tags":["随说"]},{"title":"Hexo 升级 & 优化","url":"/20250719-hexo-upgrade-and-optimize/","content":"1. 概览换了电脑，hexo 一直没迁移。乘着周末，折腾一下。幸好之前有一个记录可以参考一下：hexo安装过程最新版本的 node 和 老版本的 hexo 有兼容性问题(hexo 官方说明)，所以需要升级。\n\n\n\n项目\n折腾前\n折腾后\n\n\n\nhexo 版本\n3.9.0\n7.3.0\n\n\n托管\nGitHub\nCloudflare\n\n\n原始域名\nhisenyuan.github.io\nhisenyuan-github-io.pages.dev\n\n\n2. 过程过程比较挫折，我就写最后的过程。插件+主题等都需要重新安装和配置，网上都有教程。\n\n2.1 安装# 安装 node$ brew install node# 安装 hexo (如果按官方的安装方式，最新只能安装 4.x)$ brew install hexo# 查看 hexo 版本$ hexo versionINFO  Validating confighexo: 7.3.0hexo-cli: 4.3.2os: darwin 24.4.0 15.4.1# 初始化新 hexo$ hexo init blog# 安装 git 提交插件npm install hexo-deployer-git --save# 安装体积缩小插件(性能优化)npm install hexo-neat --save# 安装图片懒加载插件npm install hexo-lazyload-image --save\n2.2 迁移数据把旧电脑的整个 blog 拷贝到新电脑。然后把 source 目录迁移到新初始化( hexo init blog 这步 )confi 相关的话就看新老都 diff，看着配置&#x3D;&#x3D;\n2.3 配置主题$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n然后在 blog 的站点配置里面修改主题 theme: next其它的就在 next 的配置里面进行调整\n2.4 迁移到 CloudflareCloudflare 也有 pages 的功能。原理是授权 github 给 Cloudflare 自动拉取部署。迁移之前: hisen.me -&gt; Cloudflare -&gt; github.io迁移之后: hisen.me -&gt; Cloudflare\n具体的操作过程：\n\n登录 Cloudflare\n找到 Worker\n创建\nPages\n导入现有 Git 存储库\n授权(建议仅授权仓库)\n保存并部署\n可以设置域名(我这一步很顺利，因为之前就在用 Cloudflare CDN)\n\n2.4.1 一次提交构建过程提交：2025-07-19 16:12:08构建：2025-07-19 16:12:40耗时：8s\n2.4.1.1 hexo 提交[main 5a25906] Site updated: 2025-07-19 16:12:08 601 files changed, 1271 insertions(+), 1195 deletions(-) create mode 100644 20250719-hexo-upgrade-and-optimize/index.html create mode 100644 archives/2025/07/index.html create mode 100644 archives/2025/index.html create mode 100644 tags/hexo/page/2/index.htmlEnumerating objects: 2105, done.Counting objects: 100% (2105/2105), done.Delta compression using up to 12 threadsCompressing objects: 100% (644/644), done.Writing objects: 100% (1227/1227), 695.41 KiB | 3.16 MiB/s, done.Total 1227 (delta 583), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (583/583), completed with 264 local objects.To github.com:hisenyuan/hisenyuan.github.io.git   8ee58fc..5a25906  HEAD -&gt; masterbranch &#x27;main&#x27; set up to track &#x27;git@github.com:hisenyuan/hisenyuan.github.io.git/master&#x27;.INFO  Deploy done: git\n2.4.1.2 Cloudflare 构建16:12:24.762\tCloning repository...16:12:25.822\tFrom https://github.com/hisenyuan/hisenyuan.github.io16:12:25.822\t * branch            5a259063ef0189af5c31801cfc15d90817c95c9b -&gt; FETCH_HEAD16:12:25.82216:12:25.925\tHEAD is now at 5a25906 Site updated: 2025-07-19 16:12:0816:12:25.92616:12:26.00416:12:26.005\tUsing v2 root directory strategy16:12:26.028\tSuccess: Finished cloning repository files16:12:27.685\tChecking for configuration in a Wrangler configuration file (BETA)16:12:27.68616:12:28.794\tNo wrangler.toml file found. Continuing.16:12:28.794\tNo build command specified. Skipping build step.16:12:28.795\tNote: No functions dir at /functions found. Skipping.16:12:28.795\tValidating asset output directory16:12:31.586\tDeploying your site to Cloudflare&#x27;s global network...16:12:33.708\tUploading... (34/635)16:12:35.115\tUploading... (235/635)16:12:35.117\tUploading... (435/635)16:12:35.394\tUploading... (635/635)16:12:35.394\t✨ Success! Uploaded 601 files (34 already uploaded) (2.00 sec)16:12:35.39416:12:35.827\t✨ Upload complete!16:12:39.096\tSuccess: Assets published!16:12:40.432\tSuccess: Your site was deployed!\n\n3. 注意事项升级了 hexo 之后(之前是 3.x)语法上有点变化，最大就是波浪号( ~ ),如果不带空格，那么即使换行了，也会被认为是删除线。\n3.1 波浪线处理前效果源码：\n我是~第一行我是~第二行\n效果预览：我是第一行我是第二行\n3.2 波浪线处理后效果源码：\n我是 ~ 第一行我是 ~ 第二行\n效果预览：我是 ~ 第一行我是 ~ 第二行\n","categories":["hexo"],"tags":["hexo"]},{"title":"hexo安装过程","url":"/20170120-hexo%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/","content":"准备工作\nNode.js：点击下载\ngit：点击下载\nMarkdownPad：点击下载\n\n安装好上面三个工具可能会遇到的问题：\n**1、**Git Bash执行node -v提示无效 或者 npm install 报 command not found\n解决办法：在环境变量 - 用户变量中 - 新建用户变量 - 添加nodejs安装路径\n如：C:\\tool\\nodejs\n**2、**ERROR Deployer not found : github\n解决办法：\n\n配置文件有问题，冒号后面都有一个空格的\n执行：npm install hexo-deployer-git –save （这命令是为了解决hexo新版本的部署问题）\n\n3使用淘宝镜像加快安装速度安装cnpm，使用命令：\nnpm install cnpm -g --registry=https://registry.npm.taobao.org\n\n安装过程\n打开Git Bash\n进入nodejs安装目录\n开始安装hexo，输入下面代码\nnpm install -g hexo#等待安装完成，这个过程可能会快也可能很慢，耐心等待\nmkdir blog &amp;&amp; cd blog #上面这个代码是创建一个博客存放的目录\nhexo init#初始化\ncnpm install #安装依赖包\n完成之后，本地博客就搭建完成\nhexo g #生成静态页面\nhexo s #启动服务器，打开http://localhost:4000 就是本地博客\n\n本地博客安装完成，下面介绍发布到github上\n\n登陆github，没有就注册\n点击右上角加号+\nCreate a new repository\n名字写：yourgithubname.github.io\n创建完成\n点击Setting\n选择一个主题，然后就好了\n编辑blog文件夹里面的_config.yml配置文件\n最后面添加\n\ndeploy:  type: git  repository: http://github.com/yourname/yourname.github.io.git  branch: master\n\n最后执行\n\nhexo g#重新生成静态博客\nhexo d#将本地静态博客部署到github\n\n现在你在浏览器打开：http://yourname.github.io就可以访问你的博客了到此为止就搭建完了一个博客\n开始写第一篇文章：执行：hexo new “你的文章标题”然后你在blog/source/_posts文件夹下面有文件，用markdownpad打开编辑执行：\n\nhexo g#重新生成\nhexo s#本地查看效果\nhexo d#上传到github\n或者不预览，直接一步上传到github：hexo d -g\n\n","tags":["hexo","github"]},{"title":"hexo百度抓取失败解决办法","url":"/20170216-hexo%E7%99%BE%E5%BA%A6%E6%8A%93%E5%8F%96%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"上一篇帖子说明了一下百度抓取不到的原因是因为github把百度爬虫给屏蔽了\n这里给出的解决办法是用hexo自动提交插件\n需要获取一个自动提交的token\n\n注册百度站长工具：http://zhanzhang.baidu.com\n添加你的hexo域名\n找到网页抓取 - 链接提交 - 下拉选择你的hexo站点\n数据提交方式 - 自动提交 - 主动推送(实时)\n推送接口\n接口调用地址： http://data.zz.baidu.com/urls?site=hisen.me&amp;token=XmxXyESxyz1hANxE\n复制上面token&#x3D;后面的内容，那就是你的token\n\n安装自动提交插件：\n\n\nnpm install hexo-baidu-url-submit –save\n编辑站点配置文件_config.yml，添加一下内容\n\nbaidu_url_submit:  count: 1 ## 提交最新的一个链接  host: www.hui-wang.info ## 在百度站长平台中注册的域名  token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里\n加入新的deployer: 原来type前面是没有 - 的\n但是不这样处理执行hexo g 会报错\ndeploy:- type: git  repository: yoururl  branch: master- type: baidu_url_submitter\n生成效果如下：\n$ hexo gINFO  Start processingINFO  Generating Baidu urls for last 1 postsINFO  Posts urls generated in baidu_urls.txthttp://hisen.me/20170216-hexo百度抓取失败解决办法/INFO  Files loaded in 1.31 s$ hexo dINFO  Deploy done: gitINFO  Deploying: baidu_url_submitterINFO  Submitting urlshttp://hisen.me/20170216-hexo百度抓取失败解决办法/&#123;&quot;remain&quot;:1,&quot;success&quot;:1&#125;INFO  Deploy done: baidu_url_submitter\n\n感谢插件作者：王辉的博客\n","categories":["软件"],"tags":["hexo"]},{"title":"我是怎样爱上阅读的","url":"/20200201-how-i-fell-in-love-with-reading/","content":"零、概览2015 年刚毕业的我懵懵懂懂看书都想睡觉很开心来到北京遇到了许多美好的人和事受到环境的影响一路走来成长加速收获颇丰\n从 2016 开始慢慢喜欢上了阅读从开始看书就想睡觉到现在一个6层书架都放不下的纸质书从开始的『kindle voyage』到现在的『kindle oasis』第三代从开始的只是在北京地铁5号线看下电子书到现在有点时间就看慢慢地养成了阅读的习惯，生活也没有那么无聊，工作慢慢步入正轨非技术书籍喜欢用 kindle 看，技术书还是纸书比较合适翻阅\n简单统计2020 51本2019 71本2018 38本2017 48本(2017以及之前)\n一、常见问题Q:看书想睡觉怎么办？A:先找有兴趣&#x2F;好奇的主题\n\nQ:看书记不住怎么办？A:能不能记住无所谓，看的过程中有思考即可，好的书多看几遍\nQ:哪来这么多时间？A:合理安排时间，少浪费时间即可(通勤+早晚+中午，最少有3个小时时间)\n二、为什么要阅读读书使人充实，读史使人明智，读诗使人灵秀，数学使人周密，科学使人深刻，伦理使人庄重，逻辑修辞学使人善辩\n古人说开卷有益(无营养的除外)通过阅读我们可以了解他人的经历在他人的经历中我们可以得到经验在他人的经验当中我们可以得到思想一个人毕竟阅历有限，站在巨人的肩膀上你可以看的更高\n科普性的书很多时候会恍然大悟技术性的书能获得很多优秀的设计和实践以及学习新的技能人文历史地里这些基本上是扩展知识面、提高个人综合素养、探索人生存在的意义\n三、怎么开始阅读从 我的书单 当中可以看出刚开始的时候基本上都是兴趣导向俗话说兴趣是最好的老师，有些好书恨不得立马就看完，接触很多人说看书就想睡觉，其实那不是我们的错，是书没有写好，换一本就好了，如果还是不行，那就继续换。\n当找到感兴趣的主题，看了一段时间之后会发现阅读速度会有所提升，也会有很强的满足感毕竟看的过程中总会有所收获，有所思考\n兴趣是最好的老师，但是兴趣不能当饭吃这个时候应该开始找一些通俗易懂的技术书，而不是那些很难啃的枕头还是以有趣，通俗易懂为主坚持一段时间，技术上也会有所收获慢慢的就可以驰骋技术书籍的战场了如果有时候发现看不下去了那么就切换其它类型的书籍(我一般都是一本技术一本非技术)\n建议看看《如何阅读一本书》\n四、怎么沉迷于阅读当通过阅读，名利双收的时候，我想没有几个人会不沉迷于阅读想做到名利双收，需要养成好的习惯，挑选好的书籍建议看看相关领域大佬分享的书单，或者直接咨询书籍看多了实践也得跟上有条件可以合志同道合的人一起看同一本书，看的时候多交流探讨，会有意想不到的效果\n五、去哪儿找书单\n我的书单\n去问身边比自己强的人\n查看业界大佬的书单(比如他们的博客&#x2F;世界读书日分享等)\n电子商务网站是看相关领域的排行榜\nGitHub 上各种学习类型的仓库之推荐书籍\n\n六、小结贫穷的本质是认知的差异阅读、反馈、实践慢慢迭代认知有长远的目标，不负韶华，坚持学习，努力提高\n","categories":["成长"],"tags":["read"]},{"title":"如何做一个让人讨厌的产品经理 - 《人人都是产品经理 2.0》读后感","url":"/20210130-how-to-be-a-disgusting-product-manager/","content":"零、背景本文灵感来自《人人都是产品经理 2.0》位置：7.4.2 如何做一个让 Ta 们讨厌的人\n作为一个研发，工作过程中如果能及时发现如下场景，及时给对方负反馈，否则受伤的是整个团队。看了这本书之后，感觉对产品有新的认知，知道他们在做什么，怎么做，后续可以更好的与他们沟通。而且里面的内容对于研发来讲也是适用的。\n一、开始实施之前1.1 不说清需求价值技术问”为什么要做”时：1、时支支吾吾2、这是老板(XXX)要的，假装自己是个传话筒3、我接的是二手需求，什么都不知道随说：其实正确的做法是追溯这个需求的初衷，有利于评估 ROI (投入产出比)，以及排优先级，以及增进对业务的理解。\n1.2 不去想细节功能\n技术问细节(业务细节，非技术细节)时：1、装作自己完全没有想过2、那就这样做3、肯能那样做也可以4、要不你来定吧随说：这些表现其实都是不负责的！没有明确的需要，后期容易扯皮，也可能做出来的东西有问题。\n1.3 帮技术评估工作量1、这不是很简单嘛，就改个 XXX，几行代码就搞定2、这些我都评估过了，都能做3、不要偷懒，不要忽悠我，我抖动随说：评估真是个高难度的活，往往只见树木不见森林\n1.4 逼着技术团队承诺1、任何时候只知道公事公办，技术承诺了却做不到，自己就没有责任了。随说：互联网企业更多的只是一个”预测”，而非”承诺”，因为变化太快，承诺是技术对产品的责任，而预测是产研一起担责。\n二、实施过程中2.1 做了一半改需求1、经常在某个迭代周期内做”非受迫的需求变更”，这招杀伤力很大，技术同学一般受不了。随说：非受迫，意味着是产品没有想清楚，然后导致研发无谓劳动。万万不可取。\n2.2 开发过程中消失1、可以想各种办法隔绝与研发的联系。随说：一般都需要多次沟通，反复确认细节。\n2.3 过度关注细节1、帮技术确定各种技术方案，这个应该这样实现…随说：这种一般少见，研发转岗产品的多一些\n三、产品发布之后3.1 没有发布后的反馈1、发布之后，犹如石沉大海，不告诉大家任何结果，甚至庆功宴都不叫 Ta 们，紧接着继续安排他们干活。随说：技术人员也需要从市场、用户那里获得反馈，从而对自己做的事情产生价值感和成就感。\n3.2 任务无节奏感1、让研发一阵忙一阵闲，发布之后再开始研究接下来做什么。2、一会儿让研发有着天天通宵的高强度，给 deadline，下死命令，做完之后不知道做什么。随说：保持合理的安排，让研发有个合理的预期比较好。而不是等你们上了大学就自由了这种…\n四、全程适用4.1 优柔挂断1、你定吧，你说往哪儿走我们照办2、啊…那个…方案各有利弊，我也不知道怎么办，你们有什么好想法随说：自己左手和右手互搏，思考清楚之后给大家一个明确的结果。\n4.2 报喜不报忧1、藏着噎着一些坏消息，eg:老板正考虑干掉这个项目等，大家只能通过小道消息得知随说：这样很破坏信任感\n4.3 不把 Ta 们当人看1、只关注结果，不关注人的成长，永远把合作伙伴当”资源”随说：结果导向没有问题，但是没有成长，留不住人。\n","categories":["随说"],"tags":["随说"]},{"title":"英语文档：how-to-manage-a-redis-database.pdf","url":"/20201010-how-to-manage-a-redis-database/","content":"当初这个文档应该是在『科技爱好者周刊』上还是哪里发现的看这个文档本来的目的是每天坚持阅读英文文档技术文档一般都比较简洁易懂，英语是一个长期的过程，还得继续坚持阅读~\n看的过程中发现，结合一定的场景，和示例和官方文档相比，没有那么枯燥，也更好理解甚至有一些之前未曾关注的用法让我感到惊艳\n所以推荐一下\n下载地址：how-to-manage-a-redis-database.pdf\n","categories":["database"],"tags":["redis","database"]},{"title":"怎么移除TVOC(甲醛等)","url":"/20240303-how-to-remove-TOVC/","content":"1. 什么是 TVOCTVOC 是“Total Volatile Organic Compounds”的英文缩写，意思是总挥发性有机化合物。包含：苯类、烷类、芳烃类、烯类、卤烃类、酯类、醛类、酮类和其他。\n2. 装修怎么快速去除甲醛？答案是没法快速去除，否则就没有 ENF、E0 这些等级之分了。\n市面上比较流行的方法\n\n绿萝等绿植( 12㎡ 60盆才有效果..)\n闷放通风\n加热加湿闷放通风\n持续通风\n\n1 和 4 的可能比较少，各种网络信息，比较推崇的是『闷放法』实际上比较有用的是：持续通风+风扇吹家具(加快客气流动)数据：连续通风法，通风两天，板材累计释放甲醛质量为485mg，是加热加湿闷放法、闷放法的10倍之多。数据说明：不一定准确，但是有数据有对比，比较可信。详情看下面数据来源\n\n数据来源：https://www.zhihu.com/question/629126368/answer/3278933264\n3. 小插曲最后写一个插曲今天家里领导说要使用加热加湿闷放法，从原理上出发，我觉得没什么依据：\n\n\n密闭空间，到了一定浓度，不利于板材”散味”，而且散的不一定有开窗通风快\n\n\n\n密闭一段时间进去，浓度太高，吸入对身体不好\n\n\n\n家庭条件很难达到所谓的”高温高湿”\n\n\n\n探讨下来，领导给出的理由是\n\n网上都这么说，但是给出某红书的链接，就纯靠嘴说，没有任何数据。\n她同事装修过，也是这么处理的。\n\n这么看来自媒体火不是没有道理的，会独立思考的太少。人云亦云的人太多。\n","categories":["生活"],"tags":["生活"]},{"title":"html - 原生javascript动态显示当前时间和日期","url":"/20170412-html%20-%20%E5%8E%9F%E7%94%9Fjavascript%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F/","content":"显示当前时间：\n2017年04月12日 18:26:37 星期三\n示例如下：\n\n&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;显示当前时间 - 原生javascript&lt;/title&gt;&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;    function show_cur_times()&#123;    //获取当前日期    var date_time = new Date();    //定义星期    var week;    //switch判断    switch (date_time.getDay())&#123;    case 1: week=&quot;星期一&quot;; break;    case 2: week=&quot;星期二&quot;; break;    case 3: week=&quot;星期三&quot;; break;    case 4: week=&quot;星期四&quot;; break;    case 5: week=&quot;星期五&quot;; break;    case 6: week=&quot;星期六&quot;; break;    default:week=&quot;星期天&quot;; break;    &#125;    //年    var year = date_time.getFullYear();     \t//判断小于10，前面补0    if(year&lt;10)&#123;     \tyear=&quot;0&quot;+year;    &#125;    //月    var month = date_time.getMonth()+1;     \t//判断小于10，前面补0    if(month&lt;10)&#123;    month=&quot;0&quot;+month;    &#125;    //日    var day = date_time.getDate();     \t//判断小于10，前面补0    if(day&lt;10)&#123;     \tday=&quot;0&quot;+day;    &#125;    //时    var hours =date_time.getHours();     \t//判断小于10，前面补0    if(hours&lt;10)&#123;     \thours=&quot;0&quot;+hours;    &#125;    //分    var minutes =date_time.getMinutes();     \t//判断小于10，前面补0    if(minutes&lt;10)&#123;     \tminutes=&quot;0&quot;+minutes;    &#125;    //秒    var seconds=date_time.getSeconds();     \t//判断小于10，前面补0    if(seconds&lt;10)&#123;     \tseconds=&quot;0&quot;+seconds;    &#125;    //拼接年月日时分秒    var date_str = year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日 &quot;+hours+&quot;:&quot;+minutes+&quot;:&quot;+seconds+&quot; &quot;+week;    //显示在id为showtimes的容器里    document.getElementById(&quot;showtimes&quot;).innerHTML= date_str;    &#125;    //设置1秒调用一次show_cur_times函数    setInterval(&quot;show_cur_times()&quot;,100);    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;显示当前时间：&lt;p id=&quot;showtimes&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"},{"title":"iTerm2自动连接远程服务器","url":"/20180720-iTerm2%E8%87%AA%E5%8A%A8%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"mac自带的终端总感觉不大好用，于是乎就被安利了iTerm2\n然后就搜了下自动连接远程服务，于是就发现了一个不错的脚步\n整个设置过程还是比较顺畅，\n操作步骤：\n\n新建一个sh文件\n\nvi auto_ssh.sh\n\n输入如下内容，[lindex $argv 0] 这个为第一个参数的占位符\n\n#!/usr/bin/expectset timeout 30spawn ssh -p[lindex $argv 0] [lindex $argv 1]@[lindex $argv 2]expect &#123;&quot;(yes/no)?&quot;&#123;send &quot;yes\\n&quot;;exp_continue&#125;&quot;password:&quot;&#123;send &quot;[lindex $argv 3]\\n&quot;&#125;&#125;interact\n\n复制脚本到bin下并且赋予执行权限\n\nsudo cp auto_ssh.sh /usr/local/bin/cd /usr/local/bin/sudo chmod +x auto_ssh.sh\n\n设置在iTerm2中Command+o呼出profile\n\n# 界面右下角，点击：edit profiles# 界面左下角，点击：+# 界面上方，点击：General# 界面靠上，写这个登录的名字：name# 界面中间，点击选择：Login shell# 找到这个提示符：Send text at start，输入如下字符auto_ssh.sh 8022 root 10.10.20.20 hisenyuan# 脚本名称   端口  用户名  ip地址       密码\n\n\n运行 设置完了之后，关闭窗口，重新command+o呼出配置文件，双击刚刚配置的即可自动登录\n\n","categories":["linux"]},{"title":"IDEA failed to create jvm:error code -1","url":"/20170303-idea%20failed%20to%20create%20jvm%20error%20code%20-1/","content":"今天先更改了 idea64.exe.vmoptions 这个配置文件\n一直么有重启，后来就安装了个插件重启一下，结果就泪崩了\n一直出现这个错误总以为是环境变量配置的问题，或者是文件损坏了什么\n重启，重装jdk，重新配置什么都试过，不管用。\n后来替换了配置文件就好了！！！\n解决方案配置文件路径：\n\\IDEA HOME\\bin\\idea64.exe.vmoptions或者\\IDEA HOME\\bin\\idea.exe.vmoptions\n默认配置文件内容如下：\n32bit\n-server-Xms128m-Xmx512m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow\n64bit\n-Xms128m-Xmx750m-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow\n\nby the way:\nIDEA 写博客真是舒服啊~\n完全不用切换来切换去的！\n","categories":["java"],"tags":["java"]},{"title":"hexo新建文章时候默认带上categories，tags","url":"/20170209-hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%97%B6%E5%80%99%E9%BB%98%E8%AE%A4%E5%B8%A6%E4%B8%8Acategories%EF%BC%8Ctags/","content":"在博客的 scaffolds 文件夹里有个post.md 添加上需要的配置就行\n这里是创建post的模板。\n我的默认设置成这样：\n---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: []categories:---\ntags: [关键词1,关键词2]\n","categories":["hexo"],"tags":["hexo"]},{"title":"idea jrebel 7.0 破解 - 获取JRebel激活码","url":"/20170303-idea%20jrebel%207.0%20%E7%A0%B4%E8%A7%A3%20-%20%E8%8E%B7%E5%8F%96JRebel%E6%BF%80%E6%B4%BB%E7%A0%81/","content":"其实这玩意完全不要破解，直接官网注册就会给一个注册码\n注册地址：https://zeroturnaround.com\n注册完了之后在IDEA里面去设置，会提醒激活。\ntomcat部署了项目之后，点击JR启动是可以热部署的！！！\n改了java代码都不要重新启动项目，哈哈！！！\n","categories":["java"],"tags":["java","idea"]},{"title":"idea启动tomcat服务失败 SEVERE [RMI TCP Connection(3)-127.0.0.1]","url":"/20170215-idea%E5%90%AF%E5%8A%A8tomcat%E6%9C%8D%E5%8A%A1%E5%A4%B1%E8%B4%A5-SEVERE-RMI-TCP-Connection-3-127-0-0-1/","content":"工程是从eclipse生成的，用idea开发。\n重复了一遍以往正常的不能再正常了的导入配置，结果遇到了如下问题：\nSEVERE [RMI TCP Connection(3)-127.0.0.1] \n15-Feb-2017 11:05:25.993 严重 [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.listenerStart Skipped installing application listeners due to previous error(s)\n\n删除导入项目中的web.xml文件因为idea要用的东西自己会自动生成\n然后就搞定了这个纠结我一天的问题\n我是百度搜索这个错误：RMI TCP Connection(3)-127.0.0.1\n得到的答案，感谢10100：查看原文\n","categories":["java"],"tags":["idea","tomcat"]},{"title":"Java受检异常和非受检异常 - uncheckedException checkedException","url":"/20190429-java%20-%20%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8%E5%92%8C%E9%9D%9E%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8%20-%20uncheckedException%20checkedException/","content":"一、简单介绍除了runtimeException以外的异常，都属于checkedException。\nCheckedException(受检异常)：编译器会检查这类异常，需要强制捕获，否则无法编译通过。UnCheckedException(非受检异常)：编译器不会检查这类异常，可以不用捕获，可以编译通过。\n二、常见异常受检：IOException、SQLException、NumberFormatException、IllegalArgumentException非受检：OutOfMemoryError、StackOverflowError、NullPointerException、IndexOutOfBoundsException\n点击查看所有jdk8 api文档进去可以看到java.lang.RuntimeException下有很多子类异常\n暂时写这些，日后再完善\n","categories":["java"],"tags":["java","异常"]},{"title":"水族入门","url":"/20220612-introduction-to-aquarium/","content":"0. 概览0.1 简介入坑水族几年，和年纪无关…修生养性，培养一个兴趣爱好，毕竟生命在于折腾下班回家，看着鱼儿在水中游，喂喂乌龟，也蛮有趣\n最近几天在折腾过滤，进一步了解了一下过滤系统，也有朋友在问养鱼养龟方面的问题，于是就想着写一篇博客简单的记录一下。\n不懂的多百度，设备什么的购物平台搜搜。有兴趣可以逛逛：南美水族论坛、乌龟吧(百度贴吧)，等水族相关内容。\n0.2 预防针需要有一定的金钱投入，更重要的是精力投入，长期维护。\n0.3 我的水族\n鱼缸\n动物：宝莲灯、孔雀鱼、苹果螺、杀手螺、黑壳虾\n植物：小水兰、珍珠草\n过滤：伊罕滤桶\n灯具：LED 水草灯\n\n\n乌龟缸\n动物：鳄鱼龟(互动性不错)、苹果螺、黑壳虾\n植物：石菖蒲、水竹、紫芋\n过滤：侧滤 + 沼泽 + 滴滤\n灯具：LED 水草灯\n\n\n\n\n1. 动物选择养宠物之前一定要先了解清楚自己喜欢什么，适合什么先了解学习一些经验，不要着急入手\n鳄鱼龟：互动性不错，有点危险，长的很快.宝莲灯：个人比较喜欢的热带灯科鱼，小型的.\n2. 植物选择鱼缸\n\n阴性草\n优点：简单好养，不需要水草灯、二氧化氮设备\n缺点：不太好看\n\n\n阳性草\n优点：好看\n缺点：需要一定的养护技巧，还有相关的设备\n\n\n\n龟缸主要考虑过滤使用选择根系强大的挺水植物\n3. 容器选择选择透明的玻璃容器，观赏性比较好鱼缸\n\n选择 5 面超白长方体鱼缸，尽量避免异形鱼缸\n尺寸(cm 长宽高)：60x45x45、90x45x45、120x45x45、等等常规尺寸\n\n龟缸\n\n和鱼缸类似\n入门也可以考虑乌龟周转箱\n\n4. 过滤选择俗话说，养鱼先养水。要想养好水，就需要过滤器材。\n关于自来水开缸尽量不要用自来水，使用自来水最好是晾晒 2 天，水质稳定之后，换水的时候也可以直接注入少量自来水。\n4.1 建议使用过滤器\n\n上滤：安全、方便，不美观\n底滤：有点麻烦，美观\n侧滤：有点麻烦，不美观\n滤桶：安全，美观，不够强大\n\n尽量增大水体体积尽量增大水与滤材的接触面积(过滤效果好)\n\n装更多的滤材\n使用接触面积更大的滤材\n\n滤材表面积大利于细菌进行生长繁殖，可保持干净稳定的水。滤材选择：表面积越大越好，一般比较贵；便宜的可以以量取胜。\n4.2 背景知识异养细菌，把食物残渣、动物粪便等，转化成无机物，氨气(对动物有害)等。硝化细菌，把氨气转换为硝酸盐(对动物无害)，可以供植物吸收。\n水循环大概过程：『有机物(残渣、粪便)』 一异养细菌一&gt; 『氨(有害)等其它无害物质』 一硝化细菌一&gt; 『硝酸』 一&gt; 『植物吸收』   \n4.2.1 详细解释硝化细菌：属于生产者，包括亚硝酸细菌(将氨氧化成亚硝酸)，硝酸细菌(将亚硝酸氧化成硝酸)，硝化细菌（英语：nitrifying bacteria）是一群好氧的化能自养生物之统称，属于生产者，细菌能通过食用无机氮化合物生长。硝化细菌以二氧化碳为碳源，通过代谢将氨或铵盐氧化成硝酸盐。\n自养生物（英语：autotroph）也称为生产者（producer）指食物链底端可以利用阳光（光合作用）或无机物氧化配以地热能（化能合成）将空气和周边环境中的二氧化碳、水以及无机盐等制造成有机物来提供代谢底物并存储化学能的生物，主要包括绿色植物、海藻和少数微生物（浮游植物）。\n异养生物（英语：heterotroph），也称为消费者( consumer)指不能直接利用无机物或有机物维生，必须摄取现成的养分来维持生存机能的生物。\n5. 参考\n硝化细菌-百度百科\n硝化细菌-维基百科\n自养生物-维基百科\n异养生物-维基百科\n\n","categories":["其它"],"tags":["水族"]},{"title":"homelab - 参考博文","url":"/20231231-homelab-blog-list/","content":"1. 前言折腾的意义在于折腾之后带来的满足，以及过程中的主动学习。个人感觉折腾 HomeLab 最骚的还是 SRE boy &#x3D;&#x3D;\n2. 如何搭建家用 HomeLab 系列\n如何搭建家用 homelab: 先导篇\n如何搭建家用 homelab: 硬件和架构\n如何搭建家用 homelab: Openwrt 软路由\n如何搭建家用 homelab: 数据存储\n\n3. 其它记录\n家庭 Homelab 升级计划: v2\n垃圾佬的 HomeLab 折腾记录\n廉价的家用工作站方案：前篇\n家用工作站方案：ThinkBook 14 2023 版\n\n","categories":["homelab"],"tags":["homelab"]},{"title":"Java 反序列化漏洞","url":"/20200510-java-deserialize-security-hole/","content":"微博目前关注了好几个做安全的大佬不要问我为什么关注问就是想观摩下有钱人的微博！\n其中有一个经常发 Java 相关的内容今天看到一个稍微熟悉一点关于 FastJson 漏洞\n\n窃以为Fastjson入门的最佳篇章非Mi1k7ea这个系列莫属，郑重推荐: Mi1k7ea。共有5篇，从第3篇开始，成体系地由旧到新展示了1.2.25之后各版本的补丁绕过，直至思路惊艳的1.2.47绕过方案及1.2.48的修补方案，相当完备。可以看出此君是动手实践派、整理归纳派，要我说，新学东西时就得这套路，无它。\n\n今天看了这两篇文章，不得不说对 Java 是异常的熟悉。想做好安全，想必要对用的东西了如指掌，知道坑在哪里，怎么填坑。\n\nJava反序列化漏洞\nFastjson系列一 反序列化漏洞基本原理\n\n\n后记：很多时候大部分人都只关注自己工作职责内的那一亩三分地其实很多时候横向观察一下会发现很多靓丽的风景至今没有如此深入的去看过底层甚是愧疚用最多的时间去做最正确的事情！\n","categories":["java"],"tags":["java"]},{"title":"Java HotSpot 虚拟机 CMS、G1 参数优化对比记录","url":"/20201019-java-hotspot-vm-cms-g1-setting-log/","content":"零、背景说明目前测试机器为 4C8G两台机器完全处理一样的工作大部分时间对象朝生夕死，很少进入老年代CMS 指定了新生代最大 1536M，略微有点浪费于是设置 G1 自动调节各个区域大小，看看能否有所改善也因为最近重温了两本 JVM 相关的书籍，找机会进行实践看看\n一、G1 设置-Xms4096M-Xmx4096M-XX:+UseG1GC-XX:+UnlockDiagnosticVMOptions-XX:SurvivorRatio=8-XX:+ParallelRefProcEnabled-XX:MaxTenuringThreshold=6-XX:ParGCCardsPerStrideChunk=4096-XX:MaxGCPauseMillis=100-XX:MaxMetaspaceSize=256M-XX:MetaspaceSize=256M-XX:+PrintGCDateStamps-XX:+PrintGCDetails-Xloggc:/home/hisen/gc.log\n二、CMS 设置\n最大最小设置成一致的值，是为了不让堆大小进行收缩(缩的过程会 GC)\n# 初始堆大小-Xms4096M# 最大堆大小-Xmx4096M# 年轻代的大小-Xmn1536M# eden 区比例，此处为 8:1:1-XX:SurvivorRatio=8# 最大元空间大小-XX:MaxMetaspaceSize=256M# 最小元空间大小-XX:MetaspaceSize=256M# 使用 CMS 垃圾收集器-XX:+UseConcMarkSweepGC# 只使用占用率作为启动 CMS GC 的标准，配合 CMSInitiatingOccupancyFraction 使用-XX:+UseCMSInitiatingOccupancyOnly# CMS垃圾收集器，当老年代达一定比例，触发CMS垃圾回收。此处为 70%-XX:CMSInitiatingOccupancyFraction=70# 默认为 false，并行的处理 Reference 对象，如 WeakReference，除非在 GC log 里出现 Reference 处理时间较长的日志，否则效果不会很明显。-XX:+ParallelRefProcEnabled# 开启或关闭在CMS重新标记阶段之前的 YGC 尝试-XX:+CMSScavengeBeforeRemark# 晋升老年代的阈值-XX:MaxTenuringThreshold=6# 解锁诊断参数，否则 ParGCCardsPerStrideChunk 不生效-XX:+UnlockDiagnosticVMOptions# 每个线程扫描 old gen 的 CardTable (一定大小的内存块) 个数-XX:ParGCCardsPerStrideChunk=4096# 打印 GC 的时间戳-XX:+PrintGCDateStamps# 打印 GC 明细日志-XX:+PrintGCDetails# 存放 GC 日志的路径-Xloggc:/home/hisen/gc.log\n三、结果对比\n\n\nType\nDuration\nXmn\nYGC count\nYGC avg\nInterval Time\n\n\n\nG1\n72 hrs 21 min 8 sec\n1.66G\n7596\n19.6 ms\n34 sec 294 ms\n\n\nCMS\n70 hrs 24 min 51 sec\n1.5G\n7029\n14.4 ms\n36 sec 68 ms\n\n\n目前应用堆响应时间比较敏感，追求低延迟。就上表来看，G1 新生代的大小确实上去了，但并不尽如人意。但是随着而来的是 G1 『更频繁的YGC』以及『更长的停顿时间』在《深入理解JVM虚拟机》第三版看到，由于 G1 处理跨 region 需要耗费额外 10% ~ 20% 的资源，小堆 (堆大小&lt;8G) 上没有优势。\nJVM 新生代大小与老年代大小默认为 1:2，大部分应用按这个设置是 OK 的，虽然有时候看着老年代一直很小，设置那么大浪费内存，但是当调用量大的时候，就能派上用场，减少 Full GC。\n先占个坑，后续继续填内容。\n","categories":["java"],"tags":["java"]},{"title":"java.lang.IllegalArgumentException: addChild:  Child name '/hisen' is not unique","url":"/20170227-java-lang-IllegalArgumentException-addChild-Child-name-hisen-is-not-unique/","content":"报错如下：\n27-Feb-2017 12:53:31.268 严重 [RMI TCP Connection(13)-127.0.0.1] org.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method manageApp java.lang.IllegalArgumentException: addChild:  Child name &#x27;/hisen&#x27; is not unique\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:738)\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728)\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)\tat org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1702)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:482)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:431)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1420)\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)\tat sun.rmi.transport.Transport$1.run(Transport.java:177)\tat sun.rmi.transport.Transport$1.run(Transport.java:174)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.Transport.serviceCall(Transport.java:173)\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:556)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:811)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:670)\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\tat java.lang.Thread.run(Thread.java:744)\n重要的是：\norg.apache.tomcat.util.modeler.BaseModelMBean.invoke Exception invoking method manageApp java.lang.IllegalArgumentException: addChild:  Child name &#x27;/hisen&#x27; is not unique\nIDEA解决办法Project Structure -&gt; Artifacts\n查看里面是否有配置相同的Artifacts\n删除即可\n"},{"title":"java.lang.NoClassDefFoundError错误解决","url":"/20190223-java.lang.NoClassDefFoundError%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/","content":"maven项目昨天遇到的一个错误：java.lang.NoClassDefFoundError\n理论原因：JVM在编译的时候能找到调用方法或静态变量所在的类，但在运行的时候找不到此类而引发的错误。\n真实原因：(仅针对当前问题)项目A依赖公共服务C-1.0.1版本项目B依赖项目A，B中dependencyManagement强制指定C-1.0.0\n此时编译可以通过，运行时如果有用的C的新版本功能就会会出现上述问题\n解决办法：对项目B中C的版本升级，使用1.0.1\n扩展阅读：https://blog.csdn.net/qq_27576335/article/details/77102385https://blog.csdn.net/jamesjxin/article/details/46606307\n","categories":["java"],"tags":["java"]},{"title":"java.sql.SQLException Connections could not be acquired from the underlying database","url":"/20170602-java.sql.SQLException%20Connections%20could%20not%20be%20acquired%20from%20the%20underlying%20database/","content":"java.sql.SQLException: Connections could not be acquired from the underlying database\n这个错误出现的原因有的说是因为jdbc配置文件写错了\n正确的写法是：\nc3p0.driverClass=com.mysql.jdbc.Driverc3p0.jdbcUrl=jdbc:mysql://localhost:3306/testc3p0.user=rootc3p0.password=root\n而不是\ndriver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/testuser=rootpassword=root\n\n但是我遇到的不是如此\n后来发现是因为maven出问题了，jar包没有加载进项目\n这是在starkoverflow上看到的回答\nIn my case it was problem that c3p0-0.9.2.1.jar file was not copied by maven into src/main/webapp/web-inf/libs\n最后maven重新install之后就解决了\n","categories":["java"],"tags":["java"]},{"title":"java多姿势读写文件","url":"/20180718-java%E5%A4%9A%E5%A7%BF%E5%8A%BF%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/","content":"重温经典，特意看了下为什么读文件非得不让等于 -1\nfileChannelIn.read(byteBuffer) !&#x3D; -1\nEOF &#x3D; End Of File，其默认值就是-1\n这是一个约定好的结束符，不是认为改变的\n代码建议使用大文件进行测试，看效果比较明显\n@Testpublic void testCopy() &#123;    String oldFileName = &quot;/Users/hisenyuan/hisen/blog/source/_posts/Test-Java-Code.md&quot;;    String newFileName = &quot;/Users/hisenyuan/hisen/test/Test-Java-Code.md&quot;;    nioCopy(oldFileName, newFileName);    ioCopy(oldFileName, newFileName.replace(&quot;.md&quot;, &quot;.md.bak&quot;));    ioCopyByLine(oldFileName,newFileName.replace(&quot;.md&quot;,&quot;.bak.&quot; + System.currentTimeMillis()));&#125;/** * 利用NIO进行读写文件 * * @param oldFileName 原文件的路径 * @param newFileName 新文件的路径 */public static void nioCopy(String oldFileName, String newFileName) &#123;    try &#123;        FileChannel fileChannelIn = new FileInputStream(new File(oldFileName)).getChannel();        FileChannel fileChannelOut = new FileOutputStream(new File(newFileName)).getChannel();        //获取文件大小        long size = fileChannelIn.size();        System.out.printf(&quot;文件大小为：%s byte \\n&quot;, size);        //缓冲        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);        long start = System.currentTimeMillis();        while (fileChannelIn.read(byteBuffer) != -1) &#123;            //准备写            byteBuffer.flip();            fileChannelOut.write(byteBuffer);            //准备读            byteBuffer.clear();        &#125;        long end = System.currentTimeMillis();        System.out.printf(&quot;NIO方式复制完成，耗时 %s 秒\\n&quot;, (end - start) / 1000);        //关闭        fileChannelIn.close();        fileChannelOut.close();    &#125; catch (FileNotFoundException e) &#123;        e.printStackTrace();    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;/** * IO方式复制文件 * * @param oldFileName * @param newFileName */public static void ioCopy(String oldFileName, String newFileName) &#123;    try &#123;        FileInputStream fileInputStream = new FileInputStream(new File(oldFileName));        FileOutputStream fileOutputStream = new FileOutputStream(new File(newFileName));        long length = new File(oldFileName).length();        System.out.printf(&quot;文件大小为：%s byte \\n&quot;, length);        byte[] buffer = new byte[1024];        long start = System.currentTimeMillis();        int len = 0;        //EOF = End Of File，其默认值就是-1        while ((len = fileInputStream.read(buffer)) != -1) &#123;            fileOutputStream.write(buffer, 0, len);        &#125;        long end = System.currentTimeMillis();        System.out.printf(&quot;IO方式复制完成，耗时 %s 秒\\n&quot;, (end - start) / 1000);    &#125; catch (FileNotFoundException e) &#123;        e.printStackTrace();    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;public static void ioCopyByLine(String oldFileName, String newFileName) &#123;    try &#123;        BufferedReader reader = new BufferedReader(new FileReader(oldFileName));        BufferedWriter writer = new BufferedWriter(new FileWriter(newFileName));        String line;        while ((line = reader.readLine()) != null) &#123;            writer.write(line);            writer.newLine();            writer.flush();        &#125;    &#125; catch (IOException e) &#123;        System.out.println(&quot;error:&quot; + e);    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"java编译错误：程序包javax.servlet不存在javax.servlet.*","url":"/20170217-java%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85javax-servlet%E4%B8%8D%E5%AD%98%E5%9C%A8javax-servlet/","content":"之前用myeclipse开发的项目\n今天导入到IDEA中去，发现编译出问题\nava编译错误：程序包javax.servlet不存在javax.servlet.*\n\n原因大概是myeclipse中可以选择Java EE项目\n而idea没有，缺少 servlet-api.jar 这个jar包\n\n解决办法：\n\n复制tomcat文件夹下lib—&gt;servlet-api.jar 这个jar包\n添加到IDEA项目中去：粘贴到External Library目录下\n\n即可\n","categories":["java"],"tags":["java"]},{"title":"JVM系列-MetaSpace(元空间)","url":"/20210430-jvm-series-metaspace/","content":"一、结论JDK8 因未指定 MetaSpace 大小，程序启动过程中元空间不够用，触发 full gc。\n详细如下：JDK8 因未指定 MetaSpace 大小，默认初始大小约 21M程序启动，元空间大小占用稳定在 90M因为超过了默认元空间大小，导致元空间扩容(每次扩容会 full gc)从 GC 日志来看，每次元空间扩容都是增加 20M 左右，所以程序启动时 full gc 4 次\n二、问题应用启动时出现 full gc;\ngc日志重点：GC (Metadata GC Threshold) [PSYoungGen: 354024K-&gt;15340K(1376256K)\n三、排查过程\n启动过程中，出现了 JVM Full GC 告警。由于启动过程中之前没有遇到这种情况，找不到其它原因。于是修改 JVM 参数，增加 GC 日志，于是就看到了『二』中的内容。\n看原因是元空间内存不够大导致的通过 GC 日志可以看到元空间实际占用大小，100M于是调整 JVM 元空间大小至 128M，问题解决。\n问题是解决了，但是原因是什么呢？在结论部分已经讲了，这里不重复。\n所谓知其然，更要知其所以然。只有这样才能明白问题的本质，学到知识。\n四、背景知识Metaspace整体介绍\n","categories":["java"],"tags":["java","jvm"]},{"title":"Java JVM 工具与知识 | JVM 调优","url":"/20211009-jvm-tool-and-knowledge/","content":"一、背景曾经整理过一个帖子，不过是在公司内网。今天突然想起，博客上零散的 jvm 相关内容，但未系统整理相关知识和工具，遂写一篇文章。\n学习的过程需要不断发现好的资源，深入钻研某个领域。\n二、知识2.1 图书\n《深入理解 Java 虚拟机》\n《Java 性能优化权威指南》\n《性能之巅》\n\n2.2 文档\nJava Language and Virtual Machine Specifications\n\n2.3 文章\n\n【译】深入理解G1的GC日志（一）\n从实际案例聊聊Java应用的GC优化\nJVM CPU Profiler技术原理及源码深度解析\nJava Hotspot G1 GC的一些关键技术\nJava中9种常见的CMS GC问题分析与解决\n新一代垃圾回收器ZGC的探索与实践\nJava Hotspot G1 GC的一些关键技术\n\n三、工具\nJVM参数优化(创业者来自阿里性能团队)\ngc日志在线分析\nJava Thread Dump Analyzer\nJava &amp; Android Heap Dump Analyzer\n\n","categories":["java"],"tags":["java","jvm"]},{"title":"linux cal date命令详解","url":"/20170314-linux%20cal%20date%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/","content":"##显示当月的日历hisen@ubuntu:~$ cal     March 2017       Su Mo Tu We Th Fr Sa            1  2  3  4   5  6  7  8  9 10 11  12 13 14 15 16 17 18  19 20 21 22 23 24 25  26 27 28 29 30 31     ##指定显示1997年11月当月的日历hisen@ubuntu:~$ cal 11 1997   November 1997      Su Mo Tu We Th Fr Sa                     1   2  3  4  5  6  7  8   9 10 11 12 13 14 15  16 17 18 19 20 21 22  23 24 25 26 27 28 29  30   ##显示2018年全年12个月的日历hisen@ubuntu:~$ cal -m 12 -y 2018                            2018      January               February               March          Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa      1  2  3  4  5  6               1  2  3               1  2  3   7  8  9 10 11 12 13   4  5  6  7  8  9 10   4  5  6  7  8  9 10  14 15 16 17 18 19 20  11 12 13 14 15 16 17  11 12 13 14 15 16 17  21 22 23 24 25 26 27  18 19 20 21 22 23 24  18 19 20 21 22 23 24  28 29 30 31           25 26 27 28           25 26 27 28 29 30 31                                                                           April                  May                   June          Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa   1  2  3  4  5  6  7         1  2  3  4  5                  1  2   8  9 10 11 12 13 14   6  7  8  9 10 11 12   3  4  5  6  7  8  9  15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16  22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23  29 30                 27 28 29 30 31        24 25 26 27 28 29 30                                                                            July                 August              September        Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa   1  2  3  4  5  6  7            1  2  3  4                     1   8  9 10 11 12 13 14   5  6  7  8  9 10 11   2  3  4  5  6  7  8  15 16 17 18 19 20 21  12 13 14 15 16 17 18   9 10 11 12 13 14 15  22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22  29 30 31              26 27 28 29 30 31     23 24 25 26 27 28 29                                              30                          October               November              December        Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa      1  2  3  4  5  6               1  2  3                     1   7  8  9 10 11 12 13   4  5  6  7  8  9 10   2  3  4  5  6  7  8  14 15 16 17 18 19 20  11 12 13 14 15 16 17   9 10 11 12 13 14 15  21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22  28 29 30 31           25 26 27 28 29 30     23 24 25 26 27 28 29                                              30 31                 ##输出当前日期hisen@ubuntu:~$ dateTue Mar 14 11:48:14 CST 2017##格式化输出年月日hisen@ubuntu:~$ date &quot;+%Y-%m-%d&quot;2017-03-14##格式化输出当前时间hisen@ubuntu:~$ date &quot;+%H:%M:%S&quot;11:49:10##格式化输出年月日时间hisen@ubuntu:~$ date &quot;+%Y-%m-%d %H:%M:%S&quot; 2017-03-14 11:49:18","categories":["linux"],"tags":["linux"]},{"title":"log4j:WARN No appenders could be found for logger","url":"/20170208-log4j-WARN-No-appenders-could-be-found-for-logger/","content":"解决办法为：在项目的src下面新建file名为log4j.properties文件\n###设置log4j.rootLogger = debug,stdout,D,E###输出信息到控制抬log4j.appender.stdout = org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target = System.outlog4j.appender.stdout.layout = org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n###输出DEBUG 级别以上的日志到=E://logs/error.loglog4j.appender.D = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.File = E://logs/log.loglog4j.appender.D.Append = truelog4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n###输出ERROR 级别以上的日志到=E://logs/error.loglog4j.appender.E = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.File =E://logs/error.log log4j.appender.E.Append = truelog4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n\nlog4j详细使用方法:点击查看\n","tags":["java","log4j"]},{"title":"log4j日志信息插入mysql数据库","url":"/20170321-log4j%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF%E6%8F%92%E5%85%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"以前不知道这玩意还能直接插入MySQL数据库\n我是使用IDEA，maven\n具体的目录结果见github：github\nlog4j配置文件\n#可以设置级别：debug&gt;info&gt;error#debug：显示debug、info、error#info：显示info、error#error：只errorlog4j.rootLogger=debug,info,database#注意的地方database 对应 log4j.appender.database.URL的database 若认log4j.rootLogger=debug,info,db 那么 log4j.appender.database.URL的database 要改成db#log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender#log4j.appender.logfile.DatePattern=.yyyy-MM-dd#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout#输出到控制台#log4j.appender.appender1=org.apache.log4j.ConsoleAppender#样式为TTCCLayout#log4j.appender.appender1.layout=org.apache.log4j.TTCCLayout#设置级别：#log4j.rootLogger=debug,appender1#输出到文件(这里默认为追加方式)#log4j.appender.appender1=org.apache.log4j.FileAppender#设置文件输出路径#【1】文本文件#log4j.appender.appender1.File=c:/Log4JDemo02.log#【2】HTML文件log4j.appender.appender1.File=c:/Log4JDemo02.html   #设置文件输出样式#log4j.appender.appender1.layout=org.apache.log4j.TTCCLayoutlog4j.appender.appender1.layout=org.apache.log4j.HTMLLayout  log4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %p [%c] - - &lt;%m&gt;%nlog4j.appender.logfile=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.logfile.DatePattern=.yyyy-MM-ddlog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] wang- &lt;%m&gt;%n#下面是配置将日志信息插入数据库，#配置输出目标为数据库（假如要将日志在控制台输出，配置为log4j.appender. stdout =org.apache.log4j.ConsoleAppender；将日志写入文件，配置为log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender#这样的配置在许多地方都要有，需要可查有关资料）,当然你也可以自己扩展org.apache.log4j.jdbc.JDBCAppender这个类，只需要在这里配置就可以了例如我们配置我自己扩展的MyJDBCAppender，配置为#log4j.appender.db=com.neam.commons.MyJDBCAppenderlog4j.appender.database.Threshold=info#定义什么级别的错误将写入到数据库中log4j.appender.database.BufferSize=1#设置缓存大小，就是当有1条日志信息是才往数据库插一次log4j.appender.database=org.apache.log4j.jdbc.JDBCAppenderlog4j.appender.database.driver=com.mysql.jdbc.Driver#设置要将日志插入到数据库的驱动log4j.appender.database.URL=jdbc:mysql://127.0.0.1:3306/log4j?useUnicode=true&amp;characterEncoding=UTF-8log4j.appender.database.user=rootlog4j.appender.database.password=hisenlog4j.appender.database.sql=insert into log (Class,Mothod,createTime,LogLevel,MSG) values (&#x27;%C&#x27;,&#x27;%M&#x27;,&#x27;%d&#123;yyyy-MM-dd HH:mm:ss&#125;&#x27;,&#x27;%p&#x27;,&#x27;%m&#x27;)log4j.appender.database.layout=org.apache.log4j.PatternLayout\n\n测试类package com.hisen.log4j.log4j2MySQL;import org.apache.log4j.Logger;/** * 测试一下log4j把日志插入到mysql数据库 * 插入语句和数据库配置在log4j的配置文件中 * Created by hisenyuan on 2017/3/21 at 14:23. */public class Log4jDemo &#123;    private static Logger logger = Logger.getLogger(Log4jDemo.class);    public static void main(String[] args) &#123;        logger.debug(&quot;这是debug信息&quot;);        // 记录info级别的信息        logger.info(&quot;这是info信息&quot;);        logger.info(&quot;这里做了一个XX操作，入库，做操作日志&quot;);        // 记录error级别的信息        logger.error(&quot;这是error信息&quot;);        hisen();    &#125;    public static void hisen() &#123;        logger.debug(&quot;这是方法中debug信息&quot;);        // 记录info级别的信息        logger.info(&quot;这是方法中info信息&quot;);        // 记录error级别的信息        logger.error(&quot;这是方法中error信息&quot;);    &#125;&#125;","categories":["java"],"tags":["java"]},{"title":"mac docker compose timezone 问题解决","url":"/20181221-mac%20docker%20compose%20timezone%20%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/","content":"一、背景介绍想用docker搭建一个lnmp环境\n使用这个脚本：\nhttps://github.com/buxiaomo/docker-compose/tree/master/lnmp\n\n执行命令之后报错\ndocker-compose -f lnmp.yml up -dWARNING: Some services (mysql, nginx, php, redis) use the &#x27;deploy&#x27; key, which will be ignored. Compose does not support &#x27;deploy&#x27; configuration - use `docker stack deploy` to deploy to a swarm.WARNING: Some services (mysql, nginx, php) use the &#x27;configs&#x27; key, which will be ignored. Compose does not support &#x27;configs&#x27; configuration - use `docker stack deploy` to deploy to a swarm.lnmp_mysql_1 is up-to-dateStarting lnmp_redis_1 ...lnmp_nginx_1 is up-to-dateStarting lnmp_redis_1 ... errorERROR: for lnmp_redis_1  Cannot start service redis: b&#x27;Mounts denied: \\r\\nThe path /usr/share/zoneinfo/Asia/Shanghai\\r\\nis not shared from OS X and is not known to Docker.\\r\\nYou can configure shared paths from Docker -&gt; Preferences... -&gt; File Sharing.\\r\\nSee https://docs.docker.com/docker-for-mac/osxfs/#namespaces for more info.\\r\\n.&#x27;                    memory: 100MERROR: for redis  Cannot start service redis: b&#x27;Mounts denied: \\r\\nThe path /usr/share/zoneinfo/Asia/Shanghai\\r\\nis not shared from OS X and is not known to Docker.\\r\\nYou can configure shared paths from Docker -&gt; Preferences... -&gt; File Sharing.\\r\\nSee https://docs.docker.com/docker-for-mac/osxfs/#namespaces for more info.\\r\\n.&#x27;ERROR: Encountered errors while bringing up the project.\n\n二、报错原因\nmac机器的时间路径与linux不一样\nlnmp.yml redis用到了这个时间\n\n三、解决办法\n查看当前机器时间文件真实位置(&#x2F;etc&#x2F;localtime 这个路径是不让共享给docker的)\n\nls -la /etc/localtimelrwxr-xr-x  1 root  wheel  39 10 19 11:13 /etc/localtime -&gt; /var/db/timezone/zoneinfo/Asia/Shanghai\n\n设置位置 ：Docker -&gt; Preferences… -&gt; File Sharing\n新增共享目录：&#x2F;var&#x2F;db&#x2F;timezone\napply &amp; restart\n修改lnmp.yml配置文件 全局替换：&#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai 为：&#x2F;var&#x2F;db&#x2F;timezone&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai\n\n四、成功信息docker-compose -f lnmp.yml up -dWARNING: Some services (mysql, nginx, php, redis) use the &#x27;deploy&#x27; key, which will be ignored. Compose does not support &#x27;deploy&#x27; configuration - use `docker stack deploy` to deploy to a swarm.WARNING: Some services (mysql, nginx, php) use the &#x27;configs&#x27; key, which will be ignored. Compose does not support &#x27;configs&#x27; configuration - use `docker stack deploy` to deploy to a swarm.Removing lnmp_redis_1Starting lnmp_nginx_1                ... doneStarting lnmp_mysql_1                ... doneRecreating f5b9db566588_lnmp_redis_1 ... doneStarting lnmp_php_1                  ... done\n","categories":["docker"],"tags":["docker"]},{"title":"mac安装Go环境 & IDE(GoLand) & 基本运行方法(标准输入)","url":"/20180908-mac%E5%AE%89%E8%A3%85Go%E7%8E%AF%E5%A2%83%20&%20IDE(GoLand)%20&%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E8%A1%8C%E6%96%B9%E6%B3%95/","content":"一、安装GO1.1 使用Homebrew安装go环境(如果很慢，可以换个源)\nbrew install go\n1.2 查看安装信息\ngo env\n主要关注如下输出\nGOROOT=&quot;/usr/local/Cellar/go/1.10.3/libexec&quot; # 安装目录\n1.3 配置环境变量\nvi ~/.bash_profile # 没有的话会新建一个文件\n输入如下内容，第一行是安装的目录，第三行是工作目录(可以改成自己喜欢的路径)\nGOROOT=/usr/local/Cellar/go/1.10.3/libexecexport GOROOTexport GOPATH=/Users/hisenyuan/golangexport GOBIN=$GOPATH/binexport PATH=$PATH:$GOBIN:$GOROOT/bin\n1.4 让配置文件生效并且查看环境变量\nsource ~/.bash_profilego env # 这时你会发现环境变量已经有改变\n\n二、安装GoLand我是习惯了用jetbrains的idea\n发现它家也有go语言的IDE GoLand\n于是就去官网下载，安装，找个注册码，修改一下host防止注册码失效\n这里就不再累赘了\n三、运行需要输入的程序买了一本《Go语言程序设计》\n\n有些程序需要从标准输入获取信息，然后进行处理，例如dup2\n运行之后不知道该肿么办，百度一番之后发现了方法\n命令行：Ctl + D\nGoLand：command + D\n贴一段程序和运行的结果\npackage mainimport (\t&quot;bufio&quot;\t&quot;fmt&quot;\t&quot;os&quot;)// dup2 打印输入中多次出现的文本和行数// 它从stdin或指定的文件到文件列表读取func main() &#123;\tcounts := make(map[string]int)\tfiles := os.Args[1:]\tif len(files) == 0 &#123;\t\tcountLines(os.Stdin, counts)\t&#125; else &#123;\t\tfor _, arg := range files &#123;\t\t\tf, err := os.Open(arg)\t\t\tif err != nil &#123;\t\t\t\tfmt.Fprintf(os.Stderr, &quot;dup2: %v\\n&quot;, err)\t\t\t\tcontinue\t\t\t&#125;\t\t\tcountLines(f, counts)\t\t\tf.Close()\t\t&#125;\t&#125;\tfor line, n := range counts &#123;\t\tif n &gt; 1 &#123;\t\t\tfmt.Printf(&quot;%d\\t%s\\n&quot;, n, line)\t\t&#125;\t&#125;&#125;func countLines(f *os.File, counts map[string]int) &#123;\tinput := bufio.NewScanner(f)\tfor input.Scan()&#123;\t\tcounts[input.Text()]++\t&#125;&#125;// 执行的过程中，得按command d//123//123//123//111//222//222//112//111^D//3\t123//2\t222\n","categories":["go"],"tags":["go"]},{"title":"maven环境搭建","url":"/20170214-maven%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","content":"一、环境的配置\n下载maven：http://maven.apache.org/download.cgi\n解压到相关目录\n配置环境变量：计算机—系统属性—高级系统设置—环境变量\n系统变量新建：M2_HOME 变量值：C:\\tool\\JAVA\\apache-maven-3.3.9\npath中添加：%M2_HOME%\\bin; (注意看看前面有没有分号隔开，没有添上)\n启动cmd，输入mvm -v可以查看版本\n\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)Maven home: C:\\tool\\JAVA\\apache-maven-3.3.9Java version: 1.7.0_51, vendor: Oracle CorporationJava home: C:\\hisenwork\\Java\\jdk1.7.0_51\\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 8&quot;, version: &quot;6.2&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;\n\n二、自定义设置(优化)1.自定义下载目录，修改配置文件\nC:\\hisenwork\\soft\\maven-3.3.9\\conf\\settings.xml\nC:\\hisenwork\\soft\\maven-3.3.9为你解压的maven路径\n\n**ps：**如果不想自己设置，我有现成的settings.xml，直接复制粘贴，覆盖原来的即可现成的settings.xml内容我放在底部\n\n搜索：localRepository\n在注释外添加以下代码，以后下载maven相关文件就会在这\n&lt;!--自定义存放目录--&gt;  &lt;localRepository&gt;C:\\hisenwork\\soft\\maven&lt;/localRepository&gt;\n2.自定义镜像(推荐阿里云，速度飞快)\n搜索：mirrors\n在里面添加：\n&lt;!--阿里云--&gt;&lt;mirror&gt;\t&lt;id&gt;nexus-aliyun&lt;/id&gt;\t&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;\t&lt;name&gt;Nexus aliyun&lt;/name&gt;\t&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt; \n\n3.运行命令初始化maven\nmvn  help:system\n然后你会看到命令行飞快的移动，在你刚刚设置的目录下会出现很多东西\n类似于这样\n$ mvn  help:system[INFO] Scanning for projects...Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (4 KB at 1.8 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 KB at 15.9 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/21/maven-parent-21.pom (26 KB at 15.5 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/apache/10/apache-10.pom (15 KB at 19.3 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jarDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 KB at 30.6 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom (7 KB at 5.5 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom (9 KB at 8.2 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/maven/maven-parent/22/maven-parent-22.pom (30 KB at 7.9 KB/sec)Downloading: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pomDownloaded: https://repo.maven.apache.org/maven2/org/apache/apache/11/apache-11.pom (15 KB at 12.8 KB/sec)[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 49.223 s[INFO] Finished at: 2017-02-14T13:09:33+08:00[INFO] Final Memory: 11M/152M[INFO] ------------------------------------------------------------------------\n\n三、maven相关命令创建 Maven 项目\nmvn archetype:create\n编译源代码（编译到target文件夹中）\nmvn compile\n编译测试代码\nmvn test-compile\n运行应用程序中的单元测试\nmvn test\n生成项目相关信息的网站\nmvn site\n清除目标目录中的生成结果（把默认target文件夹中的数据清理）\nmvn clean\n项目打包\nmvn package\n将打包好的包安装到本地仓库中，以使其塔项目能够调用\nmvn install\n生成 Eclipse 项目文件\nmvn eclipse:eclipse\n忽略测试文档编译\nmvn -Dmaven.test.skip=true\n部署到私有服务器\ncargo:deploy\n\n四、settings.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--author：HiSENwebsite：http://hisen.me--&gt;&lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements.  See the NOTICE filedistributed with this work for additional informationregarding copyright ownership.  The ASF licenses this fileto you under the Apache License, Version 2.0 (the&quot;License&quot;); you may not use this file except in compliancewith the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied.  See the License for thespecific language governing permissions and limitationsunder the License.--&gt;&lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | |  1. User Level. This settings.xml file provides configuration for a single user, |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -s /path/to/user/settings.xml | |  2. Global Level. This settings.xml file provides configuration for all Maven |                 users on a machine (assuming they&#x27;re all using the same Maven |                 installation). It&#x27;s normally provided in |                 $&#123;maven.home&#125;/conf/settings.xml. | |                 NOTE: This location can be overridden with the CLI option: | |                 -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;  &lt;!-- localRepository   | The path to the local repository maven will use to store artifacts.   |   | Default: $&#123;user.home&#125;/.m2/repository  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;  --&gt;  &lt;!--自定义存放目录--&gt;  &lt;localRepository&gt;C:\\hisenwork\\soft\\maven  &lt;/localRepository&gt;  &lt;!-- interactiveMode   | This will determine whether maven prompts you when it needs input. If set to false,   | maven will use a sensible default value, perhaps based on some other setting, for   | the parameter in question.   |   | Default: true  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;  --&gt;  &lt;!-- offline   | Determines whether maven should attempt to connect to the network when executing a build.   | This will have an effect on artifact downloads, artifact deployment, and others.   |   | Default: false  &lt;offline&gt;false&lt;/offline&gt;  --&gt;  &lt;!-- pluginGroups   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.   |--&gt;  &lt;pluginGroups&gt;    &lt;!-- pluginGroup     | Specifies a further group identifier to use for plugin lookup.    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;    --&gt;  &lt;/pluginGroups&gt;  &lt;!-- proxies   | This is a list of proxies which can be used on this machine to connect to the network.   | Unless otherwise specified (by system property or command-line switch), the first proxy   | specification in this list marked as active will be used.   |--&gt;  &lt;proxies&gt;    &lt;!-- proxy     | Specification for one proxy, to be used in connecting to the network.     |    &lt;proxy&gt;      &lt;id&gt;optional&lt;/id&gt;      &lt;active&gt;true&lt;/active&gt;      &lt;protocol&gt;http&lt;/protocol&gt;      &lt;username&gt;proxyuser&lt;/username&gt;      &lt;password&gt;proxypass&lt;/password&gt;      &lt;host&gt;proxy.host.net&lt;/host&gt;      &lt;port&gt;80&lt;/port&gt;      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;    &lt;/proxy&gt;    --&gt;  &lt;/proxies&gt;  &lt;!-- servers   | This is a list of authentication profiles, keyed by the server-id used within the system.   | Authentication profiles can be used whenever maven must make a connection to a remote server.   |--&gt;  &lt;servers&gt;    &lt;!-- server     | Specifies the authentication information to use when connecting to a particular server, identified by     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).     |     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are     |       used together.     |    &lt;server&gt;      &lt;id&gt;deploymentRepo&lt;/id&gt;      &lt;username&gt;repouser&lt;/username&gt;      &lt;password&gt;repopwd&lt;/password&gt;    &lt;/server&gt;    --&gt;    &lt;!-- Another sample, using keys to authenticate.    &lt;server&gt;      &lt;id&gt;siteServer&lt;/id&gt;      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;    &lt;/server&gt;    --&gt;  &lt;/servers&gt;  &lt;!-- mirrors   | This is a list of mirrors to be used in downloading artifacts from remote repositories.   |   | It works like this: a POM may declare a repository to use in resolving certain artifacts.   | However, this repository may have problems with heavy traffic at times, so people have mirrored   | it to several places.   |   | That repository definition will have a unique id, so we can create a mirror reference for that   | repository, to be used as an alternate download site. The mirror site will be the preferred   | server for that repository.   |--&gt;  &lt;mirrors&gt;    &lt;!-- mirror     | Specifies a repository mirror site to use instead of a given repository. The repository that     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.     |    &lt;mirror&gt;      &lt;id&gt;mirrorId&lt;/id&gt;      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;    &lt;/mirror&gt;     --&gt;\t&lt;!--阿里云--&gt;\t&lt;mirror&gt;\t\t&lt;id&gt;nexus-aliyun&lt;/id&gt;\t\t&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;\t\t&lt;name&gt;Nexus aliyun&lt;/name&gt;\t\t&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;\t&lt;/mirror&gt;   &lt;/mirrors&gt;  &lt;!-- profiles   | This is a list of profiles which can be activated in a variety of ways, and which can modify   | the build process. Profiles provided in the settings.xml are intended to provide local machine-   | specific paths and repository locations which allow the build to work in the local environment.   |   | For example, if you have an integration testing plugin - like cactus - that needs to know where   | your Tomcat instance is installed, you can provide a variable here such that the variable is   | dereferenced during the build process to configure the cactus plugin.   |   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles   | section of this document (settings.xml) - will be discussed later. Another way essentially   | relies on the detection of a system property, either matching a particular value for the property,   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.   | Finally, the list of active profiles can be specified directly from the command line.   |   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact   |       repositories, plugin repositories, and free-form properties to be used as configuration   |       variables for plugins in the POM.   |   |--&gt;  &lt;profiles&gt;    &lt;!-- profile     | Specifies a set of introductions to the build process, to be activated using one or more of the     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;     | or the command line, profiles have to have an ID that is unique.     |     | An encouraged best practice for profile identification is to use a consistent naming convention     | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.     | This will make it more intuitive to understand what the set of introduced profiles is attempting     | to accomplish, particularly when you only have a list of profile id&#x27;s for debug.     |     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.    &lt;profile&gt;      &lt;id&gt;jdk-1.4&lt;/id&gt;      &lt;activation&gt;        &lt;jdk&gt;1.4&lt;/jdk&gt;      &lt;/activation&gt;      &lt;repositories&gt;        &lt;repository&gt;          &lt;id&gt;jdk14&lt;/id&gt;          &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;          &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;          &lt;layout&gt;default&lt;/layout&gt;          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;        &lt;/repository&gt;      &lt;/repositories&gt;    &lt;/profile&gt;    --&gt;    &lt;!--     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration     | might hypothetically look like:     |     | ...     | &lt;plugin&gt;     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;     |     |   &lt;configuration&gt;     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;     |   &lt;/configuration&gt;     | &lt;/plugin&gt;     | ...     |     | NOTE: If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.     |    &lt;profile&gt;      &lt;id&gt;env-dev&lt;/id&gt;      &lt;activation&gt;        &lt;property&gt;          &lt;name&gt;target-env&lt;/name&gt;          &lt;value&gt;dev&lt;/value&gt;        &lt;/property&gt;      &lt;/activation&gt;      &lt;properties&gt;        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;      &lt;/properties&gt;    &lt;/profile&gt;    --&gt;  &lt;/profiles&gt;  &lt;!-- activeProfiles   | List of profiles that are active for all builds.   |  &lt;activeProfiles&gt;    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;  &lt;/activeProfiles&gt;  --&gt;&lt;/settings&gt;","categories":["java"],"tags":["java","maven"]},{"title":"mongodb - failed with errno13 Permission denied","url":"/20170712-mongodb%20-%20failed%20with%20errno%2013%20Permission%20denied/","content":"在命令行输入：mongo报错\nhisen@ubuntu:~$ mongoMongoDB shell version: 3.2.13connecting to: test2017-07-11T23:11:23.827+0800 I STORAGE  [main] In File::open(), ::open for &#x27;/home/hisen/.mongorc.js&#x27; failed with errno:13 Permission deniedThe &quot;.mongorc.js&quot; file located in your home folder could not be executed\n看倒数第二行，应该是权限的问题，于是\nhisen@ubuntu:~$ sudo chown -R hisen /home/hisen/.mongorc.jshisen@ubuntu:~$ mongoMongoDB shell version: 3.2.13connecting to: testServer has startup warnings: 2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] 2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is &#x27;always&#x27;.2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] **        We suggest setting it to &#x27;never&#x27;2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] 2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &#x27;always&#x27;.2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] **        We suggest setting it to &#x27;never&#x27;2017-07-11T23:11:15.845+0800 I CONTROL  [initandlisten] \n完美解决，用户权限的问题。\n","categories":["sql"],"tags":["mongodb"]},{"title":"mybatis - Invalid bound statement (not found)","url":"/20170802-mybatis%20-%20Invalid%20bound%20statement%20(not%20found)/","content":"运行报错\norg.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.hisen.dao.UserMapper.insert\n使用mybatis生成插件，产生的mapper，由于路径不对移动了一下mapper.java文件\n所以造成mapper.xml里面的namespace错误，无法映射\n所以把namespace改为正确的即可\n例如：\nmapper.UserMapper\n改为\ncom.hisen.dao.UserMapper\n","categories":["java"],"tags":["mybatis"]},{"title":"mybatis常用jdbctype","url":"/20170310-mybatis%E5%B8%B8%E7%94%A8jdbctype/","content":"Mybatis中javaType和jdbcType对应关系\n\n\n\nJDBC Type\nJava Type\n\n\n\nCHAR\nString\n\n\nVARCHAR\nString\n\n\nLONGVARCHAR\nString\n\n\nNUMERIC\njava.math.BigDecimal\n\n\nDECIMAL\njava.math.BigDecimal\n\n\nBIT\nboolean\n\n\nBOOLEAN\nboolean\n\n\nTINYINT\nbyte\n\n\nSMALLINT\nshort\n\n\nINTEGER\nint\n\n\nBIGINT\nlong\n\n\nREAL\nfloat\n\n\nFLOAT\ndouble\n\n\nDOUBLE\ndouble\n\n\nBINARY\nbyte[]\n\n\nVARBINARY\nbyte[]\n\n\nLONGVARBINARY\nbyte[]\n\n\nDATE\njava.sql.Date\n\n\nTIME\njava.sql.Time\n\n\nTIMESTAMP\njava.sql.Timestamp\n\n\nCLOB\nClob\n\n\nBLOB\nBlob\n\n\nARRAY\nArray\n\n\nDISTINCT\nmapping of underlying type\n\n\nSTRUCT\nStruct\n\n\nREF\nRef\n\n\nDATALINK\njava.net.URL\n\n\n","categories":["java"],"tags":["java","mybatis"]},{"title":"mybatis：No constructor found in xxx matching","url":"/20170317-mybatis%EF%BC%9ANo%20constructor%20found%20in%20xxx%20matching%20%5Bjava.lang.Integer,%20java.lang.String,%20java.lang.Integer%5D/","content":"如下错误提示：\nmybatis：No constructor found in xxx matching [java.lang.Integer, java.lang.String, java.lang.Integer]\n原因：xxx 这个bean缺少一个默认的构造方法！\n\n解决：加上默认的构造方法即可\n\n我是在单元测试的时候遇到这个问题\n","categories":["java"],"tags":["java"]},{"title":"MySQL分页查询","url":"/20200712-mysql-page-query/","content":"零、分页查询分页查询一般都会想到 offset limit\n问题1当不停机需要全量同步数据时有可能会漏掉或者重复处理很多数据因为中途会有数据改动每次分页内的数据与预期的会有出入\n问题2offset 会进行全表扫描\n一、推荐方案通过不变的字段进行排序最好是使用递增的主键索引\nselect *  from hisenwhere id &gt; $&#123;lastId&#125;  order by idlimit $&#123;pageSize&#125;;\n\n二、参考\n请不要将OFFSET和LIMIT用于分页\n","categories":["mysql"],"tags":["mysql"]},{"title":"new ImageIcon()无法加载同目录图片","url":"/20170208-new-ImageIcon-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%90%8C%E7%9B%AE%E5%BD%95%E5%9B%BE%E7%89%87/","content":"错误：\nnew ImageIcon(&quot;1.jpg&quot;)\n正确：\nnew ImageIcon(&quot;src/com/hisen/thread/progressbar/1.jpg&quot;)\n图片路径：\ntest\\src\\com\\hisen\\thread\\progressbar\\1.jpg\n所谓的相对路径，是相对于这个工程而言的，而不是当前文件夹而言。\n","tags":["java","jframe"]},{"title":"powerdesigner Oracle mysql comment 缺少右括号","url":"/20170622-powerdesigner%20Oracle%20mysql%20comment%20%E7%BC%BA%E5%B0%91%E5%8F%B3%E6%8B%AC%E5%8F%B7/","content":"powerdesigner Oracle mysql comment 缺少右括号\n今天人家给我个powerdesigner设计好的表\n要我去间数据库，直接复制出来去oracle执行，结果报错。\n在comment附近，如果把comment去掉则可以正确执行\n最后找到罪魁祸首：powerdesigner没有设置对数据库\n解决办法，在powerdesigner页面\ndatabase--&gt;change curren DBMS \n上面是设置你需要的数据库\n下面是为更改前的数据库\n","categories":["sql"],"tags":["mysql","oracle"]},{"title":"rabbitMQ的安装和Demo","url":"/20180111-rabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8CDemo/","content":"零、rabbitMQ介绍rabbitMQ详细介绍\n\n如果某个queue有多个订阅，消息分均分到消费者，而不是所有人都收到全部\n接收消息有ack(acknowledgment)机制，发送消息是没有这个机制的\n生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个或多个Queue中（或者丢弃）。\n\n一、在ununtu上安装1.1 安装echo &#x27;deb http://www.rabbitmq.com/debian/ testing main&#x27; | sudo tee /etc/apt/sources.list.d/rabbitmq.listwget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -sudo apt-get updatesudo apt-get install rabbitmq-server\n1.2 配置# 打开管理页面功能sudo rabbitmq-plugins enable rabbitmq_management# 查看安装的插件sudo rabbitmqctl list_users# 查看用户sudo rabbitmqctl list_users# 新增管理员用户sudo rabbitmqctl add_user admin admin# 授予管理员权限sudo rabbitmqctl set_user_tags admin administrator# 管理页面地址，用刚设置的账户登录管理页面\n http://127.0.0.1:15672\n二、Java小Demo2.1 遇到的问题\nACCESS_REFUSED - Login was refused using authentication mechanism PLAIN.帐号密码错误，建议使用2.3配置的账户，guest账户不靠谱\n\nconnection errorip或者port错误，确认信息是否正确，虚拟机的话看看端口映射是否正常\n\n\n2.2 配置用户# 添加普通用户sudo rabbitmqctl add_user hisen hisen# 添加权限rabbitmqctl set_permissions -p &quot;/&quot;  hisen &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;# 列出用户权限rabbitmqctl list_user_permissions hisen\n2.3 添加maven依赖&lt;dependency&gt;  &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;  &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;  &lt;version&gt;5.0.0&lt;/version&gt;&lt;/dependency&gt;\n2.4 发送端代码\npackage com.hisen.jars.rabbitmq;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Send &#123;  // 定义队列名字  public static final String QUEUE_NAME = &quot;hello&quot;;  public static void main(String[] args) throws IOException, TimeoutException &#123;    // 创建连接工厂    ConnectionFactory factory = new ConnectionFactory();    factory.setHost(&quot;127.0.0.1&quot;);    factory.setPort(5672);    factory.setUsername(&quot;hisen&quot;);    factory.setPassword(&quot;hisen&quot;);    Connection connection = null;    Channel channel = null;    try &#123;      // 创建连接      connection = factory.newConnection();      // 创建信道      channel = connection.createChannel();      // 声明一个队列：名称、持久性的（重启仍存在此队列）、非私有的、非自动删除的      channel.queueDeclare(QUEUE_NAME, false, false, false, null);      for (int i = 0; i &lt; 10; i++) &#123;        // 定义消息内容        String message = &quot;Hello World - &quot; + i;        // 通过信道发布内容        channel.basicPublish(&quot;&quot;, QUEUE_NAME, null, message.getBytes());        System.out.println(&quot;send : &quot; + message);      &#125;    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125; catch (TimeoutException e) &#123;      e.printStackTrace();    &#125; finally &#123;      if (null!=channel) &#123;        channel.close();      &#125;      if (null!= connection ) &#123;        connection.close();      &#125;    &#125;  &#125;&#125;\n2.5 接收端代码package com.hisen.jars.rabbitmq;import com.rabbitmq.client.AMQP.BasicProperties;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import com.rabbitmq.client.DefaultConsumer;import com.rabbitmq.client.Envelope;import java.io.IOException;import java.util.concurrent.TimeoutException;import org.joda.time.DateTime;public class Receive&#123;  // 定义队列名字  public static final String QUEUE_NAME = &quot;hello&quot;;  public static void main(String[] args) &#123;    // 创建连接工厂    ConnectionFactory factory = new ConnectionFactory();    factory.setHost(&quot;127.0.0.1&quot;);    factory.setUsername(&quot;hisen&quot;);    factory.setPassword(&quot;hisen&quot;);    try &#123;      // 创建连接      Connection connection = factory.newConnection();      // 创建信道      Channel channel = connection.createChannel();      // 声明一个队列：名称、持久性的（重启仍存在此队列）、非私有的、非自动删除的      channel.queueDeclare(QUEUE_NAME, false, false, false, null);      System.out.println(&quot;watting for message&quot;);      /* 定义消费者 */      DefaultConsumer consumer = new DefaultConsumer(channel) &#123;        @Override        public void handleDelivery(String consumerTag, Envelope envelope,            BasicProperties properties, byte[] body)            throws IOException &#123;          String message = new String(body, &quot;UTF-8&quot;);          System.out.println(&quot;Received time:&quot; + new DateTime().toString(&quot;yyyy-MM-dd HH:mm:ss:SSS EE&quot;)+ &quot; the message is -&gt; &quot; + message);        &#125;      &#125;;      // 将消费者绑定到队列，并设置自动确认消息（即无需显示确认，如何设置请慎重考虑）      channel.basicConsume(QUEUE_NAME, true, consumer);    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125; catch (TimeoutException e) &#123;      e.printStackTrace();    &#125;  &#125;&#125;","categories":["java"],"tags":["rabbitMQ"]},{"title":"读后感：《凤凰架构》","url":"/20210613-reaction-of-the-fenix-project/","content":"一、简短感受简单介绍，《凤凰架构》作者，周志明。他最出名的书籍非《深入理解Java虚拟机》莫属了书中了解到他对技术的态度，以及持续奋战一线值得学习，《程序员之路》值得一看(底部有链接)。\n阅读时间：0531～0612构建凤凰磐涅般的系统介绍了一整套技术体系穿插着技术的来龙去脉着实是一部不错的书籍架构的前提是足够了解综合实际情况做出权衡给人感觉不太像架构书总的来说还是值得一看\n用输出倒逼输入这就是写博客等其它输出手段的作用\n目前的软件没有烟囱式的，都是金字塔类型，所以底层基础要牢固！\n二、部分摘抄\n四层负载均衡的优势是性能高主要工作在数据链路层(2层)，改写Mac地址网络层(3层)，改写 IP 地址\n七层负载均衡的优势是功能强\n将简单的校验交给 bean validation，而把复杂校验留给自己，简直就是买株还珠。可以使用自定义注解，优雅地解决校验问题。检查校验项预置好默认提示信息。基础校验直接放在 bean 属性上，业务的单开类。\n能够使用确定的操作，促使状态间产生确定的转移结果的计算模型，在计算机科学中被称为状态机。\n状态机特性：任何初始状态一样的状态机，如果执行的命令序列一样，则最终达到的状态也一样。(可用于分布式协商…)\n广播指令、状态机复制。\n让各个系统节点不受局部网络分区、机器崩溃、执行性能、其它因素影响，都能最终表现出整体一致的过程，被称为各个节点的协商共识。\n一致性是指数据不同副本之间的差异，共识是指达成一致性的方法与过程。\n足可见技术圈里即使再有本事，也需要好好包装一下。paxos 论文发表三次后，被谷歌实现之后，凭着谷歌大拿的高度评价，获得了极大的关注。\n操作转移模型状态转移模型\n达成共识的三步\n\n如何选主\n如何把数据复制到各个节点\n如何保证过程是安全的\n\n网关 ＝ 路由器(基础职能) + 过滤器(可选职能)\n打饭解释各种 I&#x2F;O 模型异步 I&#x2F;O ：下完外卖订单后干别的去，骑手送上门同步 I&#x2F;O    阻塞：打饭发现饭还没好，就一直干等着    非阻塞：打饭发现饭还没好，per 3min 看好了没    多路复用：同上，只是一个人可以处理多个请求    信号驱动：发现饭没好，让厨师好了通知你\nBFF网关：backends for frontends，针对网关这种边缘节点，对同样的后端集群，裁剪、适配、聚合出不一样的前端服务，有助于后端的稳定，也有助于前端的赋能。\n由于服务随时都有可能崩溃，因此快速的失败检测和自动恢复就显得至关重要。\nlstio(mesh) 在 1.5 之前是使用微服务架构开发模块如下\n\nmixer：鉴权策略与遥测\npilot：对接 envoy 的数据平面，xds 策略分发\ngalley：配置管理，提供外部配置感知能离\ncitadel：安全加密，RABC 权限控制\n\n微服务的目的是有效拆分应用，实现敏捷开发和部署。\n凡事总该现有目的，有预期收益再谈行动才显得合理。\n《没有银弹》：硬件的成本能够持续稳定地下降，而软件开发的成本则不可能。\n系统的架构趋同于系统设计团队的沟通解构。康威定律核心观点：沟通决定设计\n大厂研发收到追捧，出除了企业本身的光环外(来自于哪里？)，有大型系统浸染的经验，更有可能属于技术专家，也是其中的原因。\n微服务对普通业务研发友好，但是对架构要求极高。\n微服务的前提\n\n决策者与执行者都能意识到康威定律在软件设计中的关键作用\n组织中具备对微服务有充分理解、有一定实战经验的技术专家\n追求以自治为目标的监控、度量能力\n复杂性已经成为制约生产力的主要矛盾\n\n需要想清楚做一件事的目的是什么？考虑 ROI\n长期来看，多数服务端结局都是报废而非演进–Martin Fowler。随说：良好设计的系统，应该是能够报废的，而非一味追求一步到位。\n微服务拆分粒度下界：独立(发布 &#x2F; 部署 &#x2F; 运行 &#x2F; 测试)，内聚(本地事务)上界：2 披萨团队 (6~12)在一个研发周期完成全部需求。\n治理，系统复杂性下的产物。\n软件研发的认知负荷，本质上是来自技术的认知复杂度。\n分布式系统早已放弃 Unix 所追求的简单性设计哲学。\n治理架构腐化唯一有效的办法就是演进式设计。开发过程中少妥协，否则会形成破窗效应。\nArchitect 架构师一词从建筑行业借鉴而来，让人容易误解架构师类似于给建筑设计骨架、绘制图纸的建筑架构师。演进式设计更像是“换房子”而不是“造房子”。\n先进的生产力都伴随着更高的复杂性，需要有与生产力符合的生产关系来匹配，敏锐地捕捉到生产力的变化，随时调整生产关系，这才是架构师治理复杂性的终极方法。\n1992 Java write once，run anywhere。2018 graal vm，run programs faster anywhere。\n目前 graal vm优势：启动时间快，打包小，内存消耗少劣势：无法无缝支持动态代理技术，延迟、吞吐量、可监控方面略差，性能劣于 hotspot jit 优化。毕竟是运行时优化，各种分支预测～\n将思考具象化。如果不把自己思考的内容输出给他人，我们很容易就被自己所欺骗，误以为自己已经理解得足够完备了。随说：用输出倒逼输入。\n三、图书资源纸书作者应该还在初版中，目前看的是 PDF.这本书属于开源书籍，开源地址：《凤凰架构》凤凰架构附录的一篇文章不错：《程序员之路》\n","categories":["read"],"tags":["read"]},{"title":"Redis 开发与运维","url":"/20220523-redis_dev_ops/","content":"零、背景鉴于目前 Redis 使用广泛虽然数据结构、API 比较简单但是想使用好，还是有一定难度建议了解下《Redis 开发与运维》以达到知其然且知其所以然的境界\n一、使用场景大规模互联网在线应用流量比较大，响应时间要求高Redis 作为一款流行的高性能数据库\n对于读多写少的场景，一般作为缓存使用某大型电商订单系统读写比大概在 10:1并且订单读取 90% 的流量都是创建订单当天查询\n对于可容忍丢数据，但是对性能有极致要求，比如优惠券发放，流量高，这种情况下当做 DB 用也挺好。\n二、问题与建议2.1 常见问题\n网络抖动导致 redis 操作失败\n定时任务清理过期 key 导致 IOPS 高\nredis 做了二次开发，更激进的惰性删除( 针对大面积过期场景 )\n\n\n热 key 导致流量倾斜\n考虑 Server 端旁路监听，做统计，然后推送到客户端做内存缓存\n京东有开源热 Key 方案\n\n\nredis slot 分配不均匀，导致某节点提前内存告警\n建议分配内存按 slot 分配，而不是节点\n\n\n\n2.2 建议\n缓存时间动态可配\n\n\n\n上线后根据业务灵活调整，节约资源\n大促过程中，扩容来不及，可以根据趋势缩短缓存时间，避免淘汰\n使用 ProtoStuff 之类的高效序列化工具\n使用 snappy 等高效压缩算法\n\n三、阅读摘抄《Redis开发与运维》20 1121～1122\ndbsize 获取当前数据库中键总数，复杂度 O(1)\nkeys * 复杂度 O(n)\ntype key 返回 redis 外部数据结构\nobject encoding key 返回 redis 内部编码实现\nredis 为单线程模型，所有命令都进队列。\nredis 单线程为何还这么快？\n\n纯内存访问，内存响应约 100 ns，快的基础\n非阻塞 I&#x2F;O，事件驱动\n单线程避免了线程切换和竞态产生的消耗\n\n锁和线程切换通常是性能杀手。\n单线程可以简化数据结构和算法。\n由于是单线程，所以对每个命令执行时间有要求。redis 是面向快速执行场景的数据库。\nmget 结果是按照传入键的顺序返回。\nredis 中每个中文占 3 个字节随说：utf-8 汉字 3 ，ascii unicode 2\n字符串类型的内部编码有 3 种：\n\nint：8 字节的长整形\nembstr：≤ 39 字节的字符串\nraw：＞ 39 字节的字符串\n\nlist 的 lrange 操作获取指定索引范围的元素。\n\n索引下标从左到右是 0～N-1\n索引下标从右到左是 -1～-N\n并且 end 包含了自身，很多编程语言不包含\n\n对于字符串类型的键，再次执行 set 命令会将上次的过期时间去掉。\n纯内存存储、I&#x2F;O多路复用技术、单线程架构是 redis 高性能的三个因素。\n了解每个命令的时间复杂度在\nredis 命令真正执行的时间通常在微妙级别，所以才会有 redis 性能瓶颈是网络的说法。\n原生批命令与 pipeline 的区别：\n\n原生批命令是原子的，pipeline 是非原子的\n原生一命令多 key，pipeline 支持多命令\n原生是 redis 服务端实现，pipeline 客户端+服务端 实现\n\npipeline 只能操作一个 redis 实例，但即使在分布式 redis 场景中，也可以作为批量操作的重要优化手段。\nredis 3.2 版本提供了 geo 功能，支持 LBS 服务。geo 功能是 redis 借鉴了 ardb 功能实现，ardb 的作者来自中国。\n输出缓冲区由两部分组成：\n\n固定缓冲区 16KB，返回比较小的执行结果\n动态缓冲区，列表实现，返回较大的结果\n\nRESP(Redis Serialization Protocol Redis)，协议。保证客户端与服务端的正常通信，是各种编程语言开发客户端的基础。\njedis 没有内置序列化工具，需要自己选用。page 121 有使用 protostuff (protobuf的Java客户端)进行操作的例子。随说：这块 21 年出实际场景测试过，时间、空间复杂度优化幅度都蛮大\n理解 redis 通信原理和建立完善的监控系统对快速定位客户端常见问题非常有帮助。\nredis 默认采用 LZF 算法对生成的 RDB 文件做压缩处理，压缩后的文件远远小于内存大小。\n正常情况下，fork 操作耗时应该是每 GB 消耗 20 毫秒左右。\nredis 是 CPU 密集型服务，不要做绑定单核 CPU 操作。由于子进程非常消耗 CPU，会和父进程产生单核资源竞争。\n子进程通过 fork 操作产生，理论上需要两倍的内存来完成持久化，但 Linux 有写时复制机制(copy-on-write)，父子进程会共享相同的物理内存页，当父进程处理写请求时会把要修改的页创建副本，而子进程在 fork 操作过程中共享整个父进程内存快照。\n复制功能是高可用 redis 的基础。\n主从复制延迟，redis 提供了 repl-disable-tcp-nodelay 参数控制是否关闭，TCP_NODELAY，默认为 no，即开启 TCP_NODELAY 功能，这时主节点会合并较小的 TCP 数据包节省带宽但是增大了主从之间的延迟，适用于跨机房部署。如果为 yes，那么会立即发送，适合同机房网络。\n对于写并发量较高的场景，多个从节点会导致主节点写命令的多次发送从而过度消耗网络带宽，同时也加重了主节点的负载影响服务稳定性。\npsync 2.8 以上支持，有全量复制，部分复制需要组件支持：\n\n主从节点各自复制偏移量\n主节点复制积压缓冲区\n主节点运行 id\n\nredis 支持无盘复制，repl-diskless-sync，试验阶段，rdb 文件不保存到硬盘而直接通过网络发送给从节点。\n为了降低主从延迟，一般把 redis 主从部署在同机房 &#x2F; 同城机房，避免网络延迟和网络分区造成的心跳中断等情况。\n对于读写分离，会造成从节点数据延迟，可以编写外部监控程序监听主从节点的复制偏移量，当延迟较大时出发报警或者通知客户端避免读取延迟过高的从节点。\n为了保证复制一致性，从节点自身永远不会主动删除超时数据。\n建议做读写分离之前，可以考虑使用 redis cluster 等分布式解决方案，这样不止扩展了读性能还可以扩展写性能和可支撑数据规模，并且一致性和故障转移也可以得到保证，对客户端的维护逻辑也相对容易。读写分离成本太高\nredis-cli –bigkeys把历史扫描过的最大对象统计出来，分析优化\n带宽瓶颈通常出现在以下几个方面：\n\n机器网卡带宽\n机架交换机带宽\n房之间专线带宽\n\n网络快慢：同物理机 ＞ 同机架 ＞ 跨机架 ＞ 同机房 ＞ 同城机房 ＞ 异地机房随说：但它们的容灾性正好相反\nredis 进程的内存消耗主要包括：自身内存 + 对象内存 + 缓冲内存 + 内存碎片。\n对象内存是 redis 内存占用最大的一块，存储着用户所有的数据。\n输入输出缓冲区在大流量的场景中容易失控，造成 redis 内存的不稳定，需要重点关注。\n由于进程内保存大量的键，维护每个键精准的过期删除机制会导致消耗大量的 CPU，对于单线程的 redis 来说成本过高，因此 redis 采用惰性删除和定时任务删除机制实现过期键的内存回收。\n在高并发放场景下，建议字符串长度控制在 39 字节以内，以减少 redisObject 内存分配次数，从而提高性能。\n尽量减少字符串频繁修改操作如 append、setrange，改为直接使用 set 修改字符串，降低预分配带来的内存浪费和内存碎片化。\nredis sentinel 有一套合理的监控机来判断节点不可达，有三个定时任务：\n\n每 10s 向主节点发送 info 信息获取最新拓扑\n每 2s 向 sentinel 频道发送对主节点的判断以及自身的信息\n每 1s sentinel 向主节点、从节点、其余 sentinel 发送 ping 做心跳检测，来确认节点是否可达。\n\nredis 使用 raft 算法实现领导者的选举。\nredis sentinel 是 redis 的高可用方案实现：故障发现、故障自动转移、配置中心、客户端通知\nredis sentinel 模式下，客户端初始化连接的是 sentinel 节点集合，不再是具体的 redis 节点，但 sentinel 只是配置中心不是代理。\nredis cluster 是 redis 的分布式解决方案。当遇到单机内存、并发、流量等瓶颈时，可以采用 cluster 架构方案达到负载均衡的目的。\nredis cluster 之前的分布式方案：\n\n客户端分片，客户端比较重，需要处理路由、高可用、故障转移等问题。\n代理方案，部署麻烦，性能损耗。\n\n数据分区是分布式存储的核心，理解和灵活运用数据分区规则对于掌握 redis cluster 非常有帮助。\nredis cluster 限制：\n\n批量操作支持有限，目前 mget、mset 只支持具有相同 slot 值的 key 执行批量操作。\nkey 事务操作支持有限\nkey为数据分区最小力度，hash list 在单机\n不支持多数据库空间\n复制结构只支持一层，不支持嵌套树状\n\n在分布式存储中需要提供维护节点元数据信息的机制，所谓元数据是指：节点负责哪些数据，是否出现故障等状态信息。\n常见的元数据维护方式分为：集中式、P2P方式\nredis cluster 采用 P2P 的 Gossip(流言) 协议，Gossip 协议工作原理就是节点彼此不断通信交换信息，一段时间之后所有节点都会知道集群完整信息。\n虽然 Gossip 协议的信息交换机制具有天然的分布式特性，但他是有成本的。redis 集群内节点通信频率为每秒 10次。单次通信消息 ＞ 2KB，消息体携带的数据量根集群节点数息息相关，更大的集群代表更大的通信成本。因此对于 redis 集群来说并不是大而全的集群更好，需要对集群的规模做限制。随说：大规模集群可以考虑使用哨兵模式、或者拆分 redis cluster\n集群内 Gossip 消息通信本身会消耗带宽，官方建议集群最大规模在 1000 以内。\nredis cluster 可以实现对节点的灵活上下线控制。其中原理可以抽象为槽和对应数据在不同节点之间的灵活移动。\n集群伸缩＝槽和数据在节点之间移动。\nMOVED 重定向：在集群模式下 redis 接收 key 相关命令先计算对应的槽，再根据槽找到节点，如果节点是自身，则处理命令，否则返回 MOVED 重定向错误，通知客户端请求正确的节点。\n键使用大括号包含的内容又叫做 hash_tag，它提供不同的键可以具备相同的 slot 功能，常用于 redis I&#x2F;O 优化。在集群模式下实现 mget mset pipeline 等操作。\nsmart 客户端通过在内部维护slot → node 的映射关系，本地就可以实现key → node 的查找，从而保证 I&#x2F;O 效率低最大化，而 MOVED 重定向负责协助 smart 客户端更新 slot → node 映射。\njediscluster 解析 cluster slots 结果缓存到本地，为每个节点创建唯一的 jedispool 连接池。\ncluster slots 风暴：\n\n重试机制导致 I&#x2F;O 通信放大问题\n个别节点异常导致频繁获取 slots 信息\n频繁触发更新本地 slots 缓存操作，内部用了写锁，阻塞对集群所有的命令调用。\n\n针对以上问题，jedis 2.8.2 版本做了改进：\n\n当接收到 JedisConnectionException 时不再轻易初始化 slots 缓存，大幅降低内部 I&#x2F;O 次数。\n当更新 slots 缓存时，不再使用 ping 检测节点活跃度，并且使用 redis covering 变量保证同一时刻只有一个线程更新 slots 缓存，其它线程忽略，优化了写锁阻塞和 cluster slots 调用次数\n\njedis cluster 中由于 key 分布在不同的节点上，会造成无法实现 mget、mset 等功能。但是可以利用 CRC16 计算出 key → slot，以及 smart 客户端保存 slot → node 的特性，将属于同一个 redis 节点的 key 进行归类，然后分别对每个节点对应的子 key 列表执行 mget 或者 pipeline 操作。\nASK 与 MOVED 都是对客户端重定向控制，ASK 表示集群正在进行 slot 迁移，不知道什么时候完成。MOVED 明确表示 slot 对应的节点，因此需要更新 slot 缓存。\n配置纪元的应用场景有：\n\n新节点加入\n槽节点映射冲突检测\n从节点投票选举冲突检测\n\n配置纪元的主要作用：\n\n标示集群内每个主节点的不同版本和当前集群最大版本。\n每次集群发生重要事件，都会递增纪元\n大的纪元表示更新的状态\n\n唯品会开发的 redis-migrate-tool 支持在线迁移，采用多线程加速，提供数据校验和查看迁移状态等功能。随说：在 github 开源了\n缓存更新策略最佳实践\n\n低一致性业务建议配置最大内存和淘汰策略\n高一致性业务结合 expire 和主动更新\n\n缓存粒度问题\n\n全部字段缓存通用易维护，报文大性能低\n部分字段缓存通用性低，维护复杂，高效随说：考虑使用 hash 全量存，按需取\n\n使用布隆过滤器减少缓存击穿，page 351随说：订单业务很难做到，特别是订单量大\n无底洞：投入越多不一定产出越多\n\n客户端一次批量操作会涉及多次网络开销，节点越多越耗时\n网络连接数变多，对性能也会有影响\n\n无底洞优化\n\n命令本身的优化，例如优化 SQL 语句\n减少网络通信次数\n降低接入成本，使用连接池 &#x2F; NIO 等\n客户端 n 次 get，n 次网络 + n 次 get 命令\n客户端 1 次 pipeline get，1 网络 + n get\n客户端 1 次 mget，1 网络 + 1 mget随说：以上针对单个 redis 节点，非 cluster\n\nNTP 是一种保证不同时钟一致性的服务。\nredis cluster | sentinel 如果多个节点时间不一致，会影响日志排查，但不会影响功能，节点依赖各自的时钟。\nredis 公网无密码情况下，黑客可以写入公钥，通过设置 rdb 文件目录到 &#x2F;root&#x2F;.ssh 目录，并且文件名设置为 authorized_keys 即可实现免密登录。爆破主机。\nredis bind 参数指定的是 redis 和哪个网卡绑定(建议绑定内网)，和客户端什么网段没有关系。\nbigkey，一般字符串类型 value 超过 10KB 就是 bigkey 了，但这个值和具体的 OPS 相关。\nredis 查看 key 的大小：debug object key看其中的 serializedlength 即可。\n","categories":["database"],"tags":["java","redis"]},{"title":"resteasy fastjson版本冲突问题","url":"/20190804-resteasy%20fastjson%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/","content":"零、相关介绍关键错误信息：java.lang.RuntimeException: RESTeasy Provider Factory is null, do you have the ResteasyBootstrap listener configured?java.lang.RuntimeException: Illegal to inject a message body into a singleton into public com.alibaba.fastjson.support.jaxrs.FastJsonProvider(java.lang.String)\nresteasy:JBoss的一个开源项目，提供一套完整的框架帮助开发人员构建RESTful Web Service和RESTful Java应用程序。fastjson:由阿里开发的一个性能很好的Java JSON 解析器和生成器。\n引起错误的依赖\n&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.2.58&lt;/version&gt;&lt;!--改为：1.1.34.sec01相安无事--&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;resteasy-jaxrs&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;jaxrs-api&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;resteasy-spring&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;\n\n一、错误日志本地启动Server报错\n\n2019-08-03 11:51:22,491 ERROR - [RMI TCP Connection(2)-127.0.0.1] - Context initialization failedjava.lang.RuntimeException: RESTeasy Provider Factory is null, do you have the ResteasyBootstrap listener configured?\tat org.jboss.resteasy.plugins.spring.SpringContextLoaderSupport.customizeContext(SpringContextLoaderSupport.java:53)\tat org.jboss.resteasy.plugins.spring.SpringContextLoader.customizeContext(SpringContextLoader.java:30)\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:382)\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)\tat org.jboss.resteasy.plugins.spring.SpringContextLoaderListener.contextInitialized(SpringContextLoaderListener.java:44)\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5197)\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5720)\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1018)\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:994)\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:662)\tat org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1899)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:619)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:566)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat com.sun.jmx.remote.security.MBeanServerAccessController.invoke(MBeanServerAccessController.java:468)\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)\tat java.security.AccessController.doPrivileged(Native Method)\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1427)\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)\tat sun.rmi.transport.Transport$2.run(Transport.java:202)\tat sun.rmi.transport.Transport$2.run(Transport.java:199)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.Transport.serviceCall(Transport.java:198)\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\tat java.lang.Thread.run(Thread.java:745)\ntomcat localhost long\n八月 03, 2019 11:51:22 上午 org.apache.catalina.core.ApplicationContext log信息: No Spring WebApplicationInitializer types detected on classpath八月 03, 2019 11:51:22 上午 org.apache.catalina.core.StandardContext listenerStart严重: Exception sending context initialized event to listener instance of class org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrapjava.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate MessageBodyReader\tat org.jboss.resteasy.plugins.providers.RegisterBuiltin.register(RegisterBuiltin.java:35)\tat org.jboss.resteasy.spi.ResteasyDeployment.start(ResteasyDeployment.java:211)\tat org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap.contextInitialized(ResteasyBootstrap.java:28)\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5197)\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5720)\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1018)\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:994)\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:662)\tat org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1899)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:619)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:566)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat com.sun.jmx.remote.security.MBeanServerAccessController.invoke(MBeanServerAccessController.java:468)\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)\tat java.security.AccessController.doPrivileged(Native Method)\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1427)\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)\tat sun.rmi.transport.Transport$2.run(Transport.java:202)\tat sun.rmi.transport.Transport$2.run(Transport.java:199)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.Transport.serviceCall(Transport.java:198)\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\tat java.lang.Thread.run(Thread.java:745)Caused by: java.lang.RuntimeException: Unable to instantiate MessageBodyReader\tat org.jboss.resteasy.spi.ResteasyProviderFactory.registerProvider(ResteasyProviderFactory.java:760)\tat org.jboss.resteasy.plugins.providers.RegisterBuiltin.registerProviders(RegisterBuiltin.java:70)\tat org.jboss.resteasy.plugins.providers.RegisterBuiltin.register(RegisterBuiltin.java:31)\t... 51 moreCaused by: java.lang.RuntimeException: Illegal to inject a message body into a singleton into public com.alibaba.fastjson.support.jaxrs.FastJsonProvider(java.lang.String)\tat org.jboss.resteasy.core.MessageBodyParameterInjector.inject(MessageBodyParameterInjector.java:209)\tat org.jboss.resteasy.core.ConstructorInjectorImpl.injectableArguments(ConstructorInjectorImpl.java:63)\tat org.jboss.resteasy.core.ConstructorInjectorImpl.construct(ConstructorInjectorImpl.java:129)\tat org.jboss.resteasy.spi.ResteasyProviderFactory.getProviderInstance(ResteasyProviderFactory.java:1038)\tat org.jboss.resteasy.spi.ResteasyProviderFactory.addMessageBodyReader(ResteasyProviderFactory.java:478)\tat org.jboss.resteasy.spi.ResteasyProviderFactory.registerProvider(ResteasyProviderFactory.java:756)\t... 53 more八月 03, 2019 11:51:22 上午 org.apache.catalina.core.ApplicationContext log信息: Initializing Spring root WebApplicationContext八月 03, 2019 11:51:22 上午 org.apache.catalina.core.StandardContext listenerStart严重: Exception sending context initialized event to listener instance of class org.jboss.resteasy.plugins.spring.SpringContextLoaderListenerjava.lang.RuntimeException: RESTeasy Provider Factory is null, do you have the ResteasyBootstrap listener configured?\tat org.jboss.resteasy.plugins.spring.SpringContextLoaderSupport.customizeContext(SpringContextLoaderSupport.java:53)\tat org.jboss.resteasy.plugins.spring.SpringContextLoader.customizeContext(SpringContextLoader.java:30)\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:382)\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)\tat org.jboss.resteasy.plugins.spring.SpringContextLoaderListener.contextInitialized(SpringContextLoaderListener.java:44)\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:5197)\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5720)\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:1018)\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:994)\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:662)\tat org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1899)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:619)\tat org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:566)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:301)\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\tat com.sun.jmx.remote.security.MBeanServerAccessController.invoke(MBeanServerAccessController.java:468)\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1487)\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:97)\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1328)\tat java.security.AccessController.doPrivileged(Native Method)\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1427)\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:848)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:606)\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:322)\tat sun.rmi.transport.Transport$2.run(Transport.java:202)\tat sun.rmi.transport.Transport$2.run(Transport.java:199)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.Transport.serviceCall(Transport.java:198)\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:567)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.access$400(TCPTransport.java:619)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:684)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$1.run(TCPTransport.java:681)\tat java.security.AccessController.doPrivileged(Native Method)\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:681)\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\tat java.lang.Thread.run(Thread.java:745)\n三、解决办法&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.1.34.sec01&lt;/version&gt;&lt;!--改为：1.1.34.sec01相安无事--&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;resteasy-jaxrs&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;jaxrs-api&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;    &lt;artifactId&gt;resteasy-spring&lt;/artifactId&gt;    &lt;version&gt;2.2.1.GA&lt;/version&gt;&lt;/dependency&gt;\n\n四、细节说明暂时不知道引起的原因，后期补充\n","categories":["java"],"tags":["java"]},{"title":"Java 日志配置文件 - self4j 之 logback 和 log4j","url":"/20200406-self4j-logback-log4j-log-properties/","content":"写这种博客总感觉很低级但是不得不承认自己从来没有认真的了解过打日志这件事这里开个头，先从常见的日志配置文件开始，后续再深入了解\n“I wish i had” vs “I’m glad i did”人生会不会留下遗憾，在 20 年之后的这两句话中就能看出。希望 20 年后的自己，能够很自豪的说：I’m glad i did.\n一、self4j这是一个只定义了标准的日志组件\n二、logback常见配置：logback.xml\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt;    &lt;property name=&quot;APP&quot; value=&quot;hisenyuan-log-project&quot;/&gt;    &lt;!--文件输出--&gt;    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;!--存储路径--&gt;        &lt;file&gt;/export/log/$&#123;APP&#125;/$&#123;APP&#125;_detail.log&lt;/file&gt;        &lt;!--按天分割--&gt;        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;FileNamePattern&gt;/www/log/$&#123;APP&#125;/$&#123;APP&#125;_detail.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;        &lt;/rollingPolicy&gt;        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;            &lt;pattern&gt;%d&#123;yy-MM-dd.HH:mm:ss.SSS&#125; [%-16t] %-5p %-22c&#123;0&#125; %X&#123;trace-id&#125; - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!--控制台--&gt;    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;            &lt;pattern&gt;%d&#123;yy-MM-dd.HH:mm:ss.SSS&#125; [%-16t] %-5p %-22c&#123;0&#125; %X&#123;trace-id&#125; - %m%n&lt;/pattern&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!--你想排除xxx包下面的日志--&gt;    &lt;logger name=&quot;kafka.utils.Logging&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;    &lt;/logger&gt;    &lt;!--允许WARN以及以上的打印--&gt;    &lt;logger name=&quot;org.apache.http&quot; additivity=&quot;false&quot;&gt;        &lt;level value=&quot;WARN&quot; /&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;    &lt;/logger&gt;    &lt;!--日志级别--&gt;    &lt;root level=&quot;INFO&quot;&gt;        &lt;!--启用日志文件打印日志--&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;        &lt;!----&gt;        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;    &lt;/root&gt;&lt;/configuration&gt;\n三、log4j常见配置：log4j.xml\n&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27; ?&gt;&lt;!DOCTYPE log4j:configuration SYSTEM        &quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;&gt;&lt;log4j:configuration&gt;    &lt;appender name=&quot;CONSOLE&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yy-MM-dd.HH:mm:ss.SSS&#125; [%-16t] %-5p %-22c&#123;1&#125; - %m%n&quot;/&gt;        &lt;/layout&gt;        &lt;filter class=&quot;org.apache.log4j.varia.LevelRangeFilter&quot;&gt;            &lt;param name=&quot;LevelMin&quot; value=&quot;INFO&quot;/&gt;            &lt;param name=&quot;LevelMax&quot; value=&quot;ERROR&quot;/&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;appender name=&quot;FILE&quot; class=&quot;org.apache.log4j.DailyRollingFileAppender&quot;&gt;        &lt;param name=&quot;DatePattern&quot; value=&quot;&#x27;.&#x27;yyyy-MM-dd&quot;/&gt;        &lt;param name=&quot;Append&quot; value=&quot;true&quot;/&gt;        &lt;param name=&quot;file&quot; value=&quot;/www/log/hisenyuan-log-project.log&quot;/&gt;        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yy-MM-dd.HH:mm:ss.SSS&#125; [%-16t] %-5p %-22c&#123;1&#125; - %m%n&quot;/&gt;        &lt;/layout&gt;        &lt;filter class=&quot;org.apache.log4j.varia.LevelRangeFilter&quot;&gt;            &lt;param name=&quot;LevelMin&quot; value=&quot;INFO&quot;/&gt;            &lt;param name=&quot;LevelMax&quot; value=&quot;ERROR&quot;/&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;logger name=&quot;kafka.utils.Logging&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;    &lt;/logger&gt;    &lt;logger name=&quot;org.apache.http&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;    &lt;/logger&gt;    &lt;root&gt;        &lt;priority value=&quot;INFO&quot;/&gt;        &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;        &lt;appender-ref ref=&quot;FILE&quot;/&gt;    &lt;/root&gt;&lt;/log4j:configuration&gt;\n","categories":["java"],"tags":["java"]},{"title":"shell & expect 实现 MySQL 命令行自动登录","url":"/20220603-shell-and-expect-for-mysql-auto-login/","content":"0. 背景由于目前经常需要登录数据库查询相关数据每次进行登录一系列操作，有点费劲于是乎想着看看怎么自动化\n限制：需要在堡垒机进行操作\n1. 知识1.1 expcetexpect是一个自动化交互套件，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。\n1.2 awkAwk是一种便于使用且表达能力强的程序设计语言，可应用于各种计算和数据处理任务。入门指南\n2. 脚本2.1 自动登录脚本说明：基于 expect文件：mysqlLogin.sh\n#!/usr//bin/expect -fset ip [lindex $argv 0]set port [lindex $argv 1]set user [lindex $argv 2]set password [lindex $argv 3]spawn mysql -h$ip -u$user -P$port -pset timeout 1000expect &quot;Enter password:&quot;send &quot;$password\\r&quot;expect &quot;&gt;&quot;send &quot;use xxx_database\\r&quot;interact\n\n\n2.2 获取信息并登录说明：通过 shell 动态获取登录信息文件：autologin.sh\n#!/usr/bin/baships=`get_single_ip_by_domain hisen.me`ip=($(echo $ips | awk &#x27;&#123;print $2&#125;&#x27;))port=($(echo $ips | awk &#x27;&#123;print $3&#125;&#x27;))echo &quot;+---------------------------+&quot;echo &quot;| Login to MySQL offline |&quot;echo &quot;+---------------------------+&quot;# 调用上面的脚本，包含 4 个参数expect /root/soft/login/mysqlLogin.sh $ip $port user pwd\n\n2.3 快捷命令设置设置完成之后，输入 ma 命令，即可自动登录到 MySQL 客户端\ncat ~/.bashrcalias ma=&#x27;sh /root/soft/login/autologin.sh&#x27;\n\n3. 参考文档\nshell自动化程序之-MySQL自动登录\nawk 入门指南\n\n","categories":["shell"],"tags":["mysql","shell"]},{"title":"软件工程师面试指引","url":"/20200805-software-engineer-interview-guide/","content":"零、关于面试面试决定因子：70% 能力、20% 缘分、10% 行情。软件工程师是条不归路，每天进步一点点，早日走上人生巅峰。\n一、面经&#x2F;知识点仓库的内容更多是抛砖引玉，提供通用与重要的技术，真正掌握还得贴合自身需要，花时间持续深入地学习。\n基础指引：https://github.com/Snailclimb/JavaGuide进阶之路：https://github.com/doocs/advanced-java编程书籍：https://github.com/jobbole/awesome-programming-books算法小抄：https://labuladong.gitbook.io/algo/大厂试题：https://github.com/0voice/interview_internal_reference简历打磨：https://github.com/geekcompany/ResumeSample/blob/master/java.md\n后续持续更新，多交流，共同成长。\n二、相关内容计算机科学的自我修炼技术人的自我修炼(书单)\n三、更新记录2020-12-18\n\n新增『算法小抄』，很佩服作者的计划、执行能力。关于作者部分很认同。\n\n2021-02-18\n新增『计算机科学的自我修炼』相关链接\n\n","categories":["成长"],"tags":["java","面试"]},{"title":"赢得财富：用独到的知识/责任感/杠杆","url":"/20200517-specific-knowledge-accountability-leverage/","content":"零、读后感美国风险投资家 Naval Ravikant 通过一个很长的推特阐明了他的商业观，感觉挺精辟。积累独到的知识(无法批量复制的)，为社会提供他们需要的。财富不是靠出卖时间获得，应该通过杠杆(资本、人力、一本万利的工具&lt;写书等&gt;)去积累。选择一个可以长期从事的行业，寻找一批可以长期共事的人。\n一、原文(及翻译)\nSeek wealth, not money or status. Wealth is having assets that earn while you sleep. Money is how we transfer time and wealth. Status is your place in the social hierarchy.\n\n去寻求财富，而非金钱或地位。财富就是你拥有资产，而资产在你睡觉的时候都还在为你赚钱；金钱是我们转换时间和财富的工具；身份是你在社会等级体系里所处的位置。\n\n\nUnderstand that ethical wealth creation is possible. If you secretly despise wealth, it will elude you.\n\n要明白一件事：一个人完全可以不靠坑蒙拐骗站着赚取财富。如果你在暗中鄙视财富，那么财富也会躲着你。\n\n\nIgnore people playing status games. They gain status by attacking people playing wealth creation games.\n\n别去理会那些热衷于玩身份游戏的人，他们通过攻击那些创造财富的人以获得自己的身份。\n\n\nYou’re not going to get rich renting out your time. You must own equity — a piece of a business — to gain your financial freedom.\n\n你不会通过出租自己的时间而变得富有。你必须拥有产权，也就是生意的一部分，以此才能赢得个人财务自由。\n\n\n\n\n\nYou will get rich by giving society what it wants but does not yet know how to get. At scale.\n\n提供社会大众想要但是他们还不知道如何获取的东西，你就会因此而致富。但有一点：你必须规模化地供应社会。\n\n\nPick an industry where you can play long term games with long term people.\n\n选择一个你可以长期从事的产业，寻找一批可以一起长期共事的人。\n\n\nThe Internet has massively broadened the possible space of careers. Most people haven’t figured this out yet.\n\n互联网极大拓展了一个人职业生涯的可能性。绝大多数人对此毫无认知。\n\n\nPlay iterated games. All the returns in life, whether in wealth, relationships, or knowledge, come from compound interest.\n\n玩就玩复利游戏。无论是财富，人际关系或者是知识，所有你人生里获得的回报，都来自复利。\n\n\nPick business partners with high intelligence, energy, and, above all, integrity.\n\n在选择商业合作伙伴的时候，选择那些高智商、精力旺盛的家伙，但在这一切之上，他应该是个正直诚实的人。\n\n\nDon’t partner with cynics and pessimists. Their beliefs are self-fulfilling.\n\n不要和愤世嫉俗者和悲观主义者合作，因为他们会任由坏事发生，以此证明他们的负面看法是正确的。\n\n\nLearn to sell. Learn to build. If you can do both, you will be unstoppable.\n\n学会如何销售，学会如何创建。如果你同时能做到这两件事，你的成功将无可阻挡。\n\n\nArm yourself with specific knowledge, accountability, and leverage.\n\n用独到知识，责任感和杠杆武装自己。\n\n\nSpecific knowledge is knowledge that you cannot be trained for. If society can train you, it can train someone else, and replace you.\n\n独到知识是那种不可以通过培训而获得的知识。这是因为，如果这种知识可以经由培训而得，那么其他人同样也可以，并且以此取代你。\n\n\nSpecific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.\n\n在真正的好奇心和热情驱使你前进的路上，你更有可能获得独到知识，而不是在追逐潮流热点的闻风起舞脚步里。\n\n\nBuilding specific knowledge will feel like play to you but will look like work to others.\n\n创建独到知识的过程对于你就像是在玩，而对于别人则像是工作。\n\n\nWhen specific knowledge is taught, it’s through apprenticeships, not schools.\n\n不能通过学校教育教会一个人独到知识，它只能通过学徒制口传身教。\n\n\nSpecific knowledge is often highly technical or creative. It cannot be outsourced or automated.\n\n独到知识通常极富技术性和创造性，因此它不能被外包或自动实现。\n\n\nEmbrace accountability, and take business risks under your own name. Society will reward you with responsibility, equity, and leverage.\n\n拥抱责任感，押上自己的声誉以承担商业风险。社会也会以责任，产权和杠杆作为回报。\n\n\nThe most accountable people have singular, public, and risky brands: Oprah, Trump, Kanye, Elon.\n\n最具责任感的人都具有独一无二的、世人皆知的、敢于冒险的个性特征，如奥普拉、川普、坎耶、埃隆。\n\n\n“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes\n\n只要给我一根足够长的杠杆，一处可以立足的地方，我就能撬起地球。——阿基米德\n\n\nFortunes require leverage. Business leverage comes from capital, people, and products with no marginal cost of replication (code and media).\n\n财富增长需要使用杠杆。商业杠杆有三个来源：1、资本；2、人力；3、复制起来边际成本为零的产品（如：代码和媒体）。\n\n\nCapital means money. To raise money, apply your specific knowledge, with accountability, and show resulting good judgment.\n\n资本的意思就是钱。想要融资，那就运用你的独到知识，配合你责任感，展示出你良好的判断力。\n\n\nLabor means people working for you. It’s the oldest and most fought-over form of leverage. Labor leverage will impress your parents, but don’t waste your life chasing it.\n\n人力指的就是为你干活的人，它是最古老也是争夺最激烈的杠杆。人力杠杆会让你父母因为你手下有许多人为你工作而感到骄傲，但你不要浪费生命去追求这一点。\n\n\nCapital and labor are permissioned leverage. Everyone is chasing capital, but someone has to give it to you. Everyone is trying to lead, but someone has to follow you.\n\n资本和劳动力是需要征得许可才能使用的杠杆。每个人都在追逐资本，但总得有个什么人给你才行；每个人都想要领导其它人，但总得有什么人愿意跟着你才行。\n\n\nCode and media are permissionless leverage. They’re the leverage behind the newly rich. You can create software and media that works for you while you sleep.\n\n代码和媒体是无需要许可即可使用的杠杆。它们是新贵人群背后的杠杆，你可以通过自己创建的软件和媒体，在睡觉时仍然为你干活。\n\n\nAn army of robots is freely available — it’s just packed in data centers for heat and space efficiency. Use it.\n\n一支机器人军团已经集结待命，只是为了节约空间和热效能，它们被打包放进数据中心。去用吧。\n\n\nIf you can’t code, write books and blogs, record videos and podcasts.\n\n如果你不会编程，那你还可以写书和博客，或者做视频或者音频节目。\n\n\nLeverage is a force multiplier for your judgement.\n\n杠杆能够成倍地放大你的判断力（所产生的效能）。\n\n\nJudgement requires experience, but can be built faster by learning foundational skills.\n\n判断力需要经验，但它可以通过学习基本技能的方法更快速地建立起来。\n\n\nThere is no skill called “business.” Avoid business magazines and business classes.\n\n并不存在一种叫做“商业”的能力。尽量避开商业杂志和商业课程。\n\n\nStudy microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.\n\n去学习微观经济学、博弈论、心理学、说服术、伦理学、数学和计算机科学。\n\n\nReading is faster than listening. Doing is faster than watching.\n\n读比听快，做比看快。\n\n\nYou should be too busy to “do coffee,” while still keeping an uncluttered calendar.\n\n你应该忙得没有社交的时间才对，与此同时你应该始终保证日程安排井井有条。\n\n\nSet and enforce an aspirational personal hourly rate. If fixing a problem will save less than your hourly rate, ignore it. If outsourcing a task will cost less than your hourly rate, outsource it.\n\n你应该为自己设定一个有抱负的个人时薪数，并且坚持执行。如果解决一个问题所能节省下来的成本低于你的个人时薪，那就忽略这个问题好了；如果一项任务的外包成本低于你的个人时薪，就把它外包出去。\n\n\nWork as hard as you can. Even though who you work with and what you work on are more important than how hard you work.\n\n尽管你跟谁一起工作、做什么工作，要远比你的努力程度更加重要。但还是要倾尽全力去工作。\n\n\nBecome the best in the world at what you do. Keep redefining what you do until this is true.\n\n你所做的事情，要努力做到世界最好。不断重新定义你在做什么，直到真的做到世界最好。\n\n\nThere are no get rich quick schemes. That’s just someone else getting rich off you.\n\n这个世界上并没有快速赚钱致富的方法，如果你想要找寻这种方法，那它只会让别人从你身上赚钱致富。\n\n\nApply specific knowledge, with leverage, and eventually you will get what you deserve.\n\n运用你的独到知识，配合上杠杆，最终你会得到你应该得到的东西。\n\n\nWhen you’re finally wealthy, you’ll realize that it wasn’t what you were seeking in the first place. But that’s for another day.\n\n终有一天当你变得富有，你会发现那一切并不是你最开始想要的东西。但是那就是另外一回事了。\n\n\n\n二、译者注释\n财富就是你睡着觉，你的资产也在为你继续赚钱。这是一个越来越被广泛接受的定义。Naval Ravikant 是硅谷狂热的数字货币支持者，所以，他的话另有所指。从前后文来看，他所谓的资产并不等于是传统意义上的房产、股票、收藏，而是偏向于他反复提及的：软件和媒体。\n\n出租时间概念，许多人理解为打工，认为打工就是出租自己的时间以换取金钱。其实并非如此，Naval 所指的出租时间概念，指的是一个人的财富增长，是否直接关系到他的时间。一个小卖部的老板，他并不为谁打工，但是他的财富增长需要他长时间守在店里，因此，他依然是出租时间换钱。但一个淘宝点卡店老板则不同，他的点卡销售是全自动的，不需要 24 小时守着，而且也不需要只做这一样生意。这就是Naval所谓互联网拓宽了个人职业生涯的一个例子。\n\nequity 我翻译为产权，不是一个很好的翻法。但是 Naval 前文提到 assets，很明显，作为投资人他非常清楚地知道这两个字眼之间的区别。equity 无论是翻译为股票、权益或者是资产，原文说“You must own equity — a piece of a business — to gain your financial freedom.”，这是和出租时间概念做对应的。出租时间的人，在商业链条里作为生产资料出现，不拥有任何产权，也就无法通过商业行为获利，所以，我这里勉强翻译为产权。\n\nspecific knowledge 我翻译为独到知识，没有翻译为特定知识、专业知识或者是特殊知识。原因是在我的理解中，specific knowledge 不是书本知识，也不是学校教授的知识，更不可能在网上免费获取。一方面，它只能提供自己实践来获取；另一方面，它只能通过前人口耳相传。这种知识是做成一件事情的关键，属于知识体系中不共的那一部分。所以，我翻译为独到知识。\n\n“Give me a lever long enough, and a place to stand, and I will move the earth.” — Archimedes 这话不像是阿基米德说的。更像是一次抬杠的结果：\n\n\n“给我一个支点，我就能撬起地球！”“那么，您站在哪儿呢？”“好吧，给我一个支点，再给我一个站立的地方，我就能撬起地球。”“那么，您用空气就能撬起地球了？”“好吧，给我一根足够长的杠杆，一处可以立足的地方，我就可以翘起地球！”“那么，阿基米德先生，支点又不需要了吗？”“滚！”\n\naccountability 我本想翻译为“靠谱程度”，想想还是算了。\n\n号称是“四十条语录”，但是我就找见了 39 条。\n\n结合上下文看，Leverage 一词始终翻译为“杠杆”其实也不大对头。Naval 一再强调代码、博客、播客、视频节目，我觉得 Leverage 在他那里，有些时候应该相当于是个人影响力的代名词，或者可以简单理解为放大器。\n\n\n三、参考：\n科技爱好者周刊-107期\n如何不靠运气致富(和菜头翻译)\n\n","categories":["随说"],"tags":["财富"]},{"title":"sql行转列，列转行","url":"/20170613-sql%E8%A1%8C%E8%BD%AC%E5%88%97%EF%BC%8C%E5%88%97%E8%BD%AC%E8%A1%8C/","content":"有时候需要行转列或者列转行\n在Oracle 11g中，Oracle 又增加了2个查询：pivot（行转列） 和unpivot（列转行）\n下面是在mysql中的操作：\nmysql&gt; select * from test;+------+------+--------+| id   | age  | weigth |+------+------+--------+|    1 |    1 |      3 ||    1 |    2 |      2 ||    1 |    3 |      1 ||    2 |    5 |      6 |+------+------+--------+4 rows in set (0.00 sec)#根据ID分组mysql&gt; select group_concat(age) from test group by id;+-------------------+| group_concat(age) |+-------------------+| 1,2,3             || 5                 |+-------------------+2 rows in set (0.01 sec)#不分组mysql&gt; select group_concat(age) from test;+-------------------+| group_concat(age) |+-------------------+| 1,2,3,5           |+-------------------+1 row in set (0.00 sec)\n","categories":["sql"],"tags":["mysql","oracle"]},{"title":"STAR面试/简历","url":"/20240818-star-interview/","content":"0. 背景有天早上，许久没联系的同事说要找我看看简历。于是约着周六在公主坟附近的星巴克聊了 2 小时。然后今天在《技术领导力:程序员如何才能带好团队》看到 STAR 面试，就是就想着挖个坑讲讲。\n1. STAR 介绍STAR 是 SITUATION(背景), TASK(任务)、ACTION(行动)和RESULT(结果)四个英文单词的首字母组合。在招聘面试中, 仅通过应聘者的简历无法全面了解应聘者的知识、经验、技能、工作风格、性格特点等，而使用STAR技巧则可以对应聘者做出全面而客观的评价。\n1.1 背景(SITUATION)\n通过不断提出与工作业绩有关的背景问题，可以全面了解该应聘者获得优秀业绩的前提因素，从而获知所取得的业绩有多少是与应聘者个人有直接关联的，有多少是与市场的状况、行业的特点有关的。\n1.2 任务(TASK)每项任务的具体内容是什么。通过这些可以了解应聘者的工作经历和经验，以确定他所从事的工作与获得的经验是否适合现在的职位。\n1.3 行动(ACTION)了解他是如何完成工作的，都采取了哪些行动，所采取的行动是如何帮助他完成工作的。通过这些，可以进一步了解他的工作方式、思维方式和行为方式。\n1.4 结果(RESULT)每项任务在采取了行动之后的结果是什么，是好还是不好，好是因为什么，不好又是因为什么。\n2. 简历一般来讲，看简历第一页前面一部分，就决定是要要留下。所以我们该怎么去呈现呢？\n我觉得 STAR 法则也是很值得参考的。要讲清楚背景：业务+技术，然后讲自己是负哪一块(单纯实现?还是设计&#x2F;实现&#x2F;推动&#x2F;带头)再讲讲技术方案是怎么来的？为什么会这么选？都有哪些备选方案？当前有哪些不足？以及怎么改进？最后讲一讲业务技术上的收益(用户体验&#x2F;提效&#x2F;GMV&#x2F;收入等等)\n还有就是得站在招聘者的角度去思考。假如是自己招人，你希望招什么样的人？优秀的工程师有什么特质？思考这些之后，那么怎么结合实际，把自己的优点呈现出来\n","categories":["成长"],"tags":["成长"]},{"title":"su  Authentication failure","url":"/20170401-su%20%20Authentication%20failure/","content":"想要获取root权限，提示如下\nhisen@ubuntu:/var/lib$ suPassword: su: Authentication failure\n解决办法\nhisen@ubuntu:$ sudo passwd rootEnter new UNIX password: Retype new UNIX password: passwd: password updated successfullyhisen@ubuntu:$ suPassword: root@ubuntu:# cd mysql\n重新设置一下密码即可，我这边装的时候设置的用户是：hisen\n刚刚重新设置的密码就是你装系统的时候设置的用户密码。\n","categories":["linux"],"tags":["linux"]},{"title":"给群晖 NAS DS918+ 添加 RTL-8156B 2.5G 无线网卡","url":"/20221119-synology-DS918-add-2500M-RTL8156B-usb-network-cart/","content":"0. 前言就这个群晖的网卡，困扰了我两天。因为按照之后没法在系统控制面板里面找到对应的网卡。就连 GitHub 上驱动的作者都说不支持 RTL-8156B(详见：GitHub-issue) 的外置网卡。但是我想那么多人都买了这种网卡，并且成功了，于是周末到处搜，最终找到了办法。\n可能这是 DS918+ 之类才会遇到的问题\n1. 获取 root 权限搜索引擎很多\n2. 安装驱动2.1 查询群晖架构群晖官网查询NASCPU架构\n2.2 下载对应驱动https://github.com/bb-qq/r8152/releases我这里是 DM7 的系统，下载的最新版本下载到 PC 上即可，不用下载到 NAS\n\n\n2.3 安装下载完成，在群晖套件中心，手动安装，选择刚刚下载的驱动文件安装第一次安装会失败(GitHub 上也有说明)，需要执行如下命令\nsudo install -m 4755 -o root -D /var/packages/r8152/target/r8152/spk_su /opt/sbin/spk_su\n修改之后，再次安装即可完成。\n3. 修改配置由于群晖918+等型号对 lan 口限制了最大 2 个，这里需要修改两个配置文件。都是找到 maxlanport&#x3D;“2” 修改数字为大于 2 的数字即可。\n3.1 其一vi /etc.defaults/synoinfo.conf# 我这里的修改maxlanport=“4”\n3.2 其二vi /etc/synoinfo.conf# 这个文件有点大，好好找找，我的是在 77% 左右maxlanport=&quot;4&quot;\n\n4. 信息中心-网络群晖 DS918+，USB 外置网卡安装好驱动，设置好 maxlan 之后，系统命令行可以识别网卡，并且可以获取 IPv6 地址，但是没有 IPv4 的地址\nroot@HiSEN-DS:~# ifconfigeth2      Link encap:Ethernet  HWaddr 00:xx:xx:xx:xx:03            inet6 addr: fd7e:a5c4:268d:0:2e0:ffff:fe68:80/64 Scope:Global          inet6 addr: fe80::2e0:ffff:fe68:80/64 Scope:Link          inet6 addr: 2408:8207:ffff:6700:2e0:ffff:fe68:80/64 Scope:Global          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:4 errors:0 dropped:0 overruns:0 frame:0          TX packets:9 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:1175 (1.1 KiB)  TX bytes:1446 (1.4 KiB)\n5. 控制面板-网络-网络界面设置局域网 3 (外置网卡) 为自动获取 IP 后，网络正常，系统控制面积显示正常\nroot@DS:~# ifconfigeth2      Link encap:Ethernet  HWaddr 00:xx:xx:xx:xx:03          inet addr:10.0.0.xxx  Bcast:10.0.0.255  Mask:255.255.255.0          inet6 addr: fd7e:a5c4:268d:0:2e0:ffff:fe68:80/64 Scope:Global          inet6 addr: fe80::2e0:ffff:fe68:80/64 Scope:Link          inet6 addr: 2408:8207:ffff:6700:2e0:ffff:fe68:80/64 Scope:Global          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:1419 errors:0 dropped:0 overruns:0 frame:0          TX packets:312 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:465252 (454.3 KiB)  TX bytes:71449 (69.7 KiB)\n\n6. 参考群晖DSM系统“套件法”安装8156B芯片网卡驱动升級2.5G網卡的一些疑難雜症\n","categories":["homelab"],"tags":["NAS"]},{"title":"计算机科学的自我修炼","url":"/20210219-teach-or-improve-yourself-computer-science/","content":"零、背景在近两年高并发系统 DevOps 的过程中，遇到了很多底层的问你题，eg: 网络、硬件、虚拟机等，有些现象虽然知其然，但是不知其所以然，书到用时方恨少！抱着深入学习的心态这两年看了一些相关书籍：\n\n\n《计算机网络：自顶向下方法》《操作系统精髓与设计原理》《Java性能优化权威指南》《Redis运维与开发》《性能之巅》\n收获甚大 所以想继续深入学习误打误撞，看到了之前在 GitHub 关注的一个『自学计算机科学』仓库，很赞同下面这个观点\n软件工程师分为两种：\n\n一种充分理解了计算机科学，从而有能力应对充满挑战的创造性工作；\n另一种仅仅凭着对一些高级工具的熟悉而勉强应付。\n\n这两种人都自称软件工程师，都能在职业生涯早期挣到差不多的工资。然而，随着时间流逝，第一种工程师不断成长，所做的事情将会越来越有意义且更为高薪，不论是有价值的商业工作、突破性的开源项目、技术上的领导力或者高质量的个人贡献。\n一、资源1.1 摘要\n\n\n\n科目\n为何要学\n最佳书籍\n最佳视频\n\n\n\n编程\n不要做一个“永远没彻底搞懂”诸如递归等概念的程序员。\n《计算机程序的构造和解释》\nBrian Harvey’s Berkeley CS 61A\n\n\n计算机架构\n如果你对于计算机如何工作没有具体的概念，那么你所做出的所有高级抽象都是空中楼阁。\n《深入理解计算机系统》\nBerkeley CS 61C\n\n\n算法与数据结构\n如果你不懂得如何使用栈、队列、树、图等常见数据结构，遇到有难度的问题时，你将束手无策。\n《算法设计手册》\nSteven Skiena’s lectures\n\n\n数学知识\n计算机科学基本上是应用数学的一个“跑偏的”分支，因此学习数学将会给你带来竞争优势。\n《计算机科学中的数学》\nTom Leighton’s MIT 6.042J\n\n\n操作系统\n你所写的代码，基本上都由操作系统来运行，因此你应当了解其运作的原理。\n《操作系统导论》\nBerkeley CS 162\n\n\n计算机网络\n互联网已然势不可挡：理解工作原理才能解锁全部潜力。\n《计算机网络：自顶向下方法》\nStanford CS 144\n\n\n数据库\n对于多数重要程序，数据是其核心，然而很少人理解数据库系统的工作原理。\n《Readings in Database Systems》 （暂无中译本）\nJoe Hellerstein’s Berkeley CS 186\n\n\n编程语言与编译器\n若你懂得编程语言和编译器如何工作，你就能写出更好的代码，更轻松地学习新的编程语言。\n《Crafting Interpreters》\nAlex Aiken’s course on Lagunita\n\n\n分布式系统\n如今，多数 系统都是分布式的。\n《数据密集型应用系统设计》\nMIT 6.824\n\n\n1.2 详情内容值得一看，真心建议多花功夫学好底层知识。原文：Teach Yourself Computer Science翻译：自学计算机科学\n来自亚马逊 CTO 的博文也值得一看，操作系统经典书籍The OS Classics\n三、相关资源软件工程师面试指引\n","categories":["成长","计算机科学"],"tags":["cs"]},{"title":"MySQL查询违反最左匹配原则，但 explain 显示走索引的疑惑","url":"/20200915-the-puzzle-of-mysql-using-index-which-violation-of-leftmost-matching-principle/","content":"零、本文背景有个朋友抛出一个问题，明显不符合最左匹配原则的 SQL，居然走索引了兜兜转转，嘀咕了好几天，期间也和几个朋友讨论了一下都没有结果，最后还是在 MySQL 的官方文档中找到了原因记录下，也算是一次不错的探索。\n一、问题描述1.1 表结构CREATE TABLE `people_new` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `last_name` varchar(255) NOT NULL,  `first_name` varchar(255) NOT NULL,  `bob` date NOT NULL,  PRIMARY KEY (`id`),  KEY `index_union` (`last_name`,`first_name`,`bob`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT=&#x27;人员-新&#x27;\n1.2 数据mysql&gt; select * from people_new;+----+-----------+------------+------------+| id | last_name | first_name | bob        |+----+-----------+------------+------------+|  1 |  hisen    | yuan       | 2008-08-08 |+----+-----------+------------+------------+1 row in set (0.00 sec)\n1.3 SQL 分析可以看到 Using index但是 possible_keys null 而 key 显示 index_union\nmysql&gt; explain select * from people_new  where bob = &#x27;2008-08-08&#x27; and first_name = &#x27;yuan&#x27;;+----+-------------+------------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+| id | select_type | table      | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra                    |+----+-------------+------------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+|  1 | SIMPLE      | people_new | NULL       | index | NULL          | index_union | 1537    | NULL |    1 |   100.00 | Using where; Using index |+----+-------------+------------+------------+-------+---------------+-------------+---------+------+------+----------+--------------------------+1 row in set, 1 warning (0.00 sec)\n\n二、原因\n1.1 的表结构显示，除了 id，其余三个属性都在 联合索引 中所以通过任何字段查询，返回的字段都被索引覆盖了，构成 覆盖索引 ，由于扫描全部索引会快于全表扫描，所以这时候 sql 不管是不是最左匹配都会走索引(应该是『全索引扫描』)。\n3.1 的表结构中，除了 id ，还有 area 不在联合索引当中，此时破坏了 覆盖索引 ，故不走索引。\nIf the index is a covering index for the queries and can be used to satisfy all data required from the table,only the index tree is scanned. In this case, the Extra column says Using index.An index-only scan usually is faster than ALL because the size of the index usually is smaller than the table data.\n详情：dev.mysql.com\n三、验证3.1 修改后的表结构CREATE TABLE `people_new` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `last_name` varchar(255) NOT NULL,  `first_name` varchar(255) NOT NULL,  `bob` date NOT NULL,  `area` varchar(256) DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `index_union` (`last_name`,`first_name`,`bob`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT=&#x27;人员-新&#x27;\n3.2 修改表结构后的数据mysql&gt; select * from people_new;+----+-----------+------------+------------+------+| id | last_name | first_name | bob        | area |+----+-----------+------------+------------+------+|  1 |  hisen    | yuan       | 2008-08-08 | NULL |+----+-----------+------------+------------+------+1 row in set (0.00 sec)\n3.2 SQL 分析mysql&gt; explain select * from people_new  where bob = &#x27;2008-08-08&#x27; and first_name = &#x27;yuan&#x27;;+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table      | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+|  1 | SIMPLE      | people_new | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using where |+----+-------------+------------+------------+------+---------------+------+---------+------+------+----------+-------------+1 row in set, 1 warning (0.00 sec)\n\n四、总结有时候多和同行交流也能学到很多。带着问题去看官方文档收获会比较大。遇到问题，找到原因，解决问题，印象会深刻。\n","categories":["DB"],"tags":["mysql","index"]},{"title":"缓存那些事儿 - 从组件到实践","url":"/20190429-things-about-caching/","content":"一、为什么用缓存1.1 空间换时间：缓存是针对读多写少的场景典型的以空间换时间的操作空间：内存时间：读内存速度快(相对于读磁盘)\n1.2 局部性原理：这个世界很多事情都符合 2&#x2F;8 原则把热点数据缓存起来就大大提高系统效率\n二、缓存组件介绍2.1 Ehcache\n快速，针对大型高并发系统场景，Ehcache 的多线程机制有相应的优化改善;\n简单，很小的 jar 包，简单配置就可直接使用，单机场景下无需过多的其他服务依赖;\n支持多种的缓存策略，灵活;\n缓存数据有两级：内存和磁盘，与一般的本地内存缓存相比，有了磁盘的存储空间，将可以支持更大量的数据缓存需求;\n具有缓存和缓存管理器的侦听接口，能更简单方便的进行缓存实例的监控管理;\n支持多缓存管理器实例，以及一个实例的多个缓存区域;\n\n2.2 Guava\n自动将 entry 节点加载进缓存结构中；\n当缓存的数据超过设置的最大值时，使用 LRU 算法移除；\n具备根据 entry 节点上次被访问或者写入时间计算它的过期机制；\n缓存的 key 被封装在 WeakReference 引用内；\n缓存的 Value 被封装在W eakReference 或 SoftReference 引用内；\n统计缓存使用过程中命中率、异常率、未命中率等统计数据;\n\n\n\n2.3 Memcache\nmemcache 使用预分配内存池的方式管理内存;\n所有数据存储在物理内存里;\n非阻塞 I&#x2F;O 复用模型，纯 KV 存取操作;\n多线程，效率高，会遇到锁等，上下文切换问题;\n只支持简单 KV 数据类型;\n数据不支持持久化;\n\n2.4 Redis\n临时申请空间，可能导致碎片;\n有 VM 机制，能存储更多数据，超过内存空间后会导致 swap，降低效率;\n非阻塞 I&#x2F;O 复用模型，支持额外 CPU 计算：排序、聚合，会影响 I&#x2F;O 性能;\n单线程，无锁，无上下文切换，单实例无法利用多核性能;\n支持多种数据类型：string &#x2F; hash &#x2F; list &#x2F; set &#x2F; sorted set\n数据支持持久化：AOF(语句增量) &#x2F; RDB(fork全量)\n天然支持高可用分布式方案 sentinel + cluster (故障自动转移+集群)\n\n三、正确使用缓存3.1 读场景先读缓存、再读DB如果是并发读缓存失效，使用分布式锁只允许单次查询，其它等待，超时返回失败\n3.2 写场景cache 指的是删除『缓存』db 指的是『更新&#x2F;删除数据库』\n3.2.1 先 cache 后 db删除缓存成功，更新数据库失败，不影响数据准确性。如果在 cache 与 db 短暂的时间内有访问查询动作(先查缓存，后查 db 并且设置缓存)那么还缓存中还是会存在过期的数据\n3.2.2 先 db 后 cache如果 db 成功，cache 失败，会导致数据不一致。可以让 db cache 在一个事务，cache 失败回滚 db，保证一致性。\n3.2.3 方案总结其实本质上就是个分布式事务问题怎么保证两个操作同时成功&#x2F;失败通过本地事务 &#x2F; 补偿机制 实现会比较好\n四、缓存问题集合4.1 缓存穿透解决方案：当查询到某数据不存在时，缓存假数据，例如：(key,key#);\n4.2 缓存雪崩缓存高可用(集群+主备)循环一致性 Hash，节点组成一个环，如果一个节点挂了，顺着往下走;\n五、参考链接\n架构师之路18年精选100篇 | 缓存部分 - 58沈剑 \n缓存那些事 | 美团技术博客\n\n","categories":["java"],"tags":["java","cache"]},{"title":"关于部署软系统的思考","url":"/20200627-thinking-of-deploy-soft-system/","content":"在 敏捷 + devops 盛行的年代软件部署的频率一般都比较高，一周一迭代、一周两迭代这就需要有良好的工具来支持，更需要良好的机制来避免人为犯错\n工作当中会遇到很多部署导致的问题其中大部分的问题原因是配置问题\n关于部署\n\n开发的时候记录大致改动点\n上线之前按检查列表(团队或个人定义一些常规检查项目)挨个检查\n上线之前写上线步骤列表，部署时做一个人肉机器人，按步骤操作即可\n上线之前写好验证步骤，验证需要的各种权限\n以上做完了最好找相关人员核对一遍，以免遗漏(互备很重要)\n灰度发布(应用启动期间性能抖动问题值得研究)\n\n互备很重要，哪怕对方没有介入开发，简单的按正常流程问你几个问题，也许就会发现漏了什么。\n","categories":["soft"],"tags":["soft"]},{"title":"Redis Cluster slot 分布不均匀问题排查","url":"/20210518-troubleshooting-unbalanced-of-redis-cluster-slots/","content":"零、背景在压测过程中发现有部分 redis cluster 节点内存占用比其它节点高(来自监控)\n内存倾斜的隐患\n\n更早达到容量瓶颈，触发淘汰策略\n承担更多的负载( 读 &#x2F; 写 )，导致节点压力增大，可能触发宕机。\n\n一、问题redis cluster slot 分配不均匀redis cluster 集群内存分配算法的缺陷问题算法：单节点内存 &#x3D; 集群总内存 &#x2F; 节点数\n合理算法：单节点内存 &#x3D; (集群总内容 &#x2F; slot 数量) * 当前节点 slot 数量\n二、排查2.1 key 分布问题？\nkey 根据 crc16 计算之后比较均匀，排除 key 分布不均在 key 均匀的情况下，考虑 slot 分配问题\n2.2 slot 分布问题？查找 slot 分布redis 控制台执行：cluster slots取最后一个节点的 rely 日志如下(日志含义见参考链接)\n(0)(0)10137   (1)10463   (2)(0)192.25.238.97      (1)2048      (2)1ab1735417e34e1fb38aa19958e2375498158be8   (3)(0)192.25.239.118      (1)2049      (2)2b444bb8ece6edcf4881cfacb60def2eb3bfba85(1)(0)6540   (1)6866   (2)(0)192.168.184.118      (1)2048      (2)464c059fd4354b72cd277a7aaf6159a2682e47ff   (3)(0)192.168.198.232      (1)2048      (2)c4ae0536b5a9157b43516e26c4c77ca9e431005a(2)(0)1308   (1)1634   (2)(0)192.168.197.41      (1)2048      (2)bb0b682b4eed16f773ed7b0d2cf430ac4e776624   (3)(0)192.25.222.250      (1)2048      (2)098251c97fb147b7aee8143ced13c742ec3115a9(3)(0)8502   (1)8828   (2)(0)192.168.184.111      (1)2048      (2)3680ab0d0961e4dda6f9a35eb4c72cbcc04bba3b   (3)(0)192.168.176.75      (1)2048      (2)99d64ca4bf375460537a296ce0bdab2374c8487c(4)(0)14388   (1)14714   (2)(0)192.25.239.116      (1)2048      (2)37d438fc43097bab896e04589b10659c2898c56b   (3)(0)192.168.184.113      (1)2048      (2)2697f554dac4c6b6452239b5f3f192052504431f(5)(0)1962   (1)2288   (2)(0)192.168.198.241      (1)2049      (2)7c323af2d42df59cb172c1f2989fdb47972c4b6b   (3)(0)192.168.184.112      (1)2048      (2)94f67ff376efbecf3d84905dbfe6d9e8a5c9cf83(6)(0)0   (1)326   (2)(0)192.168.197.9      (1)2048      (2)510edbf404ed2b24aeeff53f9d8f43c6404d62c0   (3)(0)192.168.198.249      (1)5010      (2)a150d1f3671d8a5e42c238e900a23031693ddd32(7)(0)12426   (1)12752   (2)(0)192.168.198.240      (1)5010      (2)cb2c653239757df27da883dc024e87a8f11890f0   (3)(0)192.168.197.41      (1)2049      (2)ed4a2925e913bc2773cd3a4c13d48deac7f423fa(8)(0)4251   (1)4577   (2)(0)192.25.239.105      (1)2048      (2)f2eb3bb1afc0d9345173d1eb2aaa675161f5d675   (3)(0)192.168.198.242      (1)2048      (2)67a2926615eb6e4e4f850f59f78f670010ef573a(9)(0)9156   (1)9482   (2)(0)192.25.239.107      (1)5010      (2)4806e385ba1b193b48c0c6a8dd35e5d8a5738257   (3)(0)192.25.239.105      (1)2048      (2)c1490e0c9963628972be63339f032c63191f1897(10)(0)6867   (1)7193   (2)(0)192.168.184.115      (1)2048      (2)2339d951c551c45daf84c147acaf6e6854f66f8c   (3)(0)192.25.222.250      (1)2049      (2)cd6e7d09828b8d795afe671c39a0312b3d6859fe(11)(0)2616   (1)2942   (2)(0)192.168.198.234      (1)2048      (2)e5bfd81c7a0df2ec29b3ac4ce188795881b2bc1e   (3)(0)192.25.238.96      (1)2049      (2)513edbe433f180924500db83ef155426e7f2f040(12)(0)5559   (1)5885   (2)(0)192.168.198.252      (1)2048      (2)515990729e830f0f75e3dc8179438d43c6c7c9b7   (3)(0)192.25.238.92      (1)2048      (2)5328403d6ecd5272c51250977cc1af7de3f16407(13)(0)15369   (1)15695   (2)(0)192.168.176.78      (1)2049      (2)a140264d0aefdbb9b99c961c0c223266fa90129d   (3)(0)192.168.197.32      (1)2049      (2)5fbc13a478470e14006500e38fa032472ec0da50(14)(0)12753   (1)13079   (2)(0)192.168.198.249      (1)2049      (2)120c04813a4f2db04bfc890874a5cf4e7ce47e15   (3)(0)192.168.197.9      (1)2048      (2)e8ca0053b9a99684f683202d68994cf8b28f26e0(15)(0)4905   (1)5231   (2)(0)192.25.239.120      (1)2048      (2)e1a5f230ad1a7716c4e04bc785fcb001e7841b7f   (3)(0)192.168.176.76      (1)2049      (2)c370b87def3a5533ca436ac17ed22d2d5ef64cf7(16)(0)15696   (1)16022   (2)(0)192.168.197.24      (1)2048      (2)ebad5e02b596b81431e7e35d80687b94eb4f495b   (3)(0)192.168.176.77      (1)5013      (2)96771bd26c4f0f3af5a1cb3de4de6467e07f1a6d(17)(0)11118   (1)11444   (2)(0)192.168.198.147      (1)2049      (2)5e16b0661d43a03254fe0c9a97a21beada5665eb   (3)(0)192.168.184.109      (1)5010      (2)c132bdd8ab5c38d4cce4bee4ffc1a298e75d5538(18)(0)16023   (1)16383   (2)(0)192.168.176.76      (1)2048      (2)e9b9b9354d6c77a980c0da35bef89b26042b716d   (3)(0)192.168.198.146      (1)2048      (2)1ca744d6e5c24d3f2c64eca1dec65eea8545ce8b(19)(0)4578   (1)4904   (2)(0)192.25.239.104      (1)2048      (2)0aea965323c78cdefb3e8b4e03955b9651c719b6   (3)(0)192.168.198.240      (1)2049      (2)365350cfa7621749e2c696d84d32d2228122fdc6(20)(0)10464   (1)10790   (2)(0)192.168.198.232      (1)2048      (2)2fe68c5065aefc24ddcc747071dd65c6cadd427b   (3)(0)192.168.184.118      (1)2049      (2)bdc2191de10b7d825f359922e3e31ce328c0a972(21)(0)14061   (1)14387   (2)(0)192.168.198.231      (1)2049      (2)7a47f437951b03a95460924ffd349b3ecfb05bc7   (3)(0)192.168.184.114      (1)2048      (2)bfebcd3837ccf9df6989be91951087cb7351404c(22)(0)9810   (1)10136   (2)(0)192.168.184.116      (1)2048      (2)3caff203db4214bea1f2bcbc2935bb3e2273ac72   (3)(0)192.25.223.2      (1)2048      (2)d2fe724704165a35eef6541f75cb2ba5245472fa(23)(0)327   (1)653   (2)(0)192.25.238.90      (1)2049      (2)6254a81f003cce2cb66222dc312c0ad4ee0a900a   (3)(0)192.25.223.2      (1)2049      (2)7781d87ca77b51fcd07c8d0956ab350e3db3ba1c(24)(0)9483   (1)9809   (2)(0)192.168.198.254      (1)2048      (2)a0acf25a9487c3fa6fc74af8ba57cc50d1b1a95c   (3)(0)192.25.239.119      (1)2048      (2)e05f23f53bad3f8ccc7ae4f9080426e289350557(25)(0)12099   (1)12425   (2)(0)192.168.184.110      (1)2048      (2)39d6559849aa2d00b560cb554cfa79a30ee3ede1   (3)(0)192.168.198.247      (1)5010      (2)fe6696fa4333b4776ed5ee38b93380a21755eaa0(26)(0)3924   (1)4250   (2)(0)192.168.198.180      (1)2048      (2)ba944b0643a2ad68033d129d78c1dee805d2191a   (3)(0)192.25.239.121      (1)2049      (2)b5b020b3105be1e4a49c57d54647da6797a0a3cc(27)(0)14715   (1)15041   (2)(0)192.168.198.147      (1)2048      (2)937e58683236b2708fdc6ef77dd08e66ef7e7ad5   (3)(0)192.25.239.120      (1)2048      (2)274760f1e7e84bd14593b43f95965546f4cb34f5(28)(0)1635   (1)1961   (2)(0)192.168.198.239      (1)2048      (2)ae4dc5d4d544dde49f177554c89e2001727d99e4   (3)(0)192.168.198.250      (1)2048      (2)bea5260033bac6fb7ab67a444f9a1d0e8c9f93b9(29)(0)5886   (1)6212   (2)(0)192.25.239.116      (1)2049      (2)7c9f26573b5a79b77d9089ed7e5783f47f6d030d   (3)(0)192.25.239.104      (1)2048      (2)5c999bc681e6751ec576049db73c3bee2717f8b6(30)(0)3270   (1)3596   (2)(0)192.168.198.179      (1)2048      (2)addeda3c397b1d6ca21996be33435f4a65ca7686   (3)(0)192.168.198.231      (1)5010      (2)1d78a81025acdc123f04680a30a80cff6258e909(31)(0)2289   (1)2615   (2)(0)192.25.239.117      (1)2049      (2)b8ff018e1810697710963e0c4a17faca2b3b6421   (3)(0)192.168.184.111      (1)2049      (2)f7cc831c676ec19560f6ea779f86971bd227ba7f(32)(0)6213   (1)6539   (2)(0)192.168.184.113      (1)2048      (2)ee943d8aec010e34fe1b573826d65cc9e1f14fce   (3)(0)192.168.198.242      (1)2049      (2)bfa424b2f9d4e476c3985025f5bf8bdb6625b74a(33)(0)654   (1)980   (2)(0)192.25.239.106      (1)5010      (2)fa13eedd26af4e0364f56b1604cef9865afde98d   (3)(0)192.168.198.251      (1)2049      (2)ea87dd7cbf8b8cbeee37a3d482493b5fc41a755b(34)(0)2943   (1)3269   (2)(0)192.25.239.118      (1)5010      (2)150932a7e4f0020b99c50312c8cec9d07d7aabcf   (3)(0)192.25.239.121      (1)5010      (2)816d511dcab3f7d9e2068401ba5958e01f2212dd(35)(0)8175   (1)8501   (2)(0)192.168.198.148      (1)2048      (2)34d51673796ab652da7e312cff119296dae1d3bb   (3)(0)192.168.197.28      (1)2048      (2)e1f48544722bbb62d1fb8910a6a4b00d9ccbd09b(36)(0)981   (1)1307   (2)(0)192.168.197.32      (1)5010      (2)41ea02b87652650c3ba2f085849fb6ac2169d897   (3)(0)192.168.197.28      (1)2049      (2)9717393eb89ab32126263741fd250198e378023c(37)(0)5232   (1)5558   (2)(0)192.168.184.109      (1)2049      (2)96a728eece26f6f200b26ff9ddecae3fb5b8df11   (3)(0)192.25.239.117      (1)2048      (2)69f84dd28d8c254732a4f0d5e5fd56c60c58b7fa(38)(0)3597   (1)3923   (2)(0)192.168.198.146      (1)2048      (2)526a0bc43f480738c704ea745f5377258c0e3cdb   (3)(0)192.168.176.78      (1)5010      (2)f54b7898236acf827c53277f22fc3dcadcd37602(39)(0)15042   (1)15368   (2)(0)192.168.197.37      (1)2048      (2)57ceee2905d66bd5863acae5422bf9e39afa971d   (3)(0)192.168.198.179      (1)2048      (2)55192b8693c15df7f11cffc788f2043275886002(40)(0)10791   (1)11117   (2)(0)192.25.222.249      (1)2048      (2)3c9b5f682360324951435b987489fbc2e4e5bfc3   (3)(0)192.168.198.251      (1)2048      (2)2dcf8603ecbdf43d18112dcaf06d3f9321bc2e0c(41)(0)7194   (1)7520   (2)(0)192.168.184.112      (1)2048      (2)8a77d41c2bb0a0672654baecfdee52592bb04050   (3)(0)192.25.238.96      (1)2048      (2)8632629188cb269a900677ec0dc395cb292c1e2e(42)(0)8829   (1)9155   (2)(0)192.168.198.241      (1)2048      (2)37684e5201b0fb50eaf184235a87f2e6a359dd01   (3)(0)192.168.184.115      (1)2048      (2)4684a38fa0b4df0b21f0d777b91300afcace551a(43)(0)7848   (1)8174   (2)(0)192.168.184.114      (1)2048      (2)a6f9c01f4b3b2df4b4993f5745b78d1307d6ea81   (3)(0)192.168.197.37      (1)2049      (2)51e3568c115be10067d9e808d094f71f96c92647(44)(0)13734   (1)14060   (2)(0)192.168.198.182      (1)2048      (2)6acca7f88ea98f8ba073f423707d7692592053f3   (3)(0)192.25.238.90      (1)2048      (2)84965ce2c21634a7ce9405374e36e80fa0e4521b(45)(0)13407   (1)13733   (2)(0)192.168.184.117      (1)2048      (2)2fad26dc888fc776dec4fd33e167c860bd76d64e   (3)(0)192.25.239.181      (1)5090      (2)c91e8c9f8aea8424683258e18c5aa93ec45bb216(46)(0)11772   (1)12098   (2)(0)192.168.199.1      (1)2048      (2)77c4678d6eddc2f8eb328fa02705d99a6c27a1ca   (3)(0)192.25.239.176      (1)5074      (2)21106c8a361da9c3cf494857e168c5b640eca234(47)(0)7521   (1)7847   (2)(0)192.25.223.1      (1)2048      (2)ef990477dd7eb4b3c9915bf31b300e87d8fa9b29   (3)(0)192.25.239.106      (1)2049      (2)b0a2975c5cc56a69b3bc63b348a88252fa09ec1a(48)(0)13080   (1)13406   (2)(0)192.168.198.182      (1)2049      (2)01baf618cc0945c5a379a37ff92e4b1e1eeefac8   (3)(0)192.168.184.116      (1)2048      (2)041464f26f3e7bdb277d0624ba7003bb447f227b(49)(0)11445   (1)11771   (2)(0)192.25.239.107      (1)2049      (2)0495711f467db7ef747eeb9a24f16b7a5ce0c4ff   (3)(0)192.168.198.234      (1)2048      (2)34d285e446013db478a030f3172fce256b6d4ba8 reply from: 192.168.197.41:2048\n通过 awk 计算每个节点管理的槽 ( slot ) 数量\n# 把上面的日志粘贴到 slots 文件中$ vi /tmp/slots# 计算每个节点的槽数量并且排序，输出结果$ cat /tmp/slots | awk &#x27;&#123;if((NR % 8 == 1) || (NR % 8 == 2)) print $0&#125;&#x27; | awk &#x27;&#123;if(NR % 2 == 1) print $0,getline,$0&#125;&#x27; | sed &#x27;s/)/ /g&#x27; | awk &#x27;&#123;print $6,$3,$6-$3&#125;&#x27; | sort -k 3 -r | head -n 316383 16023 3609809 9483 326980 654 326# 根据槽号反向查找$ cat /tmp/slots| grep 16023 -A8(18)(0)16023   (1)16383   (2)(0)192.168.176.76      (1)2049      (2)e9b9b9354d6c77a980c0da35bef89b26042b716d   (3)(0)192.168.198.146      (1)2048      (2)1ca744d6e5c24d3f2c64eca1dec65eea8545ce8b(19)(0)4578\n由于本案例当中，大部分节点都是包含 326 个 slot，问题节点明显偏多 360\n2.2.1 相关命令解释awk NR 代表行号awk getline 获取下一行，并且赋值到 $0 (本意是代表当前行数据)。sort -k 3 -r，以第三列排序(-k 3)，倒序输出(-r)head -n 3，输出前三行\n三、结论根据上述假设，经过验证，发现确实是由于 slot 分配不均匀导致\n四、改进人工手动调整 slot 较多节点的内存，使之达到与其它节点内存占用水平。提示：redis 可以通过修改参数( maxmemory，单位 byte )调整最大内存。\n五、参考\nredis cluser slots 报文解析\nawk getline 函数\n\n","categories":["database"],"tags":["redis"]},{"title":"try redis - redis官方教程练习","url":"/20170519-try%20redis%20-%20redis%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E7%BB%83%E4%B9%A0/","content":"这里主要是介绍了几种redis支持的数据结构，以及操作方法\n官网地址：http://try.redis.io/\n我的redis是安装在linux虚拟机，通过Xshell操作，显示可能跟cmd不大一样\n但是操作都是一样的\n具体操作如下：\n\n#连接redis客户端hisen@ubuntu:~$ redis-cli#存放数据127.0.0.1:6379&gt; set &#x27;connections&#x27; &#x27;10&#x27;OK127.0.0.1:6379&gt; get connections&quot;10&quot;#自增1方法：incr127.0.0.1:6379&gt; incr connections(integer) 11127.0.0.1:6379&gt; incr connections(integer) 12#删除127.0.0.1:6379&gt; del conncetions(integer) 0#不存在才存放数据 setnx：SET-if-not-exists127.0.0.1:6379&gt; SETNX hisen hello(integer) 1127.0.0.1:6379&gt; get hisen&quot;hello&quot;127.0.0.1:6379&gt; SETNX hisen hello(integer) 0#添加数据127.0.0.1:6379&gt; set resource:lock &quot;redis demo&quot;OK#设置超时时间，单位秒127.0.0.1:6379&gt; expire resource:lock 120(integer) 1#查看剩余时间127.0.0.1:6379&gt; ttl resource:lock(integer) 85127.0.0.1:6379&gt; ttl resource:lock(integer) 81127.0.0.1:6379&gt; ttl resource:lock(integer) 57#List集合#放在list最后（right 右边）127.0.0.1:6379&gt; rpush friends &quot;Alice&quot;(integer) 1127.0.0.1:6379&gt; rpush friends &quot;Bob&quot;(integer) 2#放在最前（left 左边）127.0.0.1:6379&gt; lpush friends &quot;Sam&quot;(integer) 3#获取所有数据127.0.0.1:6379&gt; lrange friends 0 -11) &quot;Sam&quot;2) &quot;Alice&quot;3) &quot;Bob&quot;#获取下标0-1的数据127.0.0.1:6379&gt; lrange friends 0 11) &quot;Sam&quot;2) &quot;Alice&quot;#获取下标1-2的数据127.0.0.1:6379&gt; lrange friends 1 21) &quot;Alice&quot;2) &quot;Bob&quot;#获取长度127.0.0.1:6379&gt; llen friends(integer) 3#删除第一个数据（左边）127.0.0.1:6379&gt; lpop friends&quot;Sam&quot;#删除最后一个数据（右边）127.0.0.1:6379&gt; rpop friends&quot;Bob&quot;127.0.0.1:6379&gt; llen friends(integer) 1#输出所有127.0.0.1:6379&gt; lrange friends 0 -11) &quot;Alice&quot;#Set集合#添加127.0.0.1:6379&gt; sadd superpowers &quot;flight&quot;(integer) 1127.0.0.1:6379&gt; sadd superpowers &quot;x-ray vision&quot;(integer) 1127.0.0.1:6379&gt; sadd superpowers &quot;reflexes&quot;(integer) 1#删除127.0.0.1:6379&gt; srem superpowers &quot;reflexes&quot;(integer) 1#判断数据是否存在set中127.0.0.1:6379&gt; sismember superpowers &quot;flight&quot;(integer) 1#输出所有127.0.0.1:6379&gt; smembers superpowers1) &quot;flight&quot;2) &quot;x-ray vision&quot;127.0.0.1:6379&gt; sadd birdpowers &quot;pecking&quot;(integer) 1127.0.0.1:6379&gt; sadd birdpowers &quot;flight&quot;(integer) 1#合并两个SET，会过滤重复127.0.0.1:6379&gt; sunion superpowers birdpowers1) &quot;pecking&quot;2) &quot;flight&quot;3) &quot;x-ray vision&quot;#有序集合，按照数字排序127.0.0.1:6379&gt; zadd hackers 1940 &quot;Alan Kay&quot;(integer) 1127.0.0.1:6379&gt; zadd hackers 1906 &quot;Grace Hopper&quot;(integer) 1127.0.0.1:6379&gt; zadd hackers 1953 &quot;Richard Stallman&quot;(integer) 1127.0.0.1:6379&gt; zadd hackers 1965 &quot;Yukihiro Mastsumoto&quot;(integer) 1127.0.0.1:6379&gt; zadd hackers 1916 &quot;Claude Shannon&quot;(integer) 1127.0.0.1:6379&gt; zadd hackers 1969 &quot;Linus Torvalds&quot;(integer) 1127.0.0.1:6379&gt; ZADD hackers 1957 &quot;Sophie Wilson&quot;(integer) 1127.0.0.1:6379&gt; ZADD hackers 1912 &quot;Alan Turing&quot;(integer) 1#输出127.0.0.1:6379&gt; zrange hackers 2 41) &quot;Claude Shannon&quot;2) &quot;Alan Kay&quot;3) &quot;Richard Stallman&quot;127.0.0.1:6379&gt; zrange hackers 0 -11) &quot;Grace Hopper&quot;2) &quot;Alan Turing&quot;3) &quot;Claude Shannon&quot;4) &quot;Alan Kay&quot;5) &quot;Richard Stallman&quot;6) &quot;Sophie Wilson&quot;7) &quot;Yukihiro Mastsumoto&quot;8) &quot;Linus Torvalds&quot;127.0.0.1:6379&gt; #哈希集合127.0.0.1:6379&gt; hset user:1000 name &quot;hisen&quot;(integer) 1127.0.0.1:6379&gt; hset user:1000 email &quot;hisen@hisen.com&quot;(integer) 1127.0.0.1:6379&gt; hset user:1000 pwassword &quot;pswd&quot;(integer) 1127.0.0.1:6379&gt; hgetall user:10001) &quot;name&quot;2) &quot;hisen&quot;3) &quot;email&quot;4) &quot;hisen@hisen.com&quot;5) &quot;pwassword&quot;6) &quot;pswd&quot;#自增27.0.0.1:6379&gt; hset user:1000 visits 10(integer) 1127.0.0.1:6379&gt; hset user:1000 visits 1(integer) 0127.0.0.1:6379&gt; hincrby user:1000 visits 1(integer) 2127.0.0.1:6379&gt; hincrby user:1000 visits 1(integer) 3127.0.0.1:6379&gt; hincrby user:1000 visits 10(integer) 13127.0.0.1:6379&gt; hdel user:1000 visits(integer) 1127.0.0.1:6379&gt; hincrby user:1000 visits 1(integer) 1","categories":["sql"],"tags":["java","sql"]},{"title":"ubuntu安装docker-ce并配置国内源和加速器","url":"/20170417-ubuntu%E5%AE%89%E8%A3%85docker-ce%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90%E5%92%8C%E5%8A%A0%E9%80%9F%E5%99%A8/","content":"一、配置ubuntu国内镜像，这里推荐阿里云，右上角搜索：换阿里云源二、安装dockersudo apt-get updatesudo apt-get install \\     linux-image-extra-$(uname -r) \\     linux-image-extra-virtual\n安装docker包\nsudo apt-get install \\     apt-transport-https \\     ca-certificates \\     curl \\     software-properties-common \n添加docker官方GPG秘钥,留意最后那个符号也要复制\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n安装稳定版仓库\n\nsudo add-apt-repository \\     &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\     $(lsb_release -cs) \\     stable&quot;\n再次更新源\nsudo apt-get update\n安装docker-ce\nsudo apt-get install docker-ce\n\n三、给docker添加国内加速器在阿里云申请一个账号，打开连接https://cr.console.aliyun.com/#/accelerator \n拷贝您的专属加速器地址（每个人专属的，登陆需要密码），然后\nvi /etc/systemd/system/multi-user.target.wants/docker.service\n可以看到如下内容\n[Service]Type=notify# the default is not to use systemd for cgroups because the delegate issues still# exists and systemd currently does not support the cgroup feature set required# for containers run by docker#下面这行是默认的，我注释了，添加了下面一行#ExecStart=/usr/bin/dockerd -H fd://ExecStart=/usr/bin/dockerd -H fd:// --registry-mirror=https://9s3ekxxx.mirror.aliyuncs.comExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=1048576\n找到 ExecStart&#x3D; 这一行，在这行最后添加加速器地址 –registry-mirror&#x3D;&lt;加速器地址&gt;\n如：ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F;  –registry-mirror&#x3D;https://xxxxxx.mirror.aliyuncs.com\n四、重新加载配置并且重新启动$ sudo systemctl daemon-reload$ sudo systemctl restart docker\n至此docker安装及国内加速器都好了，开始你的docker之旅吧。\nsudo docker run hello-world\n看到如下信息\nhisen@ubuntu:/$ sudo docker run hello-worldUnable to find image &#x27;hello-world:latest&#x27; locallylatest: Pulling from library/hello-world78445dd45222: Pull complete Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7Status: Downloaded newer image for hello-world:latestHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://cloud.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/\n到此就圆满结束\n最后给个彩蛋，阿里云一键安装脚本，执行下面命令即可安装最新版docker\ncurl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -\n详情：http://mirrors.aliyun.com/help/docker-engine\n","categories":["linux"],"tags":["docker","ubuntu"]},{"title":"计算机存储单位 - 以及常识","url":"/20201030-understanding-computer-storage-unit/","content":"一、常见单位\n\n\n单位\n英文全称\n中文全称\n转换\n\n\n\nb\nbit\n位\n-\n\n\nB\nByte\n字节\n1B&#x3D;8b\n\n\nKB\nKilo Byte\n千字节\n1KB&#x3D;1024B\n\n\nMB\nMega Byte\n兆字节\n1MB&#x3D;1024KB\n\n\nGB\nGiga Byte\n千兆\n1GB&#x3D;1024MB\n\n\nTB\nTrillion Byte\n万亿字节\n1TB&#x3D;1024GB\n\n\nPB\nPeta Byte\n千万亿字节\n1PB&#x3D;1024TB\n\n\nEB\nExa Byte\n百亿亿字节\n1EB&#x3D;1024PB\n\n\nZB\nZetta Byte\n十万亿亿字节\n1ZB&#x3D;1024EB\n\n\nYB\nYotta Byte\n一亿亿亿字节\n1YB&#x3D;1024ZB\n\n\nBB\nBronto Byte\n一千亿亿亿字节\n1BB&#x3D;1024YB\n\n\nNB\nNona Byte\n\n1NB&#x3D;1024BB\n\n\nDB\nDogga Byte\n\n1DB&#x3D;1024NB\n\n\nCB\nCorydon Byte\n\n1CB&#x3D;1024DB\n\n\n进制除了 Byte 与 bit 之间是 8，其它的都是 1024，但是目前很多时候习惯用 1000，比如 1T ≈ 1000G;\n\n\n\n\n\n二、带宽&#x2F;网速2.1 带宽运营商(ISP)带宽宣传常见的有：50M、100M、500M、1000M…注意：这是传输速率，而不是下载速度。\n\n它们的单位其实是：bps (全称 bit per second，b&#x2F;s)50M 中 M 的含义是：million 即 百万。翻译过来就是：50Mbps &#x3D; 50,000,000 b&#x2F;s;\n2.2 网速各种下载软件，比如迅雷会现在下载速度：12M&#x2F;s这个 12M 的单位是 byte 也就是字节。由表常见单位可知，1byte &#x3D; 8bit\n所以由带宽传输速率转换为下载速度一般需要除以 8即 100M 带宽，理论上最大的下载速度为：100Mbps &#x2F; 8 &#x3D; 12.5Mbyte &#x2F; s(俗称网速 12.5M)；\n三、字节占用关于字节的占用，最明显的就是文本编辑器，写入文本后保存，在文件管理器中能看到具体占用了多少存储空间。问：一个英文(或标点)占用多少字节？一个汉字(或标点)占用多少字节？答：与所使用的编码有关系，具体如下表：\n\n\n\n编码\n英文\n汉字\n\n\n\nASCII\n1byte\n2byte\n\n\nUTF-8\n1byte\n3byte\n\n\nUnicode\n2byte\n2byte\n\n\n","categories":["java"],"tags":["java"]},{"title":"二进制的应用","url":"/20210726-use-of-binary/","content":"一、背景之前京东组里有同事使用二进制优化支付密码打标性能(大促 QPS 数百万)，节省内存资源。随说：存二进制报文小，传输快，反序列化快(之前存 JSON 对象)，节省缓存。\n目前公司遇到个套餐打标，也通过二进制实现简单高效得解决掉了。随说：目前倒不是要求性能，只是这么设计扩展性好，操作简单。\n知识点：二进制、与运算\n二、设计打标，无非就是识别某个东西是不是包含某些属性。那么有什么好的办法能做到通用与高效？如果固定映射，扩展性不好，查询逻辑费劲，存储成本偏高。\n目前相对较好的方案是通过二进制位来做标记，再结合与运算，快速找出数据。随说：Java MySQL 均支持与运算\n\n\n\n套餐\nVIP1\nVIP2\nVIP3\n标记值\n\n\n\nA\n1\n1\n1\n7\n\n\nB\n1\n1\n0\n6\n\n\nC\n1\n0\n0\n4\n\n\n如上表所示，相应套餐的购买资格标记。\n\nA 套餐所有会有均可购买B 套餐 VIP3 不能购买C 套餐仅 VIP1 可购买\n对相关标记进行入库处理：A&#x3D;7，B&#x3D;6，C&#x3D;4；\n正常思维，需要存三个字段，没有扩展性，性能还差。使用二进制，结合与运算，降本(计算、传输、匹配)增效(性能提升)。\n三、代码public static void main(String[] args) &#123;    Integer a = 7;    Integer b = 6;    Integer c = 4;    List&lt;Integer&gt; suit = Lists.newArrayList(a, b, c);    System.out.printf(&quot;支持 VIP1 (0100=4)的套餐:&quot; + Arrays.toString(suit.stream().filter(e -&gt; (4 &amp; e) != 0).toArray()));    System.out.printf(&quot;支持 VIP2 (0010=2)的套餐:&quot; + Arrays.toString(suit.stream().filter(e -&gt; (2 &amp; e) != 0).toArray()));    System.out.printf(&quot;支持 VIP3 (0001=1)的套餐:&quot; + Arrays.toString(suit.stream().filter(e -&gt; (1 &amp; e) != 0).toArray()));//        支持 VIP1 (0100=4)的套餐:[7, 6, 4]//        支持 VIP2 (0010=2)的套餐:[7, 6]//        支持 VIP3 (0001=1)的套餐:[7]&#125;\n四、总结系统流量小的时候粗糙烂制也不是不能用但是当系统流量大了就得想办法优化：CPU、传输、存储很多时候往往利用简单的原理解决大的问题，只是很多时候限于认知不知道可以这么用。\n说到底还是要知其然，更要知其所以然。\n","categories":["java"],"tags":["java"]},{"title":"小四：你尽力了吗？【转】","url":"/20240718-xiao-si_did-you-do-your-best/","content":"\n安全大佬小四2000年写过一篇《你尽力了吗》的学习方法，网上不好找，我把文字版搜到放在下面了(20多年后再来看这篇其实挺一般的 :) )\n\n\n发信人: cloudsky (小四), 信区: Security标 题: 你尽力了吗发信站: 武汉白云黄鹤站 (Mon Apr 17 19:52:54 2000), 站内信件\n\n很多人问如何入门如何入门，我却不知道要问的是入什么门。很少把某些好文章耐心从头看完，我这次就深有体会。比如袁哥的 sniffer 原理，一直以为自己对 sniffer 原理很清楚的，所以也就不曾仔细看过袁哥的这篇。后来有天晚上和袁哥讨论，如何通过端口读写直接获取 mac 地址，为什么 antisniff 可以获得真正的 mac 地址，而不受更改mac地址技术的影响，如何在 linux 下获得真正的 mac 地址。我一直对 linux 下的端口读写心存疑虑，总觉得在保护模式下的端口都做了内存映象等等。结果袁哥问了我一句，你仔细看我写的文章没有。我楞，最近因为要印刷月刊，我整理以前的很多文档，被迫认真过滤它们，才发现袁哥的文章让我又有新认识。\n再后来整理到 tt 的几篇缓冲区溢出的，尤其是上面的关于 Solaris 可装载内核模块，那就更觉得惭愧了。\n\n以前说书非借不能读，现在是文章留在硬盘上却不读。其实本版已经很多经典文章了，也推荐了不少经典书籍了，有几个好好看过呢。W.Richard.Stevens 的 UNP 我算是认真看过加了不少旁注，APUE就没有那么认真了，而卷II的一半认真看过，写过读书笔记，卷III就没有看一页。道格拉斯的卷I、卷III是认真看过几遍，卷II就只断续看过。而很多技术文章，如果搞到手了就懒得再看，却不知道这浪费了多少资源，忽略了多少资源。BBS 是真正能学到东西的地方吗？rain 说不是的，我说也不是的。不过这里能开阔人的视野，能得到对大方向的指引，足够了。\n我一直都希望大家从这里学到的不是技术本身，而是学习方法和一种不再狂热的淡然。很多技术，明天就会过时，如果你掌握的是学习方法，那你还有下一个机会，如果你掌握的仅仅是这个技术本身，你就没有机会了。其实我对系统安全是真不懂，因为我一直都喜欢看程序写程序却不喜欢也没有能力攻击谁谁的主机&#x2F;站点。我所能在这里做的是，为大家提供一个方向，一种让你的狂热归于淡然的说教。如果你连《WindowsNT设备驱动程序编写》、《win9x系统编程》都没有看过，却要写个什么隐藏自己的木马，搞笑。如果你看都不看汇编语言，偏要问 exploit code 的原理，那我无法回答也不想回答你。总有人责问，要讨个说法纭纭，说什么提问却没有回答。不回答已经是正确的处理方式了，至少没有回你一句，看书去，对不对，至少没有扰乱版面让你生闷气。Unix 的 man 手册你要都看完了，想不会Unix都不行了。微软的 MSDN、Platform SDK DOC你要看完了，你想把 Win 编程想象得稍微困难点都找不到理由。还是那句话，一个程序员做到 W.Richard.Stevens 那个份上，做到逝世后还能叫全世界的顶级 hacker 们专门著文怀念，但生前却不曾著文攻击，想想看，那是一种什么样的境界，那是一份什么样的淡然。我们可以大肆讨论技术问题，可以就技术问题进行激烈的卓有成效的讨论，却无意进行基础知识、资源信息的版面重复。我刚在前面贴了一堆 isbase 的文章，开头就是主页标识，却在后面立刻问什么主页在哪里？前面刚刚讨论过如何修改 mac 地址，后面马上又来一个，前后相差不过3篇文章。\n选择沉默已经是很多朋友忍耐力的优异表现了。很多东西都是可以举一反三的。vertex 的 lids，被 packetstorm 天天追踪更新，你要是看了 THC 的那三篇，觉得理解一个就理解了一堆，都是内核模块上的手脚。你不看你怎么知道。我不想在这里陷入具体技术问题的讨论中去，你要是觉得该做点什么了，就自己去看自己去找。没有什么人摆什么架子，也没有什么人生来就是干这个的。你自己问自己，尽力了吗？\n","categories":["成长"],"tags":["cs"]},{"title":"zookeeper & dubbo搭建 - 在IDEA上运行阿里巴巴Dubbo-demo","url":"/20170419-zookeeper%20&%20dubbo%E6%90%AD%E5%BB%BA%20-%20%E5%9C%A8IDEA%E4%B8%8A%E8%BF%90%E8%A1%8C%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Dubbo-demo/","content":"\n\nIDEA上搭建dubbo服务的简单过程只是简单的让例子在IntelliJ IDEA跑起来\n目前是最新的版本：2.5.4-SNAPSHOT\n本文档更新时间：2017年04月19日01:08:02\n一 、安装zookeeper参考链接：ubuntu apt-get安装zookeeper\n二、Idea clone本项目导出项目之后，配置一下tomcat，添加dubbo-admin：war到tomcat中\n项目github地址：https://github.com/hisen-yuan/dubbo\n三、启动tomcat，即可访问dubbo管理后台默认账号：root\n默认密码：root\n四、启动服务提供者&amp;消费者demo\n修改dubbo-demo-consumer配置文件中的注册中心地址\n\n/dubbo/dubbo-demo/dubbo-demo-consumer/src/test/resources/dubbo.properties\n\n#dubbo.registry.address=multicast://224.5.6.7:1234#使用本地的zookeeper做注册中心dubbo.registry.address=zookeeper://127.0.0.1:2181\n\n\n修改ubbo-demo-provider配置文件中的注册中心地址\n\n/dubbo/dubbo-demo/dubbo-demo-provider/src/test/resources/dubbo.properties\n\n#dubbo.registry.address=multicast://224.5.6.7:1234#使用本地的zookeeper做注册中心dubbo.registry.address=zookeeper://127.0.0.1:2181\n\n\n分别启动dubbo-demo下ubbo-demo-provider、dubbo-demo-consumer下的测试方法\n\n即可在后台看到有服务在运行\n","categories":["java"],"tags":["java","zookeeper","dubbo"]},{"title":"《Go语言程序设计》 - ch1/lissajous - GIF动画","url":"/20180908-%E3%80%8AGo%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%20-%20ch1:lissajous%20-%20GIF%E5%8A%A8%E7%94%BB/","content":"一、程序说明\n可以以web的方式查看，也可以生成一个图片\n直接go run输出的是一丢乱码(图片)\n需要go build 然后运行程序(具体看代码里面注释)\n\n具体的内容可以看下面的程序代码(虽然是抄书)\n二、程序代码\n2.1 基本程序package mainimport (\t&quot;image&quot;\t&quot;image/color&quot;\t&quot;image/gif&quot;\t&quot;io&quot;\t&quot;log&quot;\t&quot;math&quot;\t&quot;math/rand&quot;\t&quot;net/http&quot;\t&quot;os&quot;\t&quot;time&quot;)var palette = []color.Color&#123;color.White, color.Black&#125;const (\twhiteIndex = 0 // 画板中的第一种颜色\tblackIndex = 1 // 画板中的下一种颜色)func main() &#123;\trand.Seed(time.Now().UTC().UnixNano())\tif len(os.Args) &gt; 1 &amp;&amp; os.Args[1] == &quot;web&quot; &#123;\t\thandler := func(w http.ResponseWriter, r *http.Request) &#123;\t\t\tlissajous(w)\t\t&#125;\t\thttp.HandleFunc(&quot;/&quot;, handler)\t\tlog.Fatal(http.ListenAndServe(&quot;localhost:8000&quot;, nil))\t\treturn\t&#125;\tlissajous(os.Stdout)&#125;func lissajous(out io.Writer) &#123;\tconst (\t\tcycles  = 5     // 完整的x振荡器变化的个数\t\tres     = 0.001 // 角度分辨率\t\tsize    = 100   // 图像画布包含\t\tnframes = 64    // 动画中的帧数\t\tdelay   = 8     // 以10ms为单位的帧间延迟\t)\tfreq := rand.Float64() * 3.0 // y振荡器的相对频率\tanim := gif.GIF&#123;LoopCount: nframes&#125;\tphase := 0.0 // phase difference\tfor i := 1; i &lt; nframes; i++ &#123;\t\trect := image.Rect(0, 0, 2*size+1, 2*size+1)\t\timg := image.NewPaletted(rect, palette)\t\tfor t := 0.0; t &lt; cycles*2*math.Pi; t += res &#123;\t\t\tx := math.Sin(t)\t\t\ty := math.Sin(t*freq + phase)\t\t\timg.SetColorIndex(size+int(x*size+0.5),size+int(y*size+0.5),blackIndex)\t\t&#125;\t\tphase +=0.1\t\tanim.Delay = append(anim.Delay,delay)\t\tanim.Image = append(anim.Image,img)\t&#125;\tgif.EncodeAll(out,&amp;anim) // 注意：忽略编码错误（直接运行输出的是一堆乱码）\t// go build lissajous.go\t// ./lissajous &gt;out.gif # 生成一个图片\t// ./lissajous web # 开启一个web服务，可以浏览器访问 localhost:8000&#125;\n\n2.2 改进型程序，也是课后练习package mainimport (\t&quot;image&quot;\t&quot;image/color&quot;\t&quot;image/gif&quot;\t&quot;io&quot;\t&quot;log&quot;\t&quot;math&quot;\t&quot;math/rand&quot;\t&quot;net/http&quot;\t&quot;os&quot;\t&quot;time&quot;)// 颜色代码数组var palette = []color.Color&#123;color.Black, color.RGBA&#123;199, 237, 204, 0xff&#125;, color.RGBA&#123;102, 53, 204, 0xff&#125;&#125;func main() &#123;\trand.Seed(time.Now().UTC().UnixNano())\t// 判断传入参数 如果有web,就启动一个web服务器\tif len(os.Args) &gt; 1 &amp;&amp; os.Args[1] == &quot;web&quot; &#123;\t\thandler := func(w http.ResponseWriter, r *http.Request) &#123;\t\t\tlissajous(w)\t\t&#125;\t\thttp.HandleFunc(&quot;/&quot;, handler)\t\tlog.Fatal(http.ListenAndServe(&quot;localhost:8000&quot;, nil))\t\treturn\t&#125;\tlissajous(os.Stdout)&#125;func lissajous(out io.Writer) &#123;\tconst (\t\tcycles  = 5     // 完整的x振荡器变化的个数\t\tres     = 0.001 // 角度分辨率\t\tsize    = 100   // 图像画布包含\t\tnframes = 64    // 动画中的帧数\t\tdelay   = 8     // 以10ms为单位的帧间延迟\t)\tfreq := rand.Float64() * 3.0 // y振荡器的相对频率\tanim := gif.GIF&#123;LoopCount: nframes&#125;\tphase := 0.0 // phase difference\tfor index,i :=0, 1; i &lt; nframes; i++ &#123;\t\trect := image.Rect(0, 0, 2*size+1, 2*size+1)\t\timg := image.NewPaletted(rect, palette)\t\tfor t := 0.0; t &lt; cycles*2*math.Pi; t += res &#123;\t\t\tx := math.Sin(t)\t\t\ty := math.Sin(t*freq + phase)\t\t\timg.SetColorIndex(size+int(x*size+0.5), size+int(y*size+0.5), uint8(index))\t\t&#125;\t\t// 控制变色频率，生成颜色数组下标\t\tindex = i % 3\t\tphase += 0.1\t\tanim.Delay = append(anim.Delay, delay)\t\tanim.Image = append(anim.Image, img)\t&#125;\tgif.EncodeAll(out, &amp;anim) // 注意：忽略编码错误（直接运行输出的是一堆乱码）\t// go build lissajous.go\t// ./lissajous &gt;out.gif # 生成一个图片\t// ./lissajous web # 开启一个web服务，可以浏览器访问 localhost:8000&#125;\n","categories":["go"],"tags":["go"]},{"title":"《穿布鞋的马云》 - 部分文字摘录","url":"/20180908-%E3%80%8A%E7%A9%BF%E5%B8%83%E9%9E%8B%E7%9A%84%E9%A9%AC%E4%BA%91%E3%80%8B%20-%20%E9%83%A8%E5%88%86%E6%96%87%E5%AD%97%E6%91%98%E5%BD%95/","content":"《穿布鞋的马云》 2018.10.01 ~ 2018.10.02\n国庆假期没有什么安排，看了几部电影之后感觉蛮愧疚，又浪费了大把的时间\n于是乎在书架上找了本决定看起来压力不那么大的书来看\n这本书感觉整体上写的一般，可能定位就是通俗易懂吧\n但是对于了解一些细节，还是很有帮助\n由于目前待在创业公司，看到很多文字的时候还是很有感触的\n如果你想成功，积极乐观地看待任何问题\n以下为摘抄：\n\n马云在校教书，兼职创业:海博翻译社92派:1992年后创业的企业家想清楚干什么，然后就要清楚该干什么;知道该干什么之后，要明白自己不该干什么——&gt;能干多久？想干多久？这件事情该干多久就多久。记住自己第一天的梦想，至关重要。海博翻译社的网页是第一个外国人能在互联网上搜到的第一个中国的网页。1995年是全世界互联网商用的第一年。只有启蒙才会有更大的市场。资本永远不能控制一家公司，资本只能为创业服务，而不能控制公司。一个创业公司的创始人能够取得权威媒体的认可，也是一件惊人的事情。创业者最重要的是创造条件，如果等到时机成熟的话，一定轮不到我们。有了理想之后，我觉得，最重要的是给自己一个承诺，承诺自己要把这个事情做出来。如果你不行动，不给自己的梦想一个实践的机会，你永远没有机会。创立阿里巴巴之前，三家公司马云得到的创业智慧:第一，选对创业项目很重要第二，即便是几个人的小公司，管理制度的建设也很重要第三，资本控制了你的公司时，你是没有希望的。第四，创业团队没有相同的理念和共同的目标会导致分裂。第五，对国有股东有了近距离的认识。1998年，阿里巴巴做bbs，长城是最早的bbs，xxx到此一游。阿里巴巴，在美国看到的名字，是“open sesame”芝麻开门的意思。合作都是团队做出来的，如果别人把你当英雄，你千万不要把自己当英雄，如果自己把自己当英雄必然要走下坡路。有几种人是难以在团队中培养的，一种是懂资本的人才，其他是财务、法律人才。因为这样的人才不仅要懂专业，而且需要经验。一般的公司多半是在上市之前引进这样的人才。在我擅长的世界里，我非常自信，非常自如。我没有想过要大包大揽，我知道自己的角色是什么。对于公众舆论而言，公司只能用一个声音说话，太多声音，只会让这个公司的形象变的模糊。世界上最不缺的就是钱，缺的是能用资本创造价值的企业家和企业家精神。1999.10高盛投资阿里巴巴使得后者可以对媒体讲一个好的故事:全世界最好的投资银行看好阿里巴巴的长期发展。它让外界对这家初创公司刮目相看。永远不要让资本说话，让资本赚钱。1999.10，拿到高盛500万(40%)投资的马云，随后孙正义想4000万占有49%的股份，后来3000万美元得到30%的股份，再后来，马云马云觉得钱太多反悔，最后孙正义投资2000万获得20%股份。在所有的创业公司发展中，扩张规模是最容易犯错误的时候，而这时犯的错还都是不小的错误。人多财务成本高，这并不是主要的，重要的是那些闲人会让全心全意投入加班加点的人感到不平衡，久而久之，公司的文化风气就不行了。2009.10 西湖论剑，马云请金庸拉拢当时互联网行业的佼佼者参与。前来的有:金庸，新浪王志东，搜狐张朝阳，网易丁磊，my8848王俊涛，加拿大驻华大使，英国驻沪总理事及50多家国际跨国公司在华代表在创业初期要寻找这些梦之队:没有成功，渴望成功，平凡，团结，有共同理想的人。2003年每天收入100万元，2004年每天盈利100万元，2005年每天纳税100万元。拥有好的业绩和产品，同事技巧性地为自己选定一个对标物，这会让你的公司和产品赢得大量关注。“裸奔”和淘宝的倒立与武侠一样，都是极易被识别的与众不同的公司文化符号，也极易产生传播效应。好的商人不在于他的梦想多么伟大，但是他的梦想必须是独特的，任何一个成功的企业家，从第一天起都有一个独特的梦想。2005.8.11雅虎中国并入阿里巴巴。资产技术+10亿美元，获得阿里40%股份。一个公司如果并购另外一个公司的话，文化融合是一件很难的事情。聪明是智慧者的天敌，傻瓜用嘴说话，聪明的人用脑子说话，智慧的人用心讲话。所以永远要记住，不要把自己当成最聪明的人，最聪明的人相信总有别人比自己更聪明。作为一个领导人，应该控制自己的情绪，很多时候发脾气是无能的表现，合理的情绪控制对于团队的和谐，稳定军心有很大作用。改变别人，先改变自己;要完善世界，先完善自己;要帮助好别人，先帮助自己;如果你不能帮助好自己，那一切都是瞎扯。人与人之间最本质的区别不是技能、专业、能力、情商，而是人生的使命感和价值观，而企业同理。先付出，再得到。没有使命感，人生会找不到奋斗的意义;没价值诶观，奋斗的方式会扭曲。80后，90后，我觉得是我的产品，我们没有理由、权利和责任区批判我们的产品，我们唯一有的权利和责任是完善我们的产品。真正的幸福感是你知道自己在做什么，知道别人在做什么，你会逐渐从痛苦中找到那些快乐。如果你想成功，积极乐观地看待任何问题\n","categories":["read"],"tags":["穿布鞋的马云"]},{"title":"《重塑大脑，重塑人生》读后感 + 摘抄","url":"/20190903-%E3%80%8A%E9%87%8D%E5%A1%91%E5%A4%A7%E8%84%91%EF%BC%8C%E9%87%8D%E5%A1%91%E4%BA%BA%E7%94%9F%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F%20+%20%E6%91%98%E6%8A%84/","content":"一、内容简介这是一本人类大脑可塑性研究先驱与翘楚的故事书，正是让我们用触觉看到世界的巴赫-利塔这类先驱，使得我们正在成为来自地球的神。\n二、读后感这本书对我来讲还是很棒的，刷新了我对大脑的认知;以前还停留在左右脑分工上，殊不知这是日本鬼子整出来的不严谨的概念;看完书，感觉对个人技术、学习方面都有帮助，增加信心，因为之前错过了学校的大把学习时间;运动和学习是互补的，前者产生新的神经干细胞，后者使它们的寿命延长;\n这本书我是很推荐看的;犹如最近看完的reids英文版文档;每天看一点点，持续的刺激大脑相关区域，收获还是可以;之前也咨询过英语比较好的同事;反馈说目前想提高，就拿着领域内的文档硬看，坚持下来会有收获的;\n每次看完书都会发个微博，避开朋友圈的尴尬，扩大散播范围，与更多的同好交流;\n三、内容摘要《重塑大脑，重塑人生》0822～0901在持续不断噪声环境中长大的孩子都好动和吵闹，白噪声对大脑发育也有影响。\n\n大脑重塑性和多巴胺有关，多巴胺可以使达成目标的那个行为的神经回路固话，连接得更紧。\n有人说A片提供的是健康的快乐，使人从性的紧张中解放，其实A片提供的是上瘾、耐药性，他会降低快乐的感受。\n所以学习没有一蹴而就之事，它是要下苦功的，我们的每一个经验都在改变大脑的连联结。\n一定要指出一点：台湾地区一直受日本的影响，社会上流行着日本人说的右脑革命、右脑开发的谬论。婴儿发展初期，大脑两边很相似，只是后期专职分化了。因此绝对没有日本人七田真说的“右脑先发展到三岁才长出脑梁到左脑”\n上学太早对身心情绪发展不好。\n大脑每做一次不同的活动时，这些活动都改变了大脑的结构，每次练习都改变了大脑神经回路，使他更适合手边的作业，假如某些部件坏掉了，其他部件有时可以接管这项工作。(有时候头皮有反应、头胀、有点不舒服的感觉就是这个原因？)\n大脑比我们能想象的还更开放。\n大脑练习：找出弱点区域然后强化这个区域的功能。\n一个认知能力的测试可以帮人们更加了解自己的大脑。\n他们发现小猫的大脑有关键期：从3～8周，在这期间接受刺激才会正常地发展。\n人的大脑也有关键期，例如语言发展有关键期，始于出生，终止于8岁到青春期之间。\n当大脑在分配处理的资源时，大脑地图遵循的法则是竞争。资源不足时，大家会抢珍贵的资源，用进废退是唯一的法则。\n当我们年龄越大，我们使用母语的频率就越高，母语占据我们语言地图的空间就越大，这也是因为我们的大脑有可塑性，我们学新语言才这么难。\n使用双语的孩子两种语言的语音都共享一个大的语言地图。\n但事实上，当我们学会一个坏习惯时，它占据了大脑地铁的空间，每次我们重复这个坏习惯，它又占据多点，让好习惯难以立足，这是为什么戒掉一个坏习惯比学它时难10倍，也是为什么同年的教育这么重要：最好一开始就教对，不要等到坏习惯已经做大有竞争优势了再去拔除它。\n训练让神经元效率更高。\n当动物有动机要学习时，大脑会弹性地对学习的需求作出反应。\n一心多用不会使你的大脑地图产生永久改变。\n多巴胺增强回馈报酬乙酰胆碱帮助大脑加深印象，增强记忆。\n都是噪声惹的祸：越靠近机场、公路的孩子智商越低。(持续的背景噪声对听觉皮质有很大的刺激)\n把20～20000Hz的声音集合起来就是所谓的白噪声，昼夜播放白噪声会使人失去理智，进而发疯。\n打开成年人的关键期：关键是要有激励，多巴胺、乙酰胆碱。\n有些人只有在看色情影片时才会勃起，他们很少会想不举根他们爱看色情影片有关系。\n恋人可以通过以下方式突破耐受性：浪漫的度个假，尝试新奇的活动，穿新的活动，想办法让对方惊喜。\n我们的大脑就是演化来对新奇的东西起反应了。\n当一个人成为父亲时，会分泌血管压缩素，会改变我们的大脑使你变得适合做父亲。\n催产素通常是在草原田鼠交配时分泌(人性交也会)，这使它们白头偕老，不会花心。\n没有安全感的男人在做完爱后，会迅速离开，因为他害怕留下来，会被她影响；女人比较容易爱上与她性交的男人。\n爱情的“去学习”也使我们改变了对自己形象的看法。在爱上一个很有权利欲、喜欢操控和贬低别人以抬高自我的人后，会失去所有的自我，变成自我怀疑、对自己没有信心的人。\n《洛丽塔》\n把猴子一只手神经切断，另外一只手绑起来，结果后面猴子用切断了神经的手进食。\n“大量练习”(两周内集中训练)是为了引发启动大脑的可塑性改变，帮助大脑重新组织。\n利用大脑可塑性停止忧虑、偏执想法、强迫性行为和坏习惯。\n强迫症是：你越做，就越想做；越不做就越不会去想做。\n幻肢是来自大脑的重组，脸和手的神经比较靠近。\n有些女性的耳朵、锁骨和胸骨受到刺激会感到性兴奋，这三者的大脑地图都跟乳头的大脑地图紧邻；有些因阴茎癌而把阴茎切除的男性不但体验到幻阴茎，而且阴茎还会勃起。(性器官的大脑地图是在脚的旁边)\n成功切除幻肢，通过镜子让患者看到幻肢，然后就会有信号传回大脑。\n控制阀门理论，用电流刺激抑制痛的神经元，帮助疼痛阀门关闭。这个理论让西方科学家比较能接受针灸。\n仅仅用想象和视觉错觉来重建构造大脑地图，没有打针、吃药、电流刺激，就将其痛苦、难以忍受的长期痛苦减轻或治愈了\n经颅磁刺激可以无痛刺激脑神经。\n实验表明，心智练习(靠想象)是用最少的实际练习来学习新肢体技术的有效方式。\n用进废退的大脑需要外界刺激来维持它的地图。(心智下棋的例子最多)\n专家不存储答案，但是存储重要的事实和策略，用长期记忆来解决问题是很多领域专家的共同特点。\n从神经科学的观点来看，想象一个动作和执行其实没有很大差别。\n一个人想象他在使用自己的肌肉可以增加肌肉的强度。\n要发展一个新的回路，就必须阻挡或管制它的竞争者，即那些通常最常使用这个回路的信息。例如；想提高触觉等能力，就蒙住眼睛。\n通常我们会重组我们的记忆以符合新的环境。\n孩子要了解情绪，调节情绪，而产生社会化联结，必须在关键期经历几百次互动(母亲通过触觉 听觉 视觉 表现情绪)\n两三岁以前靠内隐记忆，非语言的，例如骑自行车。两三岁以后外显记忆开始发展，收集各种事实，事件，需要语言支持。\n有几十个研究显示睡眠帮助我们巩固学习和记忆，而这影响大脑的可塑性改变。\n婴儿时期的快速眼动睡眠是大脑可塑性发展的必要条件。\n我们常常不自觉得被过去重要人际关系的魅影缠绕而影响现在的人际关系。\n计算机听觉训练程序可以帮助老年人训练大脑。\n不要因为小事而钻牛角尖，因为压力会产生皮质激素，而这会杀死海马回的神经细胞，海马回有助于短期记忆转为长期记忆\n海马回中有神经干细胞。\n在刺激丰富的环境中(球类、跑步机等各种玩具)生长的老鼠海马回容积增大15%，神经元数目增加了15%。长期丰富刺激环境对老年人的大脑神经再生有巨大影响。\n为了使大脑保持最佳状态，我们必须学习新东西，而不是每天重复已经做的很熟练的事情，终身学习是很有必要的。\n运动和学习是互补的，前者产生新的神经干细胞，后者使它们的寿命延长。\n学一种新乐器、玩桥牌、打麻将、阅读和跳舞都可以帮助神经元的活化(需要全神贯注的活动才行)。\n大脑最怕的就是人呆在相同的环境不动，这样会使大脑萎缩加速，单调不动会减少多巴胺的分泌，破坏维持大脑可塑性的注意力系统。\n只有做自己想做的事情才会产生强烈的动机。\n半个大脑也可以活的很好。\n洗脑遵循了神经可塑性原则，可以用奖励、严厉惩罚以及大量训练的方式达到制约目的。\n刚会走路的婴儿每天看电视的时间每增加一小时，他们在7岁时有注意力缺失问题的概率就会增加10%\n","categories":["read"],"tags":["读书"]},{"title":"业务安全的资源层攻防介绍","url":"/20191023-%E4%B8%9A%E5%8A%A1%E5%AE%89%E5%85%A8%E7%9A%84%E8%B5%84%E6%BA%90%E5%B1%82%E6%94%BB%E9%98%B2%E4%BB%8B%E7%BB%8D/","content":"一些简单的黑产攻防介绍\n\n修改前置摄像头，直接播放本地视频或者图片(色情诈骗、网约车司机人脸识别);\n恶意注册靶机系统：黑卡猫池、群控、云控、箱控(12个主板，模拟120台手机);\n模拟点击脚本在黑产中使用比例逐年增高，主要是效果好很难区分是否为真实用户;\nROS软路由(可管理250个IP)、秒拨(每次拨号IP改变);\n\n\n\n黑产变现的渠道主要有：羊毛、引流(注册账号发布信息);\n很多黑产行为在单个平台来讲都是一次性活动;\n改机工具：类沙箱，可以更改大量手机信息，提供快照功能，方便上下游复现现场环境，权限高，欺骗效果好;\n针对改机工具一般都进行恶意环境检测，指令集中是否有hook、cpu架构、文件目录等;\n防护方针：增加黑产的量化攻击成本(时间、资金);\n给出模糊的错误提示，而不是准确的，否则黑产很容易试出策略;\n不要在注册环节就大量拦截，要考虑用户体验，也要收集黑产行为信息，杀量化攻击;\n忘记密码可能会被利用，找回密码的机制要严格审核(匹配通讯录等);\n黑产资源成本高，全网来讲资源重复利用率高;\nIP资源、定位、手机、脚本、改机工具、云控等方便规模化，精细化运作;\n\n从中不难看出源头是黑卡、被利用的宽带账号、也有可能是路由器、物联网设备等;运营商加强实名认证宽带拨号频率限制网络设备安全加固，关闭特殊权限端口，禁用弱密码\n打击网络黑产交易，防止黑产规模化，产业化趋势;\n蜜罐系统收集黑产IP提供IP代理给黑产使用了解对方信息\n","categories":["biz"],"tags":["安全"]},{"title":"为什么要使用队列 - Java","url":"/20170801-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E9%98%9F%E5%88%97%20-%20Java/","content":"一、java中的队列：Queue接口Queue接口与List、Set同一级别，都是继承了Collection接口。LinkedList实现了Queue接口。Queue接口窄化了对LinkedList的方法的访问权限（即在方法中的参数类型如果是Queue时，就完全只能访问Queue接口所定义的方法 了，而不能直接访问 LinkedList的非Queue的方法），以使得只有恰当的方法才可以使用。BlockingQueue 继承了Queue接口。\n队列是一种数据结构．它有两个基本操作：在队列尾部加入一个元素，和从队列头部移除一个元素（注意不要弄混队列的头部和尾部）就是说，队列以一种先进先出的方式管理数据，如果你试图向一个 已经满了的阻塞队列中添加一个元素或者是从一个空的阻塞队列中移除一个元索，将导致线程阻塞．在多线程进行合作时，阻塞队列是很有用的工具。工作者线程可以定期地把中间结果存到阻塞队列中而其他工作者线程把中间结果取出并在将来修改它们。队列会自动平衡负载。如果第一个线程集运行得比第二个慢，则第二个 线程集在等待结果时就会阻塞。如果第一个线程集运行得快，那么它将等待第二个线程集赶上来。下表显示了jdk1.5中的阻塞队列的操作：\n\n\n\n排序方法\n平均情况\n最好情况\n\n\n\nadd\n增加一个元素\n如果队列已满，则抛出一个IllegalSlabEepeplian异常\n\n\nremove\n移除并返回队列头部的元素\n如果队列为空，则抛出一个NoSuchElementException异常\n\n\nelement\n返回队列头部的元素\n如果队列为空，则抛出一个NoSuchElementException异常\n\n\noffer\n添加一个元素并返回true\n如果队列已满，则返回false\n\n\npoll\n移除并返问队列头部的元素\n如果队列为空，则返回null\n\n\npeek\n返回队列头部的元素\n如果队列为空，则返回null\n\n\nput\n返回队列头部的元素\n如果队列满，则阻塞\n\n\ntake\n返回队列头部的元素\n如果队列为空，则阻塞\n\n\n二、消息队列介绍：\n消息队列中间件是分布式系统中重要的组件，主要解决应用耦合，异步消息，流量削锋等问题。\n实现高性能，高可用，可伸缩和最终一致性架构。\n是大型分布式系统不可缺少的中间件。\n目前在生产环境，使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ等。\n场景：异步处理、应用解耦、流量削锋、日志处理\n\n以上就是关于为什么要使用队列的大致说明\n\n参考：\n\njava中队列的使用\n消息队列的使用场景\n\n","categories":["java"],"tags":["java","队列"]},{"title":"企业邮箱签名模版","url":"/20170317-%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E7%AD%BE%E5%90%8D%E6%A8%A1%E7%89%88/","content":"下面是源码，有些邮箱可以直接用html源码设置。\n我用得是网易邮箱大师，把代码存为本地网页打开全选复制\n粘贴到邮箱大师的签名里面即可！亲测有效，还挺好看的\n代码如下：\n\n&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt;  &lt;div&gt;   &lt;style&gt;.g &#123;clear:both; height:0;&#125;.mailsign &#123;font-size:12px; color:#808080; margin:0 35px; line-height:22px;&#125;.logo &#123;width:305px; height:35px; margin:20px 0 10px -15px;&#125;.name &#123;font-weight:700; font-size:14px; float:left; color:#808080; height:30px; line-height:30px;&#125;.position &#123;float:left; margin-left:15px; color:#808080; height:30px; line-height:30px;&#125;.company1 &#123;clear:both; font-weight:700; font-size:14px; color:#808080; margin-top:10px;&#125;.company2 &#123;clear:both; font-weight:700; font-size:14px; color:#808080; margin-bottom:10px;&#125;.add&#123;&#125;.add .zip &#123; margin-left:5px; color:#a0a0a0; font-size:10px;&#125;.tel &#123;&#125;.fax &#123;&#125;.phone &#123;&#125;.website &#123;&#125;.website a &#123;color:#808080; text-decoration:none !important;&#125;.eng &#123;&#125;.state &#123;color:#a0a0a0; margin-top:20px; padding:15px; border:1px solid #CCC; border-radius:10px&#125;.state h4 &#123; margin:0;&#125;.state p &#123;margin:0; font-size:7.5pt;&#125;&lt;/style&gt;      &lt;div class=&quot;mailsign&quot;&gt;   &lt;hr /&gt;    &lt;div class=&quot;g&quot;&gt;     &lt;div class=&quot;name&quot;&gt;      &lt;t id=&quot;tname&quot;&gt;       HiSEN      &lt;/t&gt;     &lt;/div&gt;     &lt;div class=&quot;position&quot;&gt;      &lt;t id=&quot;tposition&quot;&gt;       中级java开发工程师      &lt;/t&gt;     &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;g&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;company1&quot;&gt;     HiSEN网络在线技术有限公司    &lt;/div&gt;    &lt;div class=&quot;company2&quot;&gt;     &lt;t id=&quot;tcompany&quot;&gt;      技术部     &lt;/t&gt;    &lt;/div&gt;    &lt;div class=&quot;add&quot;&gt;     &lt;span&gt;地址/Add ：&lt;/span&gt;     &lt;t id=&quot;tadd&quot;&gt;      北京朝阳区xxx     &lt;/t&gt;    &lt;div class=&quot;mob&quot;&gt;     &lt;span&gt;手机/Mob：&lt;/span&gt;     &lt;t id=&quot;tmob&quot;&gt;      15555555555     &lt;/t&gt;    &lt;/div&gt;    &lt;div class=&quot;website&quot;&gt;     &lt;span&gt;网址/URL    ：&lt;/span&gt;     &lt;a href=&quot;http://hisen.me/&quot; target=&quot;_blank&quot;&gt;hisen.me&lt;/a&gt;    &lt;/div&gt;    &lt;div class=&quot;state&quot;&gt;     &lt;h4&gt;保密声明：&lt;/h4&gt;     &lt;p&gt;此文件中可能含有机密类信息，仅限于上方提到的人员使用。若非以上人员或负责将该信息传送给上述人员的职员或代理人，严禁对此文件作任何形式的汇报、散布、传播及复制。若非此文件的指定收件人，请立即以邮件形式联系发件人并销毁所有原始文件的拷贝。&lt;/p&gt;     &lt;h4&gt;CONFIDENTIALITY NOTICE:&lt;/h4&gt;     &lt;p&gt;The information contained in this transmission may contain privileged and confidential information and is intended only for the use of the person(s) named above. If you are not the intended recipient, or an employee or agent responsible for delivering this message to the intended recipient, any review, dissemination, distribution or duplication of this communication is strictly prohibited. If you are not the intended recipient, please contact the sender immediately by reply e-mail and destroy all copies of the original message.&lt;/p&gt;    &lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;","categories":["其他"],"tags":["模版"]},{"title":"修改路由表：网线接内网、无线走外网 - 以及带来的问题","url":"/20171031-%E4%BF%AE%E6%94%B9%E8%B7%AF%E7%94%B1%E8%A1%A8%EF%BC%9A%E7%BD%91%E7%BA%BF%E6%8E%A5%E5%86%85%E7%BD%91%E3%80%81%E6%97%A0%E7%BA%BF%E8%B5%B0%E5%A4%96%E7%BD%91%20-%20%E4%BB%A5%E5%8F%8A%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98/","content":"#删除原有的规则route delete 0.0.0.0#新增外网 172.16.188.254为网关(修改之前先看好)route add 0.0.0.0 mask 0.0.0.0 172.16.188.254 metric 30  -p#新增内网 16.0.0.0为内网网段 17.82.200.254为网关route add 16.0.0.0 mask 255.0.0.0 17.82.200.254 metric 10 -p\n\n带来的问题就是：内网的数据库，在启动之后。时不时会自动断开，导致影响正常工作，时不时得重启程序才能测试\n","categories":["软件"],"tags":["软件"]},{"title":"利用IDEA写Hexo博客的一些技巧","url":"/20170303-%E5%88%A9%E7%94%A8IDEA%E5%86%99Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/","content":"今天偶然看到有人说用idea写博客\n刚开始我觉得这样会很麻烦，后来想想以前写博客也是醉了\n先新建一个 _post 的快捷方式\n进去，然后到博客根目录\n打开Git Bash，然后执行\nhexo n &quot;你要写的文章题目&quot;\n然后在 _post 快捷方式打开刚刚新建的markdown文件，用markdownpad打开编辑。。。\n编辑完了回到Git Bash。。。。想想就很麻烦\n\n于是乎用IDEA打开博客根目录\nsources -&gt; _post -&gt; new -&gt; Edit File Templates\n\nname：markdown extension：md内容：\n---title: $&#123;NAME&#125;keywords: []date: $&#123;DATE&#125; $&#123;TIME&#125;tags: []categories:---\n接下来apply -&gt; *.md -&gt; 下面选择markdown\n以后新建markdown文件就会默认带上这个模版\n效果\ntitle: 利用IDEA写Hexo博客的一些技巧keywords: []date: 2017/3/3 10:51tags: []categories: hexo\n\n接下来到了发布的时间，于是我们可以设置一下Terminal（在setting里面），设置为bash（git目录下）\n设置完了之后Alt + F12 调出 Terminal 即可进行git操作\n到此，大功告成，我要去更新博客了\n","categories":["hexo"],"tags":["hexo","idea"]},{"title":"利用Java构造二叉树 - 前序、中序、后续、层次遍历","url":"/20171113-%E5%88%A9%E7%94%A8Java%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%20-%20%E5%89%8D%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E7%BB%AD%E3%80%81%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/","content":"定义最多有两棵子树的有序树，称为二叉树。二叉树是一种特殊的树。\n性质这里规定二叉树的根结点的层次为1。\n\n性质1：则二叉树的第i 层最多有2i-1个结点（在此二叉树的层次从1开始，i≥1）\n性质2：深度为k的二叉树最多有2k-1个结点。(k≥1)\n性质3：对任何一棵二叉树T, 如果其叶结点个数为n0, 度为2的非叶结点个数为n2, 则有      n0 &#x3D; n2 + 1\n性质4：具有 n(n&gt;0)个结点的完全二叉树的深度为⎣log2n⎦+1；⎦x⎦表示不超过x的最大整数。\n性质5：如果对一棵有n个结点的完全二叉树的结点按层序编号（从第1层到第⎣l og2n⎦ +1层，每层从左到右）,则对任一结点i（1≤i≤n),有：5.1 (1)如果i&#x3D;1，则结点i无双亲，是二叉树的根；如果i&gt;1，则其双亲是结点⎣i&#x2F;2⎦。5.2 (2) 如果2i&lt;&#x3D;n, 则结点i的左孩子结点是2i；否则，结点i为叶子结点，无左孩子结点。5.3 (3)如果2i＋1&lt;&#x3D;n，则结点i的右孩子是结点2i＋1; 否则，结点i为叶子结点，无右孩子结点。\n\n完整代码https://github.com/hisenyuan/btree\n二叉链表的实现package com.hisen.interview.tiger20171110.btree;/** * @author : yhx * @date : 2017/11/10 18:42 * @descriptor : 二叉树的 - 二叉链表实现 */public class LinkBTree implements BTree &#123;  private Object data;  private BTree lChild;  private BTree rChild;  public LinkBTree() &#123;    this.clearTree();  &#125;  public LinkBTree(Object data) &#123;    this.data = data;    this.rChild = null;    this.lChild = null;  &#125;  @Override  public void addLfetTree(BTree lChild) &#123;    this.lChild = lChild;  &#125;  @Override  public BTree getLfetTree() &#123;    return lChild;  &#125;  @Override  public void addRightTree(BTree rChild) &#123;    this.rChild = rChild;  &#125;  @Override  public BTree getRightTree() &#123;    return rChild;  &#125;  @Override  public void clearTree() &#123;    this.data = null;    this.rChild = null;    this.lChild = null;  &#125;  @Override  public int getDeep() &#123;    return deep(this);  &#125;  @Override  public Object getRootData() &#123;    return data;  &#125;  @Override  public boolean hasLeftTree() &#123;    if (lChild != null) &#123;      return true;    &#125;    return false;  &#125;  @Override  public boolean hasRightTree() &#123;    if (rChild != null) &#123;      return true;    &#125;    return false;  &#125;  @Override  public boolean isEmptyTree() &#123;    if ((lChild == null &amp;&amp; rChild == null &amp;&amp; data == null) || this == null) &#123;      return true;    &#125;    return false;  &#125;  @Override  public boolean isLeaf() &#123;    if (lChild == null &amp;&amp; rChild == null) &#123;      return true;    &#125;    return false;  &#125;  @Override  public void removeLeftTree() &#123;    lChild = null;  &#125;  @Override  public void removeRightTree() &#123;    rChild = null;  &#125;  @Override  public BTree getRoot() &#123;    return this;  &#125;  @Override  public void setRootData() &#123;    this.data = data;  &#125;  @Override  public int size() &#123;    return size(this);  &#125;  private int size(BTree bTree) &#123;    if (bTree == null) &#123;      return 0;    &#125; else if (bTree.isLeaf()) &#123;      return 1;    &#125; else &#123;      if (bTree.getLfetTree() == null) &#123;        return size(bTree.getRightTree()) + 1;      &#125; else if (bTree.getRightTree() == null) &#123;        return size(bTree.getLfetTree()) + 1;      &#125; else &#123;        return size(bTree.getLfetTree()) + size(bTree.getRightTree()) + 1;      &#125;    &#125;  &#125;  /**   * 计算二叉树的高度   */  private int deep(BTree bTree) &#123;    if (bTree.isEmptyTree()) &#123;      return 0;    &#125; else if (bTree.isLeaf()) &#123;      return 1;    &#125; else &#123;      if (bTree.getLfetTree() == null) &#123;        return deep(bTree.getRightTree()) + 1;      &#125; else if (bTree.getRightTree() == null) &#123;        return deep(bTree.getLfetTree()) + 1;      &#125; else &#123;        return Math.max(deep(bTree.getLfetTree()), deep(bTree.getRightTree())) + 1;      &#125;    &#125;  &#125;&#125;\n\n二叉树的各种遍历遍历方式：前序、中序、后序、层次\n\npackage com.hisen.interview.tiger20171110.btree;import java.util.LinkedList;/** * @author : yhx * @date : 2017/11/13 12:15 * @descriptor : 二叉树的遍历 */public class OrderBTree implements Visit &#123;  /**   * 前序遍历   *   * @param root 根节点   */  public void preOrder(BTree root) &#123;    visit(root);    if (root.getLfetTree() != null) &#123;      preOrder(root.getLfetTree());    &#125;    if (root.getRightTree() != null) &#123;      preOrder(root.getRightTree());    &#125;  &#125;  /**   * 中序遍历   *   * @param root 根节点   */  public void inOrder(BTree root) &#123;    if (root.getLfetTree() != null) &#123;      inOrder(root.getLfetTree());    &#125;    visit(root);    if (root.getRightTree() != null) &#123;      inOrder(root.getRightTree());    &#125;  &#125;  /**   * 后序遍历   * @param root 根节点   */  public void postOrder(BTree root) &#123;    if (root.getLfetTree() != null) &#123;      postOrder(root.getLfetTree());    &#125;    if (root.getRightTree() != null) &#123;      postOrder(root.getRightTree());    &#125;    visit(root);  &#125;  /**   * 层次遍历 - 利用队列   * @param bTree 根节点   */  public void levelOrder(BTree bTree)&#123;    if (bTree == null)&#123;      return;    &#125;    LinkedList&lt;BTree&gt; queue = new LinkedList&lt;&gt;();    BTree current = null;    // 将根节点入队列    queue.offer(bTree);    while (!queue.isEmpty())&#123;      // 队头元素出队列      current = queue.poll();      visit(current);      // 如果左节点不为空，入队列      if (current.getLfetTree() != null)&#123;        queue.offer(current.getLfetTree());      &#125;      // 如果右节点不为空，入队列      if (current.getRightTree() != null)&#123;        queue.offer(current.getRightTree());      &#125;    &#125;  &#125;  /**   * 访问二叉树的节点   * @param bTree 树的节点   */  @Override  public void visit(BTree bTree) &#123;    System.out.print(bTree.getRootData() + &quot;\\t&quot;);  &#125;&#125;\n\n参考http://blog.csdn.net/luoweifu/article/details/9077521\nhttp://blog.csdn.net/snow_7/article/details/51815787\n","categories":["java"],"tags":["java","二叉树","数据结构"]},{"title":"各系统查询数据时间分布情况统计-日志处理","url":"/20191025-%E5%90%84%E7%B3%BB%E7%BB%9F%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E6%97%B6%E9%97%B4%E5%88%86%E5%B8%83%E6%83%85%E5%86%B5%E7%BB%9F%E8%AE%A1-%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/","content":"一、说明做这件事的目的是为了了解一条数据库记录从创建到使用的一个情况;查询分布时间计算方式采用Top Percentile方式，就是按一定排序的数据，前面xx%的最大值是多少;TP999 1ms 代表某接口99.9%的响应都在1ms之内;\n最终的目的也就是为了知道数据多久之后可以打入冷宫，使用廉价存储;冷热数据分级处理有利于在性能和成本上达到一定的平衡;如把内存缓存时间设置为tp90所处的时间，那么90%的数据都能快速返回，其它少量数据回源处理;\n关键字java格式化输出java8streamparallelStream分组排序DoubleSummaryStatistics数据分析TP999\n二、效果日志源数据预览\n19-10-24.14:47:12.721 [THREAD-22000-18-T-17] INFO  FacadeImpl        - response yw:jiaoyi, orderId:123456, time:2019-10-24T14:46:44\n\n\n\nyw\ncount\nmin(ms)\nmax(ms)\ntp50(ms)\ntp90(ms)\ntp99(ms)\ntp999(ms)\n\n\n\nhisen\n1000\n1\n10000\n20\n60\n90\n130\n\n\nhisen-1\n200\n2\n16000\n16\n50\n70\n110\n\n\nps 输出是格式化的数据，并不是表格，可以通过:\nworld-&gt;粘贴输出文本-&gt;插入-&gt;表格-&gt;文本转换成表格-&gt;空格\n即可完成文字到表格转换\n这种过程可能比较low，但是也需要时间去处理，过程中还得配合linux命令等整合文本;\n三、代码完整：github-CallerAnalyze.java摘要如下：\n\n/** * @author hisenyuan * @date 2019-10-25 23:20 */public class CallerAnalyze &#123;    public static void main(String[] args) throws IOException &#123;        String filePath = &quot;/Users/hisenyuan/yw/yw.log&quot;;        ArrayList&lt;CallerTimeVo&gt; callerTimeVos = getCallerTimeVos(filePath);        System.out.println(&quot;size:&quot; + callerTimeVos.size());        System.out.printf(&quot;%-20s%-20s%-20s%-20s%-20s%-20s%-20s%-20s&quot;, &quot;yw&quot;, &quot;count&quot;, &quot;min(ms)&quot;, &quot;max(ms)&quot;, &quot;tp50(ms)&quot;, &quot;tp90(ms)&quot;, &quot;tp99(ms)&quot;, &quot;tp999(ms)&quot;);        System.out.println();        Map&lt;String, List&lt;CallerTimeVo&gt;&gt; callerMap = callerTimeVos.parallelStream().collect(Collectors.groupingBy(CallerTimeVo::getCaller));        callerMap.entrySet()                .stream()                .sorted(Comparator.comparingInt(value -&gt; value.getValue().size()))                .forEach(stringListEntry -&gt; &#123;                    String caller = stringListEntry.getKey();                    System.out.printf(&quot;%-20s&quot;, caller);                    List&lt;Long&gt; sorted = stringListEntry.getValue()                            .parallelStream()                            .map(CallerTimeVo::getDuration)                            .sorted(Long::compareTo)                            .collect(Collectors.toList());                    calTime(sorted);                &#125;);    &#125;    private static ArrayList&lt;CallerTimeVo&gt; getCallerTimeVos(String filePath) throws IOException &#123;        ArrayList&lt;CallerTimeVo&gt; callerTimeVos = Lists.newArrayList();        Files.asCharSource(new File(filePath), Charset.forName(&quot;UTF-8&quot;)).readLines(new LineProcessor&lt;String&gt;() &#123;            @Override            public boolean processLine(String line) &#123;                // 处理每一行                CallerTimeVo vo = getCreateTimeVo(line);                callerTimeVos.add(vo);                // false 会中断操作                return true;            &#125;            @Override            public String getResult() &#123;                return null;            &#125;        &#125;);        return callerTimeVos;    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"基本排序算法的时间/空间复杂度表","url":"/20170120-%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8/","content":"\n\n\n排序方法\n平均情况\n最好情况\n最坏情况\n辅助空间\n稳定性\n\n\n\n冒泡排序\nO(n²)\nO(nlogn)\nO(n²)\nO(1)\n稳定\n\n\n简单选择\nO(n²)\nO(n²)\nO(n²)\nO(1)\n稳定\n\n\n直接插入\nO(n²)\nO(n)\nO(n²)\nO(1)\n稳定\n\n\n希尔排序\nO(nlogn)~O(n²)\nO(n^1.3)\nO(n²)\nO(1)\n不稳定\n\n\n堆排序\nO(nlogn)\nO(nlogn)\nO(nlogn)\nO(1)\n不稳定\n\n\n归并排序\nO(nlogn)\nO(nlogn)\nO(nlogn)\nO(n)\n不稳定\n\n\n快速排序\nO(nlogn)\nO(nlogn)\nO(n²)\nO(nlogn)~O(n)\n不稳定\n\n\n以上\n","categories":["java"],"tags":["java","算法","排序"]},{"title":"多线程基础 & 进阶 丨 系统架构 - CSDN博主：说好不能打脸","url":"/20170818-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%20&%20%E8%BF%9B%E9%98%B6%20-%20CSDN%E5%8D%9A%E4%B8%BB%EF%BC%9A%E8%AF%B4%E5%A5%BD%E4%B8%8D%E8%83%BD%E6%89%93%E8%84%B8/","content":"发现一个不错的技术博客，分享一下\n有时间多学习多线程基础 &amp; 进阶系统架构\n","categories":["java"],"tags":["java","多线程"]},{"title":"多线程：优雅的使用ExecutorService进行压力测试","url":"/20180714-%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8ExecutorService%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/","content":"很多时候写功能或者接口需要进行压力测试，今天发现jwt在生成token的时候，如果输入都是一样的仅有一个签发时间不一样，生成的token是有可能是一样的\npublic void testCreate() &#123;        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(&quot;hisenyuan&quot;).build();        ExecutorService pool = new ThreadPoolExecutor(                20,                50,                10000L,                TimeUnit.MILLISECONDS,                new LinkedBlockingQueue&lt;&gt;(10240),                namedThreadFactory,                new ThreadPoolExecutor.AbortPolicy());        for (int i = 0; i &lt; 50; i++) &#123;            // 需要提交的内容            pool.execute(this::createTokenTest);        &#125;        pool.shutdown();        try &#123;            while (!pool.awaitTermination(500, TimeUnit.MILLISECONDS)) &#123;                LOGGER.debug(&quot;Waiting for terminate&quot;);            &#125;        &#125; catch (InterruptedException e) &#123;            LOGGER.error(e);        &#125;    &#125;\n","categories":["java"],"tags":["java"]},{"title":"如何学习NIO - NIO简单的例子","url":"/20170227-%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0NIO-NIO%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90/","content":"这里参照一些例子写了个简单的CS模型\n例子代码：NIO应用之简单的CS模型\n可以用来简单的理解一下java nio\n\n深入的理解可以看看下面的链接。\nJava NIO 系列教程:点击查看\n如何学习Java的NIO？:点击查看\n\n","categories":["java"],"tags":["java","nio"]},{"title":"如何成为专业的技术从业者 - 《程序员的职业素养》 - Bob大叔出品","url":"/20191008-%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%93%E4%B8%9A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BB%8E%E4%B8%9A%E8%80%85%20-%20%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB%E3%80%8B/","content":"很不错的一本书，作为程序员都值得去看一看，170+页周末一天可以看完， 还包括做笔记\n医学专业已经建立起一套严密的辅导体系软件行业建立一种包含学徒期、实习期、和长期指引的机制已是迫在眉睫\n有人指导大多数人都可以快速的成长，节省很多走弯路的时间当然，事在人为，只是说掌握了书中的那些要领，成为专业人员的几率更高，做更好的自己如果从小学开始就一直有人引路并且自己也愿意跟着走的话，应该会很棒，现在也不晚，抓住时间就好\n主要内容：专业主义学会说“不”，学会说“是”编码的正确姿势TDD卡塔练习很重要，肌肉反应验收测试(各方都一致同一的检验方式)测试策略，自动化测试是趋势时间管理，番茄工作法，注意力点数预估的概念以及方法压力，避免与面对协作，学会与人交流团队与项目，有凝聚力的团队战斗力强软件开发如医生一样培训更佳合适的工具事半功倍\n\n豆瓣链接：《代码简洁之道:程序员的职业素养》\n","categories":["read"],"tags":["read"]},{"title":"如何检测Linux VPS系统架构是Xen、KVM还是OpenVZ","url":"/20170208-%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8BLinux-VPS%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%98%AFXen%E3%80%81KVM%E8%BF%98%E6%98%AFOpenVZ/","content":"结果[root]# virt-whatxenxen-hvm\n\nCentoswget http://people.redhat.com/~rjones/virt-what/files/virt-what-1.12.tar.gztar zxvf virt-what-1.12.tar.gzcd virt-what-1.12/./configuremake &amp;&amp; make installvirt-what\n\nUbuntu&#x2F;debianapt-get install virt-whatvirt-what","tags":["linux"]},{"title":"安全的重叠构造器 - 最佳实践：Build Pattern","url":"/20180128-%E5%AE%89%E5%85%A8%E7%9A%84%E9%87%8D%E5%8F%A0%E6%9E%84%E9%80%A0%E5%99%A8%20-%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%9ABuild%20Pattern/","content":"effective java # 2\nBuilder模式，不直接生成想要的对象，而是让客户端利用所有必要的参数调用构造器，\n得到一个builder对象。然后客户端在builder对象上调用类似于setter的方法，\n来设置每个相关可选的参数，最后调用无参的build来生成不可变的对象。\n完整代码+测试：github:完整代码+测试\npublic class NutritionFacts &#123;  private final int servingSize;  private final int servings;  private final int calories;  private final int fat;  private final int sodium;  private final int carbohydrate;  private NutritionFacts(Builder builder) &#123;    servingSize = builder.servingSize;    servings = builder.servings;    calories = builder.calories;    fat = builder.fat;    sodium = builder.sodium;    carbohydrate = builder.carbohydrate;  &#125;  public static class Builder &#123;    // Required parameters    private final int servingSize;    private final int servings;    private int calories = 0;    private int fat = 0;    private int carbohydrate = 0;    private int sodium = 0;    public Builder(int servingSize, int servings) &#123;      this.servingSize = servingSize;      this.servings = servings;    &#125;    public Builder calories(int val) &#123;      calories = val;      return this;    &#125;    public Builder fat(int val) &#123;      this.fat = val;      return this;    &#125;    public Builder carbohydrate(int val) &#123;      this.carbohydrate = val;      return this;    &#125;    public Builder sodium(int val) &#123;      this.sodium = val;      return this;    &#125;    public NutritionFacts build() &#123;      return new NutritionFacts(this);    &#125;  &#125;  @Override  public String toString() &#123;    return &quot;NutritionFacts&#123;&quot; +        &quot;servingSize=&quot; + servingSize +        &quot;, servings=&quot; + servings +        &quot;, calories=&quot; + calories +        &quot;, fat=&quot; + fat +        &quot;, sodium=&quot; + sodium +        &quot;, carbohydrate=&quot; + carbohydrate +        &#x27;&#125;&#x27;;  &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"如何线程安全的使用HashMap","url":"/20171114-%E5%A6%82%E4%BD%95%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E4%BD%BF%E7%94%A8HashMap/","content":"线程不安全的原因\nHashMap底层是一个Entry数组，一旦发生Hash冲突的的时候，HashMap采用拉链法解决碰撞冲突.\nput方法也不是同步的\n扩容的方法也不是同步的\n\n参考：https://www.cnblogs.com/qiumingcheng/p/5259892.html\n如何线程安全的使用\n\nHashtable\nConcurrentHashMap\nSynchronizedMap\n\n####例子\n//HashtableMap&lt;String, String&gt; hashtable = new Hashtable&lt;&gt;();//synchronizedMapMap&lt;String, String&gt; synchronizedHashMap = Collections.synchronizedMap(new HashMap&lt;String, String&gt;());//ConcurrentHashMapMap&lt;String, String&gt; concurrentHashMap = new ConcurrentHashMap&lt;&gt;();\n####性能对比使用ExecutorService来并发运行5个线程，每个线程添加&#x2F;获取500K个元素。\n从数据可以看出，ConcurrentHashMap效率最高\n代码如下\n\npackage com.hisen.collection.map;import java.util.Collections;import java.util.HashMap;import java.util.Hashtable;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * @author : yhx * @date : 2017/11/14 23:36 * @descriptor : 测试不同的Map - 使用ExecutorService来并发运行5个线程，每个线程添加/获取500K个元素。 */public class CrunchifyConcurrentHashMapVsSynchronizedMap &#123;  private static final int THREAD_POOL_SIZE = 5;  public static Map&lt;String, Integer&gt; crunchifyHashTableObject = null;  public static Map&lt;String, Integer&gt; crunchifySynchronizedMapObject = null;  public static Map&lt;String, Integer&gt; crunchifyConcurrentHashMapObject = null;  public static void main(String[] args) throws InterruptedException &#123;    // Test with Hashtable Object    crunchifyHashTableObject = new Hashtable&lt;&gt;();    crunchifyPerformTest(crunchifyHashTableObject);    // Test with synchronizedMap Object    crunchifySynchronizedMapObject = Collections.synchronizedMap(new HashMap&lt;String, Integer&gt;());    crunchifyPerformTest(crunchifySynchronizedMapObject);    // Test with ConcurrentHashMap Object    crunchifyConcurrentHashMapObject = new ConcurrentHashMap&lt;&gt;();    crunchifyPerformTest(crunchifyConcurrentHashMapObject);    /**     * 测试结果     Test start for:class java.util.Hashtable     2500K entried added/retrieved in 2953 ms     2500K entried added/retrieved in 4649 ms     2500K entried added/retrieved in 2736 ms     2500K entried added/retrieved in 2628 ms     2500K entried added/retrieved in 2621 ms     For class java.util.Hashtable the average time is 3117 ms     Test start for:class java.util.Collections$SynchronizedMap     2500K entried added/retrieved in 3036 ms     2500K entried added/retrieved in 2881 ms     2500K entried added/retrieved in 2692 ms     2500K entried added/retrieved in 3020 ms     2500K entried added/retrieved in 2806 ms     For class java.util.Collections$SynchronizedMap the average time is 2887 ms     Test start for:class java.util.concurrent.ConcurrentHashMap     2500K entried added/retrieved in 4378 ms     2500K entried added/retrieved in 1126 ms     2500K entried added/retrieved in 1008 ms     2500K entried added/retrieved in 935 ms     2500K entried added/retrieved in 1069 ms     For class java.util.concurrent.ConcurrentHashMap the average time is 1703 ms     */  &#125;  private static void crunchifyPerformTest(Map&lt;String, Integer&gt; crunchifyThreads)      throws InterruptedException &#123;    System.out.println(&quot;Test start for:&quot; + crunchifyThreads.getClass());    long avgTime = 0;    for (int i = 0; i &lt; 5; i++) &#123;      long startTime = System.nanoTime();      ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);      for (int j = 0; j &lt; THREAD_POOL_SIZE; j++) &#123;        executorService.execute(new Runnable() &#123;          @Override          public void run() &#123;            for (int k = 0; k &lt; 500000; k++) &#123;              Integer crunchifyRandomNumber = (int) Math.ceil(Math.random() * 550000);              // Retrieve value. We are not using it anywhere              Integer crunchifyValue = crunchifyThreads.get(String.valueOf(crunchifyRandomNumber));              // Put value              crunchifyThreads.put(String.valueOf(crunchifyRandomNumber), crunchifyRandomNumber);            &#125;          &#125;        &#125;);      &#125;      // Make sure executor stops      executorService.shutdown();      // Blocks until all tasks have completed execution after a shutdown request      executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);      long entTime = System.nanoTime();      long totalTime = (entTime - startTime) / 1000000L;      avgTime += totalTime;      System.out.println(&quot;2500K entried added/retrieved in &quot; + totalTime + &quot; ms&quot;);    &#125;    System.out.println(&quot;For &quot; + crunchifyThreads.getClass() + &quot; the average time is &quot; + avgTime / 5 + &quot; ms\\n&quot;);  &#125;&#125;\n","categories":["java"],"tags":["HashMap"]},{"title":"定时任务的一点思考 - Java","url":"/20181027-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83%20-%20Java/","content":"一、背景交代\n部署方式：多点\n业务概要：处理一批数据，可以失败重试\n\n二、实现方式\n主表入一条控制数据，两个控制字段：next，process(0:空闲,1:处理中)，子表具体处理业务\n定时任务只扫描主表，通过其他业务字段，加上主表两个控制字段(now&gt;netx,process&#x3D;0)，捞出需要处理的数据\n当开始处理数据时候，先更新process&#x3D;1，如果更新成功，说明拿到锁(假装是一个分布式锁，因为两台机器)\n如果拿到3的锁，则开始处理子表的业务数据，一次查100条(limit 0,100 desc update_time)，直到子表全部处理完成\n如果遇到错误，把错误数据的id存起来，更新子表重试次数，和更新时间，如果达到最大失败次数，更改状态(让4查不出这条数据)\n如果遇到当前处理数据的id存在List中，那么说明当前所有的数据都处理过一次了，退出(如果不判断，失败后会无限循环，直到全部成功)\n\n三、伪代码public void process(MainTable mainTable) &#123;    // 1. 锁控制表    boolean lock = service.lock(mainTable);    LOGGER.info(&quot;lockFlag:,&quot;, lock, &quot;,mainTableId:&quot;, mainTable.getId());    if (!lockFlag) &#123;        return;    &#125;    List&lt;Long&gt; repeatIds = new ArrayList&lt;&gt;();    // 2. 根据主表id，下次扫描时间，每次查询100条    List&lt;SubTable&gt; subTables;    do &#123;      //扫描子表中的数据        subTables = service.querySub(mainTable.getId(), 100);        for (SubTable sub : subTables) &#123;            if (repeatIds.contains(batch.getId())) &#123;                subTables = null;                break;            &#125;            // 处理业务            handle(mainTable, subTables, repeatIds);        &#125;    &#125; while (!CollectionUtils.isEmpty(subTables));    // 5. 检查是否全部终态    checkHandleDone(mainTable);    // 7. 释放锁    boolean unLock = service.unLock(mainTable);    LOGGER.info(&quot;lockFlag:,&quot;, unLock, &quot;,mainTableId:&quot;, mainTable.getId());&#125;\n","categories":["java"],"tags":["java","定时任务"]},{"title":"Java实现Singleton最佳方法 - Enum","url":"/20180127-%E5%AE%9E%E7%8E%B0Singleton%E6%9C%80%E4%BD%B3%E6%96%B9%E6%B3%95%20-%20Enum/","content":"effective java：\n单元素的枚举类型已经成为实现Singleton的最佳方法\n理由：\n\n因为枚举单例有序列化和线程安全的保证\n避免反射和并发困扰\n\n单例模式模式：完整代码+测试\n主要代码：\npublic class EnumSingleton &#123;  private EnumSingleton() &#123;  &#125;  public static EnumSingleton getInstance() &#123;    return Singleton.INSTANCE.getInstance();  &#125;  private enum Singleton &#123;    INSTANCE;    private EnumSingleton singleton;    Singleton() &#123;      singleton = new EnumSingleton();    &#125;    public EnumSingleton getInstance() &#123;      return singleton;    &#125;  &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"尝试使用NIO读取文件","url":"/20170601-%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8NIO%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/","content":"具体代码如下，这里获取出来的文件大小是准确的\nFileInputStream方式获取出来的大小会有差异\nNIO与IO的对比详见：NIOCopy.java\n/**   * 利用NIO进行读写文件   *   * @param oldFileName 原文件的路径   * @param newFileName 新文件的路径   */  public static void nioCopy(String oldFileName, String newFileName) &#123;    try &#123;      FileChannel fileChannelIn = new FileInputStream(new File(oldFileName)).getChannel();      FileChannel fileChannelOut = new FileOutputStream(new File(newFileName)).getChannel();      //获取文件大小      long size = fileChannelIn.size();      System.out.printf(&quot;文件大小为：%s byte \\n&quot;,size);      //缓冲      ByteBuffer byteBuffer = ByteBuffer.allocate(1024);      long start = System.currentTimeMillis();      while (fileChannelIn.read(byteBuffer) != -1) &#123;        //准备写        byteBuffer.flip();        fileChannelOut.write(byteBuffer);        //准备读        byteBuffer.clear();      &#125;      long end = System.currentTimeMillis();      System.out.printf(&quot;NIO方式复制完成，耗时 %s 秒\\n&quot;,(end-start)/1000);      //关闭      fileChannelIn.close();      fileChannelOut.close();    &#125; catch (FileNotFoundException e) &#123;      e.printStackTrace();    &#125; catch (IOException e) &#123;      e.printStackTrace();    &#125;  &#125;","categories":["java"],"tags":["java"]},{"title":"布隆过滤器 丨 简介 - Java demo","url":"/20170907-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%20%E4%B8%A8%20%E7%AE%80%E4%BB%8B%20-%20Java%20demo/","content":"概述布隆过滤器的作用是加快判定一个元素是否在集合中出现的方法。\n因为其主要是过滤掉了大部分元素间的精确匹配，故称为过滤器。\n\n其应用场景为需要频繁在一个海量的集合中查找某个元素是否存在。\n并且通常，这个值不在集合中。\n比如Google chrome用此方法检查一个url是否在恶意url库中。\n简单的例子假设有一些字符串，假设有一个字符串a，要在集合B中查找其是否在集合B中。最笨的方法是遍历集合B中的每个元素bi，精确匹配a是否等于bi。若集合B中有N个元素，则最坏情况下需要执行N次精确匹配。\n一个改进的方法是将a和B中每个字符串按照特定规则映射为数字，称为hash值。规则可以任意设置。比如取各字符串的首字母和尾字母的编码之乘积，取奇数个字符的编码执行异或，等。将比较字符串问题变成一个比较数字的问题。比较字符串需要从头到尾比较，而数字的比较会快很多。\n需要注意的是，当两个字符串相同时，采用相同的映射规则得到的数字一定相同。但当两个字符串不同时，得到的字符串不一定不同。所以，当我们发现两个字符串的hash值相同时，两个字符串不一定相同，所以需要进一步去精确匹配两个字符串是否相同。但采用hash值方法已经能够过滤掉一部分以前需要精确匹配的计算量。仅当hash值相同（假设hash值通过字符串首尾字母计算得来，则当两个字符串首尾字母相同时hash值相同）时才去比较字符串本身。若选择hash值合理，则性能将大幅提高。\n布隆过滤器通过将一个字符串使用多个不同的hash值计算方法，映射为多个不同的hash值，当所有这些hash值完全相同时，才认为两个字符串相同。从而进一步降低了放生hash值相同的可能性，从而进一步提高了过滤的性能。\nJava代码实现算法使用了md5值来生成n个不同的hash值\n\npackage com.hisen.interview;import java.math.BigInteger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;/** * 布隆过滤器 - 测试某个元素不存在集合中 * Created by hisenyuan on 2017/9/7 at 8:50. */public class BloomFilter &#123;  public static final int NUM_SLOTS = 1024 * 1024 * 8;  public static final int NUM_HASH = 8;  private BigInteger bitmap = new BigInteger(&quot;0&quot;);  public static void main(String[] args) &#123;    BloomFilter bf = new BloomFilter();    ArrayList&lt;String&gt; contents = new ArrayList&lt;&gt;();    contents.add(&quot;sldkjelsjf&quot;);    contents.add(&quot;ggl;ker;gekr&quot;);    contents.add(&quot;wieoneomfwe&quot;);    contents.add(&quot;sldkjelsvrnlkjf&quot;);    contents.add(&quot;ksldkflefwefwefe&quot;);    for (int i = 0; i &lt; contents.size(); i++) &#123;      bf.adElement(contents.get(i));    &#125;    System.out.println(bf.check(&quot;sldkjelsvrnlkjf&quot;));    System.out.println(bf.check(&quot;sldkjelsvrnkjf&quot;));  &#125;  private void adElement(String message) &#123;    for (int i = 0; i &lt; NUM_HASH; i++) &#123;      int hashCode = getHash(message, i);      if (!bitmap.testBit(hashCode)) &#123;        bitmap = bitmap.or(new BigInteger(&quot;1&quot;).shiftLeft(hashCode));      &#125;    &#125;  &#125;  private boolean check(String message) &#123;    for (int i = 0; i &lt; NUM_HASH; i++) &#123;      int hashCode = getHash(message,i);      if (this.bitmap.testBit(hashCode))&#123;        return false;      &#125;    &#125;    return true;  &#125;  private int getHash(String message, int i) &#123;    try &#123;      MessageDigest md5 = MessageDigest.getInstance(&quot;md5&quot;);      message = message + String.valueOf(i);      byte[] bytes = message.getBytes();      md5.update(bytes);      BigInteger bi = new BigInteger(md5.digest());      return Math.abs(bi.intValue()) % NUM_SLOTS;    &#125; catch (NoSuchAlgorithmException e) &#123;      e.printStackTrace();    &#125;    return -1;  &#125;&#125;\n","categories":["java"],"tags":["算法"]},{"title":"常见算法：Java求最小公倍数和最大公约数三种算法","url":"/20171021-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%EF%BC%9AJava%E6%B1%82%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E5%92%8C%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%89%E7%A7%8D%E7%AE%97%E6%B3%95/","content":"最小公倍数：数论中的一种概念，两个整数公有的倍数成为他们的公倍数\n其中一个最小的公倍数是他们的最小公倍数\n同样地，若干个整数公有的倍数中最小的正整数称为它们的最小公倍数\n\n求最小公倍数算法：\n最小公倍数&#x3D;两整数的乘积÷最大公约数\n\n求最大公约数算法：\n(1) 辗转相除法有两整数a和b：\n\na%b得余数c\n若c&#x3D;0，则b即为两数的最大公约数\n若c≠0，则a&#x3D;b，b&#x3D;c，再回去执行1\n\n例如:求27和15的最大公约数过程为\n\n27÷15余12\n5÷12余3\n12÷3余0\n\n因此，3即为最大公约数\n\n代码实现：\n/** * 最大公约数 */public int getGCD(int m, int n) &#123;  if (n == 0) &#123;    return m;  &#125;  return getGCD(n, m % n);&#125;/** * 最小公倍数 * @param m * @param n * @return */public int getLCM(int m, int n) &#123;  int mn = m * n;  return mn / getGCD(m, n);&#125;/**   * 辗转相除求最大公约数   * 有两整数a和b：   * ① a%b得余数c   * ② 若c=0，则b即为两数的最大公约数   * ③ 若c≠0，则a=b，b=c，再回去执行①   */  public int divisionGCD(int m, int n) &#123;    int a;    while (n != 0) &#123;      a = m % n;      m = n;      n = a;    &#125;    return m;  &#125;  /**   * 相减法求最大公约数   * 有两整数a和b：   * ① 若a&gt;b，则a=a-b   * ② 若a&lt;b，则b=b-a   * ③ 若a=b，则a（或b）即为两数的最大公约数   * ④ 若a≠b，则再回去执行①   */  public int subtractionGCD(int m,int n)&#123;    while(m != n)&#123;      if (m&gt;n)&#123;        m = m-n;      &#125;else &#123;        n = n - m;      &#125;    &#125;    return m;  &#125;\n","categories":["算法"],"tags":["java","算法"]},{"title":"性能指标的含义与计算方式:TP50、TP90、TP99、TP999","url":"/20190801-%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%E7%9A%84%E5%90%AB%E4%B9%89%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F:TP50%E3%80%81TP90%E3%80%81TP99%E3%80%81TP999/","content":"零、本文背景一个接口的关键指标应该就是响应速度，要想提高响应速度，结果在缓存中最好;那么怎么确定一个合理的缓存时间，以平衡性能与成本呢？我们可以通过记录业务请求，看读取缓存的时间分布，比如 99% 的请求都是 1天内;\n近期在做日志分析，找到比较理想的一个缓存过期时间，使 90% 的查询都能被缓存覆盖;发现有些同学不太懂 TP 指标，故写文记录一下。\n一、性能指标含义常见指标：TP50、TP80、TP90、TP99、TP999正式解释：TP&#x3D;Top Percentile，Top百分数，是一个统计学术语，与平均数、中位数都是一类;通俗理解：TP99 100ms，99%的查询都能在100ms内返回;本质理解：它是一个分位值，看数据的一个分布;\n二、性能指标计算计算方式：拿到所有请求耗时，升序排序，取 99% 位置的数据，就是 TP99;比如说：拿 100 次请求的耗时，升序排序，取第 99 个的数据，就是TP99的值;\n具体的代码方式就是，先算出耗时，放入 List ，然后排序，按指定的下标取值即可;\n代码如下：\n\nprivate void calTime(List&lt;Long&gt; timeDurations) &#123;    timeDurations.sort(Long::compareTo);    double tp50 = timeDurations.size() * 0.5;    double tp90 = timeDurations.size() * 0.9;    double tp99 = timeDurations.size() * 0.99;    double tp999 = timeDurations.size() * 0.999;    // 基础统计，包含max、min、count、avg信息;    DoubleSummaryStatistics doubleSummaryStatistics = timeDurations.stream().mapToDouble(Long::longValue).summaryStatistics();    System.out.println(JSON.toJSONString(doubleSummaryStatistics));    // Math.ceil() 向上取整    System.out.println(&quot;tp50:&quot; + timeDurations.get((int) Math.ceil(tp50)));    System.out.println(&quot;tp90:&quot; + timeDurations.get((int) Math.ceil(tp90)));    System.out.println(&quot;tp99:&quot; + timeDurations.get((int) Math.ceil(tp99)));    System.out.println(&quot;tp999:&quot; + timeDurations.get((int) Math.ceil(tp999)));&#125;\n","categories":["java"],"tags":["java"]},{"title":"手机平板电脑原样显示html效果 - html知识","url":"/20170208-%E6%89%8B%E6%9C%BA%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91%E5%8E%9F%E6%A0%B7%E6%98%BE%E7%A4%BAhtml%E6%95%88%E6%9E%9C-html%E7%9F%A5%E8%AF%86/","content":"有时候可能你会发现在电脑上显示300x300大小的东西看起来很正常但是用手机去访问的话，就出现等比例缩小了但是300x300的大小完全不用缩小直接等大不是更好？\n在head加上这两行代码，可以做到原样输出\n&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;","tags":["html"]},{"title":"数组中只有一个数出现奇数次 | 利用异或最高效","url":"/20190404-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1%20%7C%20%E5%88%A9%E7%94%A8%E5%BC%82%E6%88%96%E6%9C%80%E9%AB%98%E6%95%88/","content":"一、背景题意：一个数组有奇数个元素，其中只有一个元素出现一次，其它都出现了2次\n方案A：利用hashMap存储出现的次数，然后遍历，复杂度O(3&#x2F;2N)&#x3D;O(N);方案B：利用bitmap,根据数组元素的大小确定位置，做取反(0-&gt;1-&gt;0);方案C：利用异或的特性快速找出，最简单，高效;\n二、异或a^a&#x3D;00^a&#x3D;a异或支持：交换率、结合率因此：a^b^c^b^c&#x3D;a^(b^b)^(c^c)&#x3D;a\n三、代码\npublic static void main(String[] args) &#123;    int[] mayDup = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1&#125;;    int res = mayDup[0];    for (int i = 1; i &lt; mayDup.length; i++) &#123;        System.out.print(&quot;res^mayDup[i]: &quot; + res + &quot;^&quot; + mayDup[i]);        res ^= mayDup[i];        System.out.println(&quot;=&quot; + res);    &#125;    System.out.println(res);&#125;\n\n四、后记这只是一个场景的妙用，实际当中很难遇到这种情况。所以不管什么时候还是得多去刷题，没事刷几道，熟然生巧。\n","categories":["java"],"tags":["java","技巧"]},{"title":"最近在看的Java系列文章 - 计算机程序的思维逻辑","url":"/20170814-%E6%9C%80%E8%BF%91%E5%9C%A8%E7%9C%8B%E7%9A%84Java%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%20-%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%80%9D%E7%BB%B4%E9%80%BB%E8%BE%91/","content":"计算机程序的思维逻辑这个系列的文章还不错\n目录—微信公众号\n目录—掘金(1-6缺失)\n相关笔记或者代码相关笔记或者代码 - github地址\n说明版权归原作者所有\n感觉文章不错，一边看一边实践。\n有时候从头开始学习也会有另一番风味。\n兴趣是最好的老师，唯有坚持才是实现梦想的唯一途径。\n","categories":["java"],"tags":["java"]},{"title":"有道云笔记支持的markdown语法 - hexo试一试","url":"/20170807-%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E6%94%AF%E6%8C%81%E7%9A%84markdown%E8%AF%AD%E6%B3%95%20-%20hexo%E8%AF%95%E4%B8%80%E8%AF%95/","content":"markdown语法分割线\n\n\n列表1\n列表2\n列表3\n\n//插入代码public void main(String[] args)&#123;    System.out.println(&quot;Hello World!&quot;);&#125;\n\n一级标题二级标题三级标题四级标题五级标题六级标题删除线\n\n引用，只能写在一行\n\n\n 未勾选\n 勾选的\n\n梦殇国际\n\nmarkdown源码\nmarkdown语法--分割线---1. 列表12. 列表23. 列表3//插入代码public void main(String[] args)&#123;    System.out.println(&quot;Hello World!&quot;);&#125;# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题~~删除线~~&gt; 引用，只能写在一行- [ ] 未勾选- [x] 勾选的[梦殇国际](http://www.714.hk)![image](http://www.714.hk/logo.png)"},{"title":"查看linux进程 - 多重方式","url":"/20170227-%E6%9F%A5%E7%9C%8Blinux%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E9%87%8D%E6%96%B9%E5%BC%8F/","content":"可以使用ps命令。它能显示当前运行中进程的相关信息，包括进程的PID。\nLinux和UNIX都支持ps命令，显示所有运行中进程的相关信息。\nps命令能提供一份当前进程的快照。如果想状态可以自动刷新，可以使用top命令。\nps命令输入下面的ps命令，显示所有运行中的进程：\nps aux | less\n这个命令按  q  退出后面加了“| less”就会分页显示，如果去掉会一次性显示出所有结果\n输出：\n\nhisen@hisen-server:~$ ps aux | lessUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.2  0.5  37956  6028 ?        Ss   09:03   0:02 /sbin/initroot         2  0.0  0.0      0     0 ?        S    09:03   0:00 [kthreadd]root         3  0.0  0.0      0     0 ?        S    09:03   0:00 [ksoftirqd/0]root         4  0.0  0.0      0     0 ?        S    09:03   0:00 [kworker/0:0]root         5  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [kworker/0:0H]root         6  0.0  0.0      0     0 ?        S    09:03   0:00 [kworker/u2:0]root         7  0.0  0.0      0     0 ?        S    09:03   0:00 [rcu_sched]root         8  0.0  0.0      0     0 ?        S    09:03   0:00 [rcu_bh]root         9  0.0  0.0      0     0 ?        S    09:03   0:00 [migration/0]root        10  0.0  0.0      0     0 ?        S    09:03   0:00 [watchdog/0]root        11  0.0  0.0      0     0 ?        S    09:03   0:00 [kdevtmpfs]root        12  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [netns]root        13  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [perf]root        14  0.0  0.0      0     0 ?        S    09:03   0:00 [khungtaskd]root        15  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [writeback]root        16  0.0  0.0      0     0 ?        SN   09:03   0:00 [ksmd]root        17  0.0  0.0      0     0 ?        SN   09:03   0:00 [khugepaged]root        18  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [crypto]root        19  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [kintegrityd]root        20  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [bioset]root        21  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [kblockd]root        22  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [ata_sff]root        23  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [md]root        24  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [devfreq_wq]root        25  0.0  0.0      0     0 ?        S    09:03   0:00 [kworker/u2:1]root        26  0.0  0.0      0     0 ?        S    09:03   0:00 [kworker/0:1]root        28  0.0  0.0      0     0 ?        S    09:03   0:00 [kswapd0]root        29  0.0  0.0      0     0 ?        S&lt;   09:03   0:00 [vmstat]root        30  0.0  0.0      0     0 ?        S    09:03   0:00 [fsnotify_mark]root        31  0.0  0.0      0     0 ?        S    09:03   0:00 [ecryptfs-kthrea]:\n\n\n查看系统中的每个进程ps -Aps -e\n-A：显示所有进程\na：显示终端中包括其它用户的所有进程\nx：显示无控制终端的进程\n显示进程的树状图pstree\n输出\nhisen@hisen-server:~$ pstreesystemd─┬─accounts-daemon─┬─&#123;gdbus&#125;        │                 └─&#123;gmain&#125;        ├─acpid        ├─agetty        ├─atd        ├─cron        ├─dbus-daemon        ├─dhclient        ├─2*[iscsid]        ├─java───14*[&#123;java&#125;]        ├─lvmetad        ├─lxcfs───2*[&#123;lxcfs&#125;]        ├─mdadm        ├─polkitd─┬─&#123;gdbus&#125;        │         └─&#123;gmain&#125;        ├─redis-server───2*[&#123;redis-server&#125;]        ├─rsyslogd─┬─&#123;in:imklog&#125;        │          ├─&#123;in:imuxsock&#125;        │          └─&#123;rs:main Q:Reg&#125;        ├─snapd───5*[&#123;snapd&#125;]        ├─sshd───sshd───sshd───bash───pstree        ├─systemd───(sd-pam)        ├─systemd-journal        ├─systemd-logind        ├─systemd-timesyn───&#123;sd-resolve&#125;        └─systemd-udevd","categories":["linux"],"tags":["linux"]},{"title":"浅谈volatile","url":"/20190612-%E6%B5%85%E8%B0%88volatile/","content":"一、volatile是什么volatile是Java提供的一种轻量级的同步机制保证变量的修改其它线程立马可见，解决部分并发问题\n二、volatile局限性无法解决复合操作，例如 i++ i–这种操作原因：i++操作分三步\n\n读取i&#x3D;1；\ni&#x3D;i+1&#x3D;2；\ni&#x3D;2写入主存有可能在3写入之前，其它线程已经对i进行了修改，比如改为100了，结果覆盖写入了2\n\n三、volatile原理volatile底层依靠指令重排序来实现内存可见性的具体的规则如下\n\n当第二个操作是voaltile写时，无论第一个操作是什么，都不能进行重排序\n当第一个操作是volatile读时，不管第二个操作是什么，都不能进行重排序\n当第一个操作是volatile写时，第二个操作是volatile读时，不能进行重排序\n\n\n四、 参考https://www.cnblogs.com/chengxiao/p/6528109.html\n","categories":["java"],"tags":["java"]},{"title":"浏览器出现：Reimage Repair - zh.reimageplus.com","url":"/20170705-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%87%BA%E7%8E%B0%EF%BC%9AReimage%20Repair%20-%20zh.reimageplus.com/","content":"近期使用chrome出现打开一些网站老是弹出莫名其妙的网址\n最终指向的都是Reimage Repair，网址zh.reimageplus.com网上一查，貌似因为插件被污染的原因\n我关闭chrome所有的插件，一个一个排查，最后找到了一个插件出问题\n本来还想去举报，发现这个插件被下架了\n问题排查\n右上角菜单按钮 ---更多工具 --- 扩展程序 --- 关闭所有插件然后一个个打开，测试某些网页是否还会继续跳出那恶心的东西然后就找到问题了。\n","categories":["软件"],"tags":["病毒"]},{"title":"笔记本在BIOS Setup里面设置双显卡模式","url":"/20170509-%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%9C%A8BIOS%20Setup%E9%87%8C%E9%9D%A2%E8%AE%BE%E7%BD%AE%E5%8F%8C%E6%98%BE%E5%8D%A1%E6%A8%A1%E5%BC%8F/","content":"我的本子是双显卡的，英特尔的核芯显卡和英伟达的独显\n但是之前完全没有把独显用上，在英伟达的设置里选择使用显卡感觉也没有用\n后来找到在BIOS里面设置，貌似管用，联想的机子可以看看\n其他的机子应该也差不多\n连接：http://iknow.lenovo.com/detail/dc_102471.html\n6. IdeaPad Z380/Z480/Z580/U310/U410，Lenovo G480A/V370A/V470A/V570A依次选择“Configuration”、“Graphic Device”，其中有两个选项：Optimus表示可切换显卡模式；UMA Only表示集显模式。选择好后，按F10并根据提示保存退出即可。\n我的默认居然是：UMA Only\n","categories":["软件"],"tags":["软件"]},{"title":"线上事故记录 - 死锁","url":"/20180809-%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85%E8%AE%B0%E5%BD%95%20-%20%E6%AD%BB%E9%94%81/","content":"一、背景描述在支付业务当中，每一笔交易都得进行记账。\n两种情况：\n\n第一步先冻结，交易成功，解冻并扣款(A账户-&gt;B账户-&gt;C账户);\n第一步先冻结，交易失败，解冻并归还(A账户-&gt;B账户-&gt;A账户);\n\n上面的两种情况各自都是在一个事物当中。\n二、问题描述在同一个商户进行并发操作的时候，交易有成功有失败；\n\n成功的时候钱是：A账户-&gt;B账户;\n失败的时候钱是：B账户-&gt;A账户;\n\n因为在各自的事物当中更新两条记录的信息，并且使用了for update（innodb引擎）ß在某一瞬间：成功的先锁A账户，失败的先锁了B记录\n接下来就两个事物各自持有对方想要的资源，并且不释放已经占有的资源，就造成了死锁\n三、解决方法在程序里面，更新两个账户的钱的时候，始终先更新ID更小的那条记录，那样不管多少个事务同时进来\n都会按照固定的顺序去持有资源，比如先A再B，这样就不会出现各自持有对方想要的资源\nID ACCOUNT10 A11 B\n每个事务都是先锁定A再锁定B，拿不到锁就一直等待\n","categories":["java"]},{"title":"网关、快捷支付，代收代付，账户托管，二维码扫码支付","url":"/20170213-%E7%BD%91%E5%85%B3%E3%80%81%E5%BF%AB%E6%8D%B7%E6%94%AF%E4%BB%98%EF%BC%8C%E4%BB%A3%E6%94%B6%E4%BB%A3%E4%BB%98%EF%BC%8C%E8%B4%A6%E6%88%B7%E6%89%98%E7%AE%A1%EF%BC%8C%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/","content":"一、网关支付这是在线支付的最普遍形式。大致支付过程：第三方支付公司作为代理（网关），接入一堆银行。用户在网关页面（可以在商户端，也可以第三方支付平台端）选择银行，页面跳转到第三方支付平台，然后重定向到对应的银行，用户在银行电子银行官网，采用网银（个人网银或企业网银）完成支付。\n网关支付分为：B2C、B2B两类。涉及的概念：网银支付、银行卡支付。\n我们一般说的网关支付是指在PC上的在线支付，由于国内银行基本上都要求安装对应的安全控件，且需要银行的网银客户端，这也是大家经常抱怨网银不支持MAC&#x2F;Linux等操作系统、不支持除IE外的浏览器等兼容性问题。在手机端也有类似网关支付的形态，但由于操作过程较为麻烦，体验不好，一般都采用快捷支付等支付形式。\n二、快捷支付\n快捷支付一般是指首次需要验证卡要素，生成协议号或者TOKEN,后面支付直接凭协议号扣款。走的交易形式是消费。快捷支付相比于我们原先说的无磁无密支付[MOTO]在限额上有劣势，体验上有优势。一个相当于长期关系，MOTO相当于一次性关系，每次来都要输入卡要素。\n三、代收代付代收代付业务是我社利用自身的结算便利，接受客户的委托代为办理指定款项的收付事宜的业务。\n由中介公司或第三方代为收取和支付费用。\n顾名思义，代收代付是指先付出去，然后再收回来，金额必须相等。\n比如代办运输业务，如果是收取一定比率的手续费，就改变了性质。\n代收代付业务分录：\n代付时，借：其他应收款  贷：银行存款\n收回时，借：银行存款    贷：其他应收款\n四、账户托管待完善\n五、二维码扫码支付微信扫码业务流程说明：\n\n商户后台系统根据用户选购的商品生成订单。\n用户确认支付后调用微信支付【统一下单API】生成预支付交易；\n微信支付系统收到请求后生成预支付交易单，并返回交易会话的二维码链接code_url。\n商户后台系统根据返回的code_url生成二维码。\n用户打开微信“扫一扫”扫描二维码，微信客户端将扫码内容发送到微信支付系统。\n微信支付系统收到客户端请求，验证链接有效性后发起用户支付，要求用户授权。\n用户在微信客户端输入密码，确认支付后，微信客户端提交授权。\n微信支付系统根据用户授权完成支付交易。\n微信支付系统完成支付交易后给微信客户端返回交易结果，并将交易结果通过短信、微信消息提示用户。微信客户端展示支付交易结果页面。\n微信支付系统通过发送异步消息通知商户后台系统支付结果。商户后台系统需回复接收情况，通知微信后台系统不再发送该单的支付通知。\n未收到支付通知的情况，商户后台系统调用【查询订单API】。\n商户确认订单已支付后给用户发货。\n\n日后需要用到这方面的东西，先整理一番\n系统的学习或者理解之后再来说说深层次的东西。\n","categories":["biz"],"tags":["支付"]},{"title":"解决：eclipse下*.properties显示Unicode乱码","url":"/20170208-%E8%A7%A3%E5%86%B3%EF%BC%9Aeclipse%E4%B8%8B-properties%E6%98%BE%E7%A4%BAUnicode%E4%B9%B1%E7%A0%81/","content":"eclipse的*.properties文件，默认的编码方式是iso-8859-1\nWindow -&gt; preferences -&gt; general -&gt; Contents Types -&gt; Text(展开) -&gt; Java Aroperties File(点击) -&gt; *.properties(locked)(点击) -&gt; 把iso-8859-1改为 UTF-8 -&gt; Update -&gt; OK\n然后就可以正常显示中文了\n","tags":["java","乱码","properties"]},{"title":"聊聊MySQL的隔离级别 | MySQL隔离级别原理","url":"/20190413-%E8%81%8A%E8%81%8AMySQL%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","content":"这是之前的一个帖子：oracle - mysql - 数据库事务隔离级别介绍写的不全面， 按现在的理解，重新写一个；\n一、名词解释脏读：在一个查询事务过程中，读到了其它事务没有提交的数据；不可重复读：一个事务查询过程中，多次查询得到了不一致的结果，原因是：有别的更新事务提交了；幻读：一个事务查询过程中，多次查询得到了不一致的结果，原因是：有别的删除事务&#x2F;插入事务提交了；\n二、数据库隔离级别| name | 名称 | 脏读 | 不可重复读 | 幻读 | 加锁读 ||:—–|:—–|:—–|:—–|:—–|:—–| :—–|| Read uncommitted |  读未提交 | Yes | Yes | Yes | No || Read committed | 读已提交 | No | Yes | Yes  | No || Repeatable read | 可重复读 | No | No | Yes  | No || Serializable | 序列化 | No | No | No | Yes |\n默认的隔离级别为：RR，原因：5.1之后版本，如果Binlogog开启语句级别，必须为RR，RC可能会导致Binlog数据错误(详情);\n三、控制方式读未提交：每次都是读数据最新的版本(包括事务未提交的数据)；读已提交：MVCC控制；可重复读：MVCC控制；序列化：在读取的每一行上加锁，只能按顺序进行读写；\n四、InnoDB MVCC(多版本并发控制)原理\nInnoDB引擎下的MVCC，是通过在每一行上增加两个隐藏列实现的；每发生一个新的事务，系统版本都会递增；当UPDATE数据的时候，都是先copy出来一行操作，不影响原表数据，提交之后才影响；\n一个保存创建时间(非时间值，而是系统版本号)；一个保存删除时间(非时间值，而是系统版本号)；\n4.1 SELECT当前查询事务系统ID：5结果条件：\n\nCREATE VERSION &lt;&#x3D; 5(RR级别为 &lt;&#x3D; 5,RC级别应该是直接取最大值)；\nDELETE VERSION &#x3D;&#x3D; null or DELETE VERSION &gt; 5 (RR级别应该只有为空，RC级别可能有 &gt; 5的情况)；\n\n1可以保证读取到的行，在事务开始之前就已经存在，要么是事务自身插入或者修改的；2可以保证读取到的行，在事务开始之前未被删除；\n4.2 INSERT为新插入的每一行保存当前系统版本号作为CREATE VERSION；\n4.3 DELETE为删除的每一行保存当前系统版本号作为DELETE VERSION；\n4.4 UPDATE插入一行新的记录，保存当前系统版本号作为CREATE VERSION；同事保存当前系统版本号到原来的行上作为DELETE VERSION；\n五、参考：\n《高性能MySQL》\nMySQL的四种事务隔离级别(ps:此处有测试截图，比较直观)\n\n","categories":["sql"],"tags":["mysql"]},{"title":"解决：html rendering error - MarkdownPad 2","url":"/20170119-%E8%A7%A3%E5%86%B3%EF%BC%9Ahtml-rendering-error-MarkdownPad-2/","content":"MarkdownPad 2在windows 10上会遇到这个错误\n官方发布了这个问题的解决办法\n详见：点击前往 页面中搜索：This view has crashed\n解决办法windows 10系统 需要下载 一个  awesomium_v1.6.6_sdk_win\n这是一个 HTML UI ENGINE\n下载地址：http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\n","tags":["MarkdownPad","html rendering error"]},{"title":"计算长度最大的子串长度(按空格分割) - 多种方式","url":"/20190326-%E8%AE%A1%E7%AE%97%E9%95%BF%E5%BA%A6%E6%9C%80%E5%A4%A7%E7%9A%84%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6(%E6%8C%89%E7%A9%BA%E6%A0%BC%E5%88%86%E5%89%B2)/","content":"一、背景今天中午一个朋友问我一个问题没来得及回，现在折腾一下;问题：有一个包含以N个空格分割的字符串，求最大子串的长度，要求时间空间复杂度最优;\n二、方案：\n朋友给人方案：直接split分割遍历数组，找出最大值;\n面试官的方案：使用StringTokenizer，找出最大值;\n我想到的方案：indexOf计算index差值，找出最大值;\n\n三、结果：封装的代码比较复杂，目前来看不在么好分析时间复杂度和空间复杂度；于是就直观得对比了一下时间；\n//        output//        use(nano): 15486049, by 方案3//        use(nano): 66060102, by 方案2//        use(nano): 80844275, by 方案1\n有时间再深入了解下StringTokenizer的源码\n四、代码对比String oriStr = &quot;aa aa aaaa aaa a a a aa aa a&quot;;int times = 100000;// 自定义实现final long start1 = System.nanoTime();for (int i = 0; i &lt; times; i++) &#123;    String splitStr = &quot; &quot;;    findMaxLength(oriStr, splitStr);&#125;final long end1 = System.nanoTime();// 利用 StringTokenizerfinal long start2 = System.nanoTime();for (int i = 0; i &lt; times; i++) &#123;    findMaxLength4StringTokenizer(oriStr);&#125;final long end2 = System.nanoTime();// 利用 Splitfinal long start3 = System.nanoTime();for (int i = 0; i &lt; times; i++) &#123;    String splitStr = &quot; &quot;;    findMaxLength4Split(oriStr, splitStr);&#125;final long end3 = System.nanoTime();System.out.println(&quot;use(nano): &quot; + (end1 - start1) + &quot;, by findMaxLength&quot;);System.out.println(&quot;use(nano): &quot; + (end2 - start2) + &quot;, by findMaxLength4StringTokenizer&quot;);System.out.println(&quot;use(nano): &quot; + (end3 - start3) + &quot;, by findMaxLength4Split&quot;);//        output//        use(nano): 15486049, by findMaxLength//        use(nano): 66060102, by findMaxLength4StringTokenizer//        use(nano): 80844275, by findMaxLength4Split\n五、完整代码\ngithub也有：https://github.com/hisenyuan/IDEAPractice/blob/master/src/main/java/com/hisen/interview/TestStringTokenizer.java\n/** * @Author hisenyuan * @Description 计算长度最大的子串长度(按空格分割), 自定义实现比较优 * @Date 2019/3/26 20:53 */public class TestStringTokenizer &#123;    public static void main(String[] args) &#123;        String oriStr = &quot;aa aa aaaa aaa a a a aa aa a&quot;;        int times = 100000;        // 自定义实现        final long start1 = System.nanoTime();        for (int i = 0; i &lt; times; i++) &#123;            String splitStr = &quot; &quot;;            findMaxLength(oriStr, splitStr);        &#125;        final long end1 = System.nanoTime();        // 利用 StringTokenizer        final long start2 = System.nanoTime();        for (int i = 0; i &lt; times; i++) &#123;            findMaxLength4StringTokenizer(oriStr);        &#125;        final long end2 = System.nanoTime();        // 利用 Split        final long start3 = System.nanoTime();        for (int i = 0; i &lt; times; i++) &#123;            String splitStr = &quot; &quot;;            findMaxLength4Split(oriStr, splitStr);        &#125;        final long end3 = System.nanoTime();        System.out.println(&quot;use(nano): &quot; + (end1 - start1) + &quot;, by findMaxLength&quot;);        System.out.println(&quot;use(nano): &quot; + (end2 - start2) + &quot;, by findMaxLength4StringTokenizer&quot;);        System.out.println(&quot;use(nano): &quot; + (end3 - start3) + &quot;, by findMaxLength4Split&quot;);//        output//        use(nano): 15486049, by findMaxLength//        use(nano): 66060102, by findMaxLength4StringTokenizer//        use(nano): 80844275, by findMaxLength4Split    &#125;    private static void findMaxLength4StringTokenizer(String oriStr) &#123;        int maxLength = 0;        final StringTokenizer stringTokenizer = new StringTokenizer(oriStr);        while (stringTokenizer.hasMoreElements()) &#123;            final int length = stringTokenizer.nextToken().length();            maxLength = length &gt; maxLength ? length : maxLength;        &#125;//        System.out.println(&quot;max: &quot; + maxLength);    &#125;    private static void findMaxLength(String oriStr, String splitStr) &#123;        int index = 0;        final int maxIndex = oriStr.lastIndexOf(splitStr);        int maxLength = oriStr.length() - maxIndex;        while (index &lt; maxIndex) &#123;            final int currentIndex = oriStr.indexOf(splitStr, index);            int currLength = currentIndex - index;            maxLength = currLength &gt; maxLength ? currLength : maxLength;            index = currentIndex + splitStr.length();        &#125;//        System.out.println(&quot;max: &quot; + maxLength);    &#125;    private static void findMaxLength4Split(String oriStr, String splitStr) &#123;        int maxLength = 0;        final String[] strings = oriStr.split(splitStr);        for (String str : strings) &#123;            final int length = str.length();            maxLength = length &gt; maxLength ? length : maxLength;        &#125;//        System.out.println(&quot;max: &quot; + maxLength);    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"认识Java I/O | BIO NIO AIO | 同步与异步 | 阻塞与非阻塞 | I/O多路复用","url":"/20190413-%E8%AE%A4%E8%AF%86Java%20IO%20%7C%20BIO-NIO-AIO/","content":"一、名词解释1.1 同步与异步同步与异步主要是针对CPU来说的\n\n同步：CPU必须等着结果返回，这期间不能干别的;\n异步：CPU不必等着结果返回，这期间可以干别的;\n\n1.2 阻塞与非阻塞阻塞与非阻塞主要是针对I&#x2F;O来说的\n\n阻塞：I&#x2F;O线程会挂起，需等待结果;\n非阻塞：I&#x2F;O线程不必挂起，不等待结果;\n\n1.3 伪异步I&#x2F;O本质上还是同步阻塞I&#x2F;O不过是在服务器把socket链接封装成Task提交给线程池处理因为有队列，所以可以突破C:S&#x3D;1:1的比例\n1.4 I&#x2F;O多路复用通过把多个I&#x2F;O的阻塞复用到一个阻塞上，从而使得系统在单线程情况下可以处理多个客户端的请求。类似于linux的epoll、select\n1.5 多路复用器Selector，核心是通过Selector来轮询注册在其上的Channel当发现有Channel就绪就返回Channel的选择键集合，进行I&#x2F;O操作；\n二、不同I&#x2F;O模型对比表格\n| 对比项 | 同步阻塞I&#x2F;O(BIO) | 伪异步IO | 非阻塞I&#x2F;O(NIO) | 异步I&#x2F;O(AIO) ||:—–|:—–|:—–|:—–|:—–|:—–|| 客户端个数:I&#x2F;O线程数 | 1:1 | M:N(M&gt;&#x3D;N) | M:1 | M:O || I&#x2F;O类型(是否同步) | 同步 | 同步 | 同步(I&#x2F;O多路复用) | 异步 || I&#x2F;O类型(是否阻塞) | 阻塞 | 阻塞 | 阻塞 | 非阻塞 || API使用难度 | 简单 | 简单 | 非常复杂 | 复杂 || 调试难度 | 简单 | 简单 | 复杂 | 复杂 || 可靠性 | 非常差 | 差 | 高 | 高 || 吞吐量 | 低 | 中 | 高 | 高 |\n三、参考\n《Netty权威指南 2th》\n\n","categories":["java"],"tags":["java"]},{"title":"笔记 - 读后感：《第一本Docker书》","url":"/20180127-%E7%AC%94%E8%AE%B0%20-%20%E8%AF%BB%E5%90%8E%E6%84%9F%EF%BC%9A%E3%80%8A%E7%AC%AC%E4%B8%80%E6%9C%ACDocker%E4%B9%A6%E3%80%8B/","content":"忘记开始是在什么地方看到docker这个东西\n后面觉得挺好玩，也试了很多次，找过很多的教程。\n搭建了一个zookeeper的集群(docker-compose)\n然后当我需要搭建redis集群的时候，发现里面很多的概念还不是很懂\n比如：volume network\n然后加了docker的群，遇到了在以前idea群里面熟的一个人\n花了一天的时间看完他传的一本书，昨天买的几本书晚上也到了。（docker从入门到实践、java并发编程的艺术、effective java中文版 2）\n这本书总体来说还行，就是过时了，还在用link，毕竟三年前的东西\n有些例子也报错，主要是ruby相关的不行，提醒需要2.2以上的版本\n下面是随便做的一点笔记\n\n# 所有容器，不加-a只显示正在运行的；-1 列出最后一次运行的docker ps -a# 启动一个已经停止的容器(id，--name 都可以)docker start hisen_container# 进入容器(容器重启之后进入交换行)docker attach hisen_container# 创建一个守护式容器docker -d# 查看日志 可选 -f 类似tail -f Ctrl+c 退出docker logs hisen_container# 查看容器内的进程docker top hisen_container# 在容器内部运行进程docker exec -d hisen_container touch /etc/new_conf_file# 停止守护式容器docker stop hisen_container# 自动重启容器docker run --restart=always ....=on-failure:5 当容器退出代码为非0时，docker会自动重启，最多重试5次# 深入容器,会以json串显示更多容器信息docker inspect hisen_container # 删除容器，要先stop才行docker rm hisen_container# 删除所有容器 -a:所有容器 -q:只返回容器的IDdocker rm &#x27;docker ps -a -q&#x27;# 启动新的名字为other_hisen_container的容器，并且进入bash shelldocker run -i -t --name other_hisen_container ubuntu /bin/bash# docker文件系统层可写容器镜像(比如tomcat)基础镜像(比如ubuntu)引导文件系统(容器组、命名空间、设备映射)内核# docker简单构成顶层的读写层+底部不可变的可读层还有一些配置，就成了一个容器。# 列出所有镜像docker images# 仓库名:tag 如果没有指定，默认latest# 推荐使用Dockerfile构建镜像FROM ubuntu:14.04MAINTAINER hisenyuan &quot;hisenyuan@gmail.com&quot;RUN apt-get update \\&amp;&amp; apt-getinstall -y nginx \\&amp;&amp; echo &#x27;Hi,I am in your container&#x27; \\   /usr/share/nginx/html/index.htmlEXPOSE 80# 构建镜像，在上面的dockerfile目录docker build -t=&quot;hisenyuan/static_web&quot; .# 查看构建过程，以及镜像的每一层docker history 791397495f7a# 运行构建的镜像 -p端口映射 nginx -g &quot;daemon off;&quot; 前台运行nginxdocker run -d -p 80:80 --name static_web hisenyuan/static_web nginx -g &quot;daemon off;&quot;# Dockerfile指令RUN 镜像构建的时候才会执行CMD 启动一个容器的时候要运行的命令，如有多个，只会生效最后一个，前面的多个会被忽略ENTRYPOINT 例子:ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;],这个命令不容易覆盖，CMD容易被RUN覆盖WORKDIR 设定工作目录，ENTRYPOINT CMD 会在这个目录执行ENV 设置构建时的环境变量，设置之后可以在后续的RUN命令使用USER 设置运行的用户VOLUME 向基于镜像创建的容器添加卷。1.卷可以在容器间共享和重用2.一个容器不是必须和其他容器共享卷3.对卷的修改是立即生效的4.对卷的修改不会对更新镜像产生影响5.卷会一直存在，直到没有任何容器再使用他VOLUME [&quot;/opt/project&quot;] 创建一个名为/opt/project的挂载点ADD 添加上下文目录的文件到构架容器中，如果是压缩包，会自动解压。会使构建缓存无效COPY 类似ADD、只会在上下文复制文件、也不会解压ONBUILD 为镜像添加触发器，当一个镜像被用作其他镜像的基础镜像时，该镜像中的触发器将会被执行。# 删除镜像，会删除这个镜像的每一层docker rmi hisenyuan/static_web# 运行一个registrydocker run -p 5000:5000 registry# 推送镜像到registrydocker tag 791397495f7a yourip:5000/hisenyuan/static_web #打标签docker push yourip:5000/hisenyuan/static_web #推送到本地注册容器docker run -t -i docker yourip:5000/hisenyuan/static_web /bin/bash #从registry运行一个容器==========第五章 在测试中使用docker==========5.1 使用docker测试静态网站5.1.1 sample网站的初始Dockerfilehisen@docker1:~/docker$ mkdir samplehisen@docker1:~/docker$ cd sample/hisen@docker1:~/docker/sample$ touch Dockerfilehisen@docker1:~/docker/sample$ mkdir nginx &amp;&amp; cd nginxhisen@docker1:~/docker/sample/nginx$ vi global.confserver &#123;        listen          0.0.0.0:80;        server_name     _;        root            /var/www/html/website;        index           index.html index.htm;        access_log      /var/log/nginx/default_access.log;        error_log       /var/log/nginx/default_error.log;&#125;hisen@docker1:~/docker/sample/nginx$ vi nginx.confuser www-data;worker_processes 4;pid /run/nginx.pid;daemon off;events &#123;  &#125;http &#123;  sendfile on;  tcp_nopush on;  tcp_nodelay on;  keepalive_timeout 65;  types_hash_max_size 2048;  include /etc/nginx/mime.types;  default_type application/octet-stream;  access_log /var/log/nginx/access.log;  error_log /var/log/nginx/error.log;  gzip on;  gzip_disable &quot;msie6&quot;;  include /etc/nginx/conf.d/*.conf;&#125;hisen@docker1:~/docker/sample/nginx$ vi DockerfileFROM ubuntu:14.04MAINTAINER hisenyuan &quot;hisenyuan@gmail.com&quot;ENV REFRESHED_AT 2018-01-27RUN apt-get update \\ &amp;&amp; apt-get -y -q install nginx \\ &amp;&amp; mkdir -p /var/www/htmlADD nginx/global.conf /etc/nginx/conf.d/ADD nginx/nginx.conf /etc/nginx/nginx.confEXPOSE 80hisen@docker1:~/docker/sample/nginx/website$ vi index.html&lt;head&gt;\t&lt;title&gt;Test website&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\t&lt;h1&gt;This is a test website&lt;/h1&gt;&lt;/body&gt;hisen@docker1:~/docker/sample/nginx$ docker build -t hisenyuan/nginx .hisen@docker1:~/docker/sample/nginx$ docker run -d -p 8080:80 --name website \\&gt; -v $PWD/website:/var/www/html/website \\&gt; hisenyuan/nginx nginx # 因为已经在配置文件指定了daemon off，所以能直接启动# -v 指定了卷的源目录，挂载本地$PWD/website到容器/var/www/html/website目录，conf配置文件指定了工作目录# 修改之后，刷新浏览器，立马就生效hisen@docker1:~/docker/sample/nginx$ vi $PWD/website/index.html&lt;head&gt;&lt;title&gt;Test website - hisenyuan&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a test website&lt;/h1&gt;&lt;h2&gt;2018年1月27日 13:20:13&lt;/h2&gt;&lt;/body&gt;5.2 使用docker构建并测试web应用程序5.2.1 构建sinatra应用程序# 创建Dockerfilehisen@docker1:~/docker/sinatra$ vi DockerfileFROM ubuntu:14.04MAINTINER hisenyuan &quot;hisenyuan@gmail.com&quot;ENV REFRESHED 2018-01-27RUN apt-get upate \\ &amp;&amp; apt-get -y install ruby ruby-dev build-essential redis-tools \\ &amp;&amp; gem install --no-rdoc --no-ri sinatra json redis \\ &amp;&amp; mkdir -p /opt/webappEXPOSE 4567# 代码网站：https://dockerbook.com/code/5/sinatra/webapp/wget --cut-dir=3 -nH -r --no-parent https://dockerbook.com/code/5/sinatra/webapp/5.3 docker用于持续集成==========第六章 使用docker构建服务==========6.1 构建第一个应用==========第七章 Consul、服务发现与注册==========","categories":["docker"],"tags":["docker"]},{"title":"该Java语句创建了多少个对象？","url":"/20170120-%E8%AF%A5Java%E8%AF%AD%E5%8F%A5%E5%88%9B%E5%BB%BA%E4%BA%86%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%9F/","content":"String str = new String(&quot;java&quot;);\n答案：最少一个，最多两个\n\njava中有常量池的概念，常量池和类文件相关，其数据存放的区域是在方法区中（方法区是jvm中内存模型的概念）\n因为当你使用关键字new的时候是一定会生成一个String类的实例，当你使用直接量的方式定义了一个字符串时，假如这个字符串在常量池中，则不会去实例化String，反之则会生成一个String类的实例，并置入常量池\n\n","tags":["java"]},{"title":"面试题收集 - Java - 2017","url":"/20170808-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E9%9B%86%20-%20Java%20-%202017/","content":"我只是收集一下题目，检查一下自己。\n京东平台产品研发部 - Java背景：一年工作经验，做电子政务\n\n一个数组 i[] &#x3D; [-1000 ~ 1000] 中的任意一些数字，求乘积最大的三个数。\nstatic都能用在哪里？\n1M 等于多少个1\n面向对象的特性\n写出两种单例模式\nHashMap有哪些方法\nHashMap的底层实现\nList和Set的区别\n重载和重写的区别，多态如何体现\n判断字符串是否含有此Url：www.jd.com\n\n\nLong l1 = new Long(1024L);Long l2 = new Long(1024L);System.out.println(l1 == l2);//falseInteger i1 = 100;Integer i2 = 100;System.out.println(i1 == i2);//truei1 = 100;i2 = 100;System.out.println(i1 == i2);//true\n\nSpring自定义注解、拦截器相关\n为什么使用注解、有什么好处\nSpring中运用了哪些设计模式\nSping和SpringBoot各有什么优缺点\nSpring的事物隔离机制\n说说AOP、DI、IOC\nredis等用过没\n缓存和memorycache\nhttp://www.jd.com/...username=… 为了防止sql注入，怎么写正则。\nmybatis如何防止sql注入\nmybatis使用变量时怎么表示\n使用js遍历json数据\n使用Map遍历json数据\nelasticsearch相关\n你曾经在社区接触过的技术有哪些\n项目相关：做了哪些部分、职责、用到哪些技术、设计了哪些\n介绍一下RPC调用\n\n谷歌淘来的一个总结面试题总结 —— JAVA高级工程师\n部分答案\n\n一个数组 i[] &#x3D; [-1000 ~ 1000] 中的任意一些数字，求乘积最大的三个数。\n\n/**  *  * 功能：求解一维无序数组中三个数字乘积最大值（正负零均存在）  */ @Test public void getMaxThreeNum() &#123;   // 首先对数组进行升序排序   // 1. 数组左端是0，那么不存在负数，最大值为：i[-1]*i[-2]*i[-3]   // 2. 数组左端是正数，同上   // 3. 数组左端是负数，那么可能会负负得正，由于是升序，最大值为：i[0]*i[1]*i[-1]   // 4. 去上面两个的最大值即可   int[] i = &#123;0,-10, -9, -8, 7, 6, 5, 4, 3, 2, 1&#125;;   Arrays.sort(i);   int length = i.length;   int a = i[0] * i[1] * i[length - 1];   int b = i[length - 1] * i[length - 2] * i[length - 3];   if (a &gt; b) &#123;//-10 * -9 * 7 = 630     System.out.println(i[0] + &quot; * &quot; + i[1] + &quot; * &quot; + i[length - 1] + &quot; = &quot; + a);   &#125; else &#123;     System.out.println(i[length - 1] + &quot; * &quot; + i[length - 2] + &quot; * &quot; + i[length - 3] + &quot; = &quot; + b);   &#125; &#125;\n\n1M 等于多少个1\n\n@Testpublic void get1McanHoldInt()&#123;  // int 占用4个字节 4Byte = 4 * 8bit  System.out.println(1*1024*1024/4);&#125;\n\n写出两种单例模式\n\n//懒汉模式public class LazySingleton &#123;    private static LazySingleton instance = null;    private LazySingleton()&#123;        super();    &#125;    public static LazySingleton getInstance()&#123;        if(instance == null)&#123;            // 静态方法，使用当前类本身充当进程锁            synchronized(LazySingleton.class)&#123;                instance = new LazySingleton();            &#125;        &#125;        return instance;    &#125;&#125;// 饿汉式单例模式public class EagerSingleton &#123;    private static EagerSingleton instance = new EagerSingleton();    private EagerSingleton()&#123;        super();    &#125;    // 不需要同步（类加载时已经初始化，不存在多线程的问题）    // 始终只有一个对象    public EagerSingleton getInstance()&#123;        return instance;    &#125;&#125;\n\n判断字符串是否含有此Url：www.jd.com\n\n@Testpublic void isHaveUrl()&#123;  String url = &quot;这是京东官网：www.jd.com&quot;;  Pattern pattern = Pattern.compile(&quot;.*www.jd.com.*&quot;);  Matcher matcher = pattern.matcher(url);  if (matcher.find())&#123;    System.out.println(matcher.group());  &#125;else &#123;    System.out.println(&quot;未匹配&quot;);  &#125;&#125;\n\nhttp://www.jd.com/...username=… 为了防止sql注入，怎么写正则。\n\n将包含有 单引号(&#x27;)，分号(;) 和 注释符号(--)的语句给替换掉来防止SQL注入str.replaceAll(&quot;([&#x27;;])+|(--)+&quot;,&quot;&quot;);\n\nmybatis如何防止sql注入\n\n防护一：sql语句不在使用$&#123;&#125;表达式，改为#&#123;&#125;&lt;select id=&quot;getBlogById&quot; resultType=&quot;Blog&quot; parameterType=”int”&gt;         SELECT id,title,author,content         FROM blogWHERE id=#&#123;id&#125;&lt;/select&gt;编译后的SQL：SELECT id,title,author,content FROM blog WHERE id = ? (能避免sql注入)&lt;select id=&quot;getBlogById&quot; resultType=&quot;Blog&quot; parameterType=”int”&gt;         SELECT id,title,author,content         FROM blogWHERE id=$&#123;id&#125; &lt;!--假如id= 3 --&gt;&lt;/select&gt;编译后的SQL：SELECT id,title,author,content FROM blog WHERE id = 3 (无法避免sql注入)SQL注入只能对编译过程起作用#&#123;&#125;：相当于JDBC中的PreparedStatement$&#123;&#125;：是输出变量的值#&#123;&#125;是经过预编译的，是安全的；$&#123;&#125;是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。防护二：采用阿里的druid数据连接池，添加如下配置&lt;!-- 配置监控统计拦截的filters,和防sql注入 --&gt;&lt;property name=&quot;filters&quot; value=&quot;stat,wall&quot; /&gt;防护三：使用正则表达式过滤输入参数\n\nmybatis使用变量时怎么表示\n\n#与$的区别1.#是把传入的数据当作字符串，如#field#传入的是id,则sql语句生成是这样，order by &quot;id&quot;,这当然会报错．．2.$传入的数据直接生成在sql里，如$field$传入的是id,则sql语句生成是这样，order by id, 这就对了．3.#方式能够很大程度防止sql注入．4.$方式无法防止sql注入．5.$方式一般用于传入数据库对象．例如传入表名.6.一般能用#的就别用$.\n\n使用js遍历json数据\n\nvar data=[&#123;name:&quot;a&quot;,age:12&#125;,&#123;name:&quot;b&quot;,age:11&#125;,&#123;name:&quot;c&quot;,age:13&#125;,&#123;name:&quot;d&quot;,age:14&#125;];        for(var o in data)&#123;          alert(&quot;text:&quot;+data[o].name+&quot; value:&quot;+data[o].age );        &#125;  \n","categories":["java"],"tags":["java","面试"]},{"title":"记录一次面试过程中交流的一些题","url":"/20170126-%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BA%A4%E6%B5%81%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98/","content":"以下是面试一家支付类公司的过程当中遇到的面试题\n主要是交流比较多，不是先笔试\n直接是把这些问题带入到具体的情景当中去\n可能这样更能考验出一个人真正的技术水平\n1，很多文件，读出数字，加1写回，谈谈你的想法\n2，能继承string类?\n不可以，因为String类有final修饰符，而final修饰的类是不能被继承的，实现细节不允许改变。\n3，能有个包名一样的String类?如果有一样的会调用哪个？\n4，一个主线程等待其他线程完成，如果其中有线程出错怎么办？\n把线程可能会出现的问题处理掉出错了能保证让他重新执行\n\n5，Oracle默认端口？\n1521\n\n6，b继承a，b的对象能强转成a嘛？\n不能把一个对象强制转换成另外一个对象\n\n7，数据库去重，删除所有重复记录，只留下一条\nDELETEFROM EMP EWHERE E.ROWID &gt;    (SELECT MIN(X.ROWID)     FROM EMP X     WHERE X.EMP_NO = E.EMP_NO);\n\n\n8，try c里面，没打印出错误来，是为什么？\n1.可能是程序执行是正确的2.可能存在调用，但是调用的方法里面出现了错误，没有抛出或者是运行时错误\n\n9，JAVA数据类型\n\n\n\n简单类型\n二进制位数\n封装器类\n\n\n\nboolean\n1\nBoolean\n\n\nbyte\n8\nByte\n\n\nchar\n16\nCharacter\n\n\nshort\n16\nShort\n\n\nInt\n32\nInteger\n\n\nlong\n64\nLong\n\n\nfloat\n32\nFloat\n\n\ndouble\n64\nDouble\n\n\nvoid\n–\nVoid\n\n\n10，银行金额字段\n金融数字是BigDecimal类型\n\n11，用什么解析XML，有什么优缺点\nDOM4J(Document Object Model for Java)虽然DOM4J代表了完全独立的开发结果，但最初，它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，它通过DOM4J API和标准DOM接口具有并行访问功能。从2000下半年开始，它就一直处于开发之中。为支持所有这些功能，DOM4J使用接口和抽象基本类方法。DOM4J大量使用了API中的Collections类，但是在许多情况下，它还提供一些替代方法以允许更好的性能或更直接的编码方法。直接好处是，虽然DOM4J付出了更复杂的API的代价，但是它提供了比JDOM大得多的灵活性。在添加灵活性、XPath集成和对大文档处理的目标时，DOM4J的目标与JDOM是一样的：针对Java开发者的易用性和直观操作。它还致力于成为比JDOM更完整的解决方案，实现在本质上处理所有Java/XML问题的目标。在完成该目标时，它比JDOM更少强调防止不正确的应用程序行为。DOM4J是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML，特别值得一提的是连Sun的JAXM也在用DOM4J.【优点】①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。②支持XPath。③有很好的性能。【缺点】①大量使用了接口，API较为复杂。\n\n12，阿贾克斯熟悉吗？能发起请求下载文档吗？返回类型有哪些，遇到错误怎么提示用户\n不能发起文档下载，返回的类型只有字符型，出错了alert出错误\n\n13，jquery选择器\njQuery 元素选择器jQuery 使用 CSS 选择器来选取 HTML 元素。$(&quot;p&quot;) 选取 &lt;p&gt; 元素。$(&quot;p.intro&quot;) 选取所有 class=&quot;intro&quot; 的 &lt;p&gt; 元素。$(&quot;p#demo&quot;) 选取所有 id=&quot;demo&quot; 的 &lt;p&gt; 元素。jQuery 属性选择器jQuery 使用 XPath 表达式来选择带有给定属性的元素。$(&quot;[href]&quot;) 选取所有带有 href 属性的元素。$(&quot;[href=&#x27;#&#x27;]&quot;) 选取所有带有 href 值等于 &quot;#&quot; 的元素。$(&quot;[href!=&#x27;#&#x27;]&quot;) 选取所有带有 href 值不等于 &quot;#&quot; 的元素。$(&quot;[href$=&#x27;.jpg&#x27;]&quot;) 选取所有 href 值以 &quot;.jpg&quot; 结尾的元素。\n\n14，空指针异常，怎么定位错误\n定位到出现错误的行数看看附近的各种调用是否存可能出现空指针异常，再慢慢排除","tags":["java","面试"]},{"title":"阿里巴巴Java开发手册，摘要&下载链接","url":"/20170213-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%8C%E6%91%98%E8%A6%81-%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/","content":"阿里巴巴java开发手册\n看了几个小时，感觉还是不错\n都按规范来写，可以避免很多错误\n下载链接\n点击下载\n","categories":["java"],"tags":["java"]},{"title":"读取文件路径相关问题","url":"/20190716-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","content":"零、本文由来感觉从业这么久以来，读取文件路径相关问题一直是一个痛用的很少，之前也解决过相关的问题但是得用这种路径\nsrc/test/resources/test/test.txt\n上面这种路径如果在代码中的话，src&#x2F;test&#x2F;resources是不会存在的，会出现问题本次学到了一个新的方法，Class.getResourceAsStream();需要的路径在资源文件夹下面即可，填写路径：&#x2F;test&#x2F;test.txt打包最终的路径会在：WEB-INF&#x2F;classes&#x2F;test&#x2F;test.txt\nps：因maven打包配置不同，最终resources资源文件夹下的路径是不同的，注意src的坑即可\n一、文件结构│   └── test│       ├── java│       │   └── mq│       │       └── Test.java│       └── resources│           ├── test│           │   └── test.txt\n二、读取代码@RunWith(value = SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;&quot;/spring-config.xml&quot;&#125;)public class Test &#123;    @Test    public void test() throws IOException &#123;        InputStream inputStream = Test.class.getResourceAsStream(&quot;/test/test.txt&quot;);        byte[] buffer = new byte[1024];        int len;        ByteArrayOutputStream bos = new ByteArrayOutputStream();        while ((len = inputStream.read(buffer)) != -1) &#123;            bos.write(buffer, 0, len);        &#125;        bos.close();        String res = bos.toString();        System.out.println(res);    &#125;&#125;\n","categories":["java"],"tags":["java"]},{"title":"Linux 查看日志文件常用命令","url":"/20170407-linux-log-command/","content":"linux查看日志文件内容命令tail、cat、tac、head、echo\ntail -f test.log\n你会看到屏幕不断有内容被打印出来. 这时候中断第一个进程Ctrl-C,\ncat -n hisen.log | grep ‘907’\n在文件当中查找指定的内容，这里是查询：907\n\nlinux 如何显示一个文件的某几行(中间几行)\n从第3000行开始，显示1000行。即显示3000~3999行\ncat filename | tail -n +3000 | head -n 1000\n显示1000行到3000行\ncat filename| head -n 3000 | tail -n +1000\n*注意两种方法的顺序分解：\n\ntail -n 1000：显示最后1000行\ntail -n +1000：从1000行开始显示，显示1000行以后的\nhead -n 1000：显示前面1000行\n\n用sed命令sed -n ‘5,10p’ filename 这样你就可以只查看文件的第5行到第10行。\n例：cat mylog.log | tail -n 1000 #输出mylog.log 文件最后一千行\n\ncat主要有三大功能：\n1.一次显示整个文件。$ cat filename\n2.从键盘创建一个文件。$ cat &gt; filename\n只能创建新文件,不能编辑已有文件.\n3.将几个文件合并为一个文件： $cat file1 file2 &gt; file\n参数：\n-n 或 –number 由 1 开始对所有输出的行数编号\n-b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号\n-s 或 –squeeze-blank 当遇到有连续两行以上的空白行，就代换为一行的空白行\n-v 或 –show-nonprinting\n例：\n把 textfile1 的档案内容加上行号后输入 textfile2 这个档案里\ncat -n textfile1 &gt; textfile2\n把 textfile1 和 textfile2 的档案内容加上行号（空白行不加）之后将内容附加到 textfile3 里。\ncat -b textfile1 textfile2 &gt;&gt; textfile3\n把test.txt文件扔进垃圾箱，赋空值test.txt\ncat /dev/null &gt; /etc/test.txt\n\n注意：&gt;意思是创建，&gt;&gt;是追加。千万不要弄混了。\n\ntac (反向列示)\ntac 是将 cat 反写过来，所以他的功能就跟 cat 相反， cat 是由第一行到最后一行连续显示在萤幕上，\n而 tac 则是由最后一行到第一行反向在萤幕上显示出来！\n\n在Linux中echo命令用来在标准输出上显示一段字符，比如：echo “the echo command test!”\n这个就会输出“the echo command test!”这一行文字！\necho “the echo command test!”&gt;a.sh\n这个就会在a.sh文件中输出“the echo command test!”这一行文字！\n该命令的一般格式为： echo [ -n ] 字符串其中选项n表示输出文字后不换行；字符串能加引号，也能不加引号。\n用echo命令输出加引号的字符串时，将字符串原样输出；\n用echo命令输出不加引号的字符串时，将字符串中的各个单词作为字符串输出，各字符串之间用一个空格分割。\n一些实例\n#在整个文件搜索含有907的内容hisen@ubuntu:~/dl$ cat -n hisen.log | grep &#x27;907&#x27;    25\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art    26\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep#从第3行开始,显示10行 即：3~12 并且显示行号hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n +3 | head -n 10     3\t07-Apr-2017 15:48:50.072 信息 [main] org.apache.coyote.Abstrac     4\t07-Apr-2017 15:48:50.137 信息 [main] Using a shared selector f     5\t07-Apr-2017 15:48:50.172 测试 [main] Initializing ProtocolHand     6\t07-Apr-2017 15:48:50.186 信息 [main] Using a shared selector f     7\t07-Apr-2017 15:48:50.187 你猜 [main] load Initialization proce     8\t07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte     9\t07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To    10\t07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler    11\t07-Apr-2017 15:48:50.318 哪里 [main] ProtocolHandler [ajp-nio-    12\t07-Apr-2017 15:48:50.328 信息 [main] start Server startup in 1#显示10行前三行hisen@ubuntu:~/dl$ cat -n hisen.log | head -n +10 | tail -n 3     8\t07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte     9\t07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To    10\t07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler#显示3-10行hisen@ubuntu:~/dl$ cat -n hisen.log | head -n 10 | tail -n +3     3\t07-Apr-2017 15:48:50.072 信息 [main] org.apache.coyote.Abstrac     4\t07-Apr-2017 15:48:50.137 信息 [main] Using a shared selector f     5\t07-Apr-2017 15:48:50.172 测试 [main] Initializing ProtocolHand     6\t07-Apr-2017 15:48:50.186 信息 [main] Using a shared selector f     7\t07-Apr-2017 15:48:50.187 你猜 [main] load Initialization proce     8\t07-Apr-2017 15:48:50.261 信息 [main] StandardService.startInte     9\t07-Apr-2017 15:48:50.261 信息 [main] Servlet Engine: Apache To    10\t07-Apr-2017 15:48:50.293 信息 [main] Starting ProtocolHandler#显示倒数第二行hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n 2    25\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art    26\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep#从24行开始，显示到最后hisen@ubuntu:~/dl$ cat -n hisen.log | tail -n +24    24\t07-Apr-2017 15:49:04.585 信息 during time.    25\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Art    26\t[2017-04-07 03:49:04,907] Artifact ssm_study:war exploded: Dep\n","categories":["linux"],"tags":["linux"]},{"title":"工作的第一个十年","url":"/20250719-the-first-decade-of-work/","content":"简短概述十年前，本科毕业，成为北漂一族。\n\n2015年6月13日 14:31 落地时发了个朋友圈;\n\n十年后，成家立业，成功负债累累。\n\n2017 买房、2022 买房、2023 结婚、2025 如意晋升;\n\n喜欢阅读，偶尔运动，工作上追求做得更好，一路走来，感谢所遇到的人和事助我更好地成长，继续努力，以后继续力所能及帮助身边有需要的人。\n工作总结十年间经历了 6 个公司，大多数 1 ~ 2 年( 有点草率 )，目前这段 4+ 年属最长。年均性价比最高的应该是 2018 ~ 2021，因为那会真正负反馈充足。\n\n反馈：\n\n广度：创业公司需要做很多琐碎的事情，知识面会广一些；\n深度：在某电商公司做订单系统，IO 密集型 QPS 压测上百万那种，技术要求比较高；\n薪酬：不管是在创业公司、还是在电商公司，薪水以及晋升都反馈较明显，努力就有收获；\n\n在职场他人给的评价是技术功底好，我更愿称之为喜欢刨根问底。遇到问题不绕着走，记录好每一次疑难杂症的现场，有机会就好好剖析。偏好『计算机科学基础』，掌握原理，以不变应万变。作为『个人贡献者』的时候，写好文档、记录问题、抓非功能特性、追求代码的可读性、可维护性。在带团队之后通过 CR ，发现 case 解决 case 的时候，引导他们做好的设计、写好的代码，慢慢磨合。\n最意外的是有个校招的同学感谢我的指导和严要求让他成长加速；虽然有时候说话比较直，当时心理不好受，但相比前两年在其它组放养好多了；\n多次参加公司培训，每次都收获颇丰( 了解新的概念、了解自己、学习沟通管理技能 )。\n阅读习惯这十年『最欣慰』的就是在持续阅读。自从上班通勤在地铁上看到有人 kindle 阅读，于是跟风买了个，后来慢慢养成了习惯( 详见 )。持续的阅读让我觉得很充实，没有浪费时间，仿佛每天都在进步。持续学习的感觉是真好。这是 阅读书单，一年少的也有 30+，多的 60+，应该没拖国人后腿。一般阅读我都做笔记，可惜散落在各处暂未收敛( 锤子便签、魅族便签、苹果便签、有道云笔记 )。好在大部分阅读完的书籍都会整理发布微博( @hisenyuan )，目前微博数量 456 ( 少量非读书笔记 )。后续我比较倾向于把所有数据整合在一起，总结之后发到博客和微博, 这样也锻炼了输出能力，后续也方便回顾。关于输出可以看 为什么要写博客？，我很认同里面的观点，也在尽量践行( 工作&#x2F;个人文档 均 OK )。\n\n无聊时翻一番微博，看看阅读量，以及历史的内容，搜索查找都比较方便。甚至在和朋友聊起 xxx 的时候，可以快速找到对应内容进行回顾，或者展示一下 优越感。\n\n年度总结\n回顾 2019，展望 2020\n回顾 2021，展望 2022\n回顾 2023，展望 2024\n可惜没有一直记录，定期总结反思很重要。\n\n\n\n好人好事好人来京第一个待的地方是 北京南站 附近的西罗园小区，亲戚老哥接济了 1月+。找工作的过程中一直管吃管住，给人带来不少麻烦。甚是感激~\n还有其它很多给予过支持和指导的人虽未列举，但铭记于心!\n好事由于来自南方乡村、县城都是十几线了；在北京的人比较少，所以老乡交流会比较多；加上好些亲戚在这边，他们都很优秀，跟着他们接触了更多优秀的老乡；在这过程中也就见了不少市面、感受了来自身边的榜样的力量，激励我努力前行。\n有幸参与过县里组织的”结对子”活动( 北京在校生找已经工作的导师 )；挺好的一个想法，但是人在年前的时候很难抓住那些好的机会和资源，遭受社会毒打之后可能好些 ~\n持续对外有输出和指导，有些不错的结果，成就感满满。\n爱好\n羽毛球：\n\n装备：尤尼克斯 弓箭 11、尤尼克斯 DUORA 双刃 10；\n频率：基本每周 1 次；\n\n\n自行车：\n\n装备：捷安特 propel 公路车；\n频率：偶尔；\n\n\n户外：徒步、爬山、露营等; 频率较低；\n\n水族：\n\n鱼缸\n尺寸：100 * 60 * 80 ( 单位 cm )\n生物：阿塔巴布(埃及神仙鱼) * 6、L333 * 2、L600 * 2、红头力关刀鱼 * 15；\n设备：干湿分离底滤、变频水泵、变频加热棒、变频造浪泵、自动喂食器；\n\n\n龟缸：\n尺寸：100 * 60 * 35 ( 单位 cm )\n生物：鳄鱼龟、体重5Kg+；\n设备：干湿分离底滤、变频水泵；\n\n\n虾缸\n尺寸：60 * 25 * 25 ( 单位 cm )\n生物：极火虾若干(已经繁殖多代)、苹果螺若干、孔雀鱼多条; 浮萍若干；\n设备：无。不喂食、无过滤；\n\n\n\n\n绿植：小叶簕竹、龟背竹、仙洞龟背竹、绿萝、酒瓶兰、水杨梅、生石花、仙人指、芦荟、太阳花；\n\n蔬菜：辣椒、丝瓜、韭菜、薄荷;\n\n养鸟：玄凤、虎皮。( 同事赠予的，由于家人过敏、已出手。 )\n\n\n努力突破信息茧房尽量避免推荐系统的投喂，目前我尽量避开头条系时间消耗类产品。日常随机输入有：\n\n科技爱好者周刊：感谢阮一峰老师\ntombkeeper : 网络安全大拿、刚开始他的微博基本上看不懂、现在满满懂一些\n我的追踪列表：日常追踪网络内容\n\n后续方向\n牢抓基本功\n提升软技能\n探索新趋势\n坚持练体能\n\n","categories":["成长"],"tags":["总结","成长"]}]